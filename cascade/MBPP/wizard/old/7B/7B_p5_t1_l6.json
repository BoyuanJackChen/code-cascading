[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a table to store minimum cost of reaching each cell \n    # from the cell (0, 0) \n    dp = [[0 for x in range(n+1)] for y in range(m+1)] \n\n    # Fill the first row and first column of the table with the base values \n    for i in range(1, m+1): \n        dp[i][0] = dp[0][i] = float('inf') \n\n    # Initialize the first cell as 0, as we need to reach (0, 0) from (0, 0) \n    dp[0][0] = 0\n\n    # Fill the table in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            # If we are reaching the destination, assign it the cost 0 \n            if i == m and j == n: \n                dp[i][j] = 0\n            else: \n                # Calculate minimum cost to reach the cell (i, j) from (i-1, j) \n                dp[i][j] = min(dp[i-1][j] + cost[i-1][j], dp[i][j-1] + cost[i][j-1]) \n\n                # Calculate minimum cost to reach the cell (i, j) from (i-1, j-1) \n                if i > 1 and j",
        "generated_testcode": "assert min_cost(cost, 3, 3) == 12\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for num in test_tup1:\n        if num in test_tup2:\n            result.append(num)\n    return result\n\n# test the function with the sample input\nprint(similar_elements((1,2,3,4,5,6,7,8,9),(3,5,6,7,8,9,10,11,12)) # Output: [3,5,6,7,8,9]\n",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'cherry', 'orange', 'grape'), ('banana', 'apple', 'cherry', 'kiwi', 'grapefruit') == ['banana', 'grape'])\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef find_non_primes(start, end):\n    non_primes = []\n    for num in range(start, end + 1):\n        if is_not_prime(num):\n            non_primes.append(num)\n    return non_primes\n\n# Test the function\nprint(find_non_primes(10, 20)) # [10, 12, 14, 15, 16, 18, 20]\nprint(find_non_primes(21, 30)) # [22, 23, 24, 25, 26, 27, 28, 29]\nprint(find_non_primes(31, 40)) # [32, 33, 34, 35, 36, 37, 38, 39]\n\n# Explanation:\n# The function takes two arguments, start and end, which represent the range of numbers to search for non-prime numbers. \n# It checks if a number is not prime by iterating from 2 to the square root of the given number, and if any number divides the number, \n# it is not prime. If it is not prime,",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    largest = []\n    for i in range(n):\n        largest.append(heapq.heappop(heap))\n    return largest\n\n#Example usage:\nnums = [2,4,3,6,1,8,9,4,7,5,12]\nn = 3\nprint(heap_queue_largest(nums,n)) # Output: [12, 9, 8]\n\n\nnums = [1,2,3,4,5,6,7,8,9]\nn = 4\nprint(heap_queue_largest(nums,n)) # Output: [9, 8, 7, 6] ",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9,10], 3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [1] + [0] * n \n    for i in range(2, n + 1): \n        for j in range(1, n + 1): \n            if j == 1 or j == i: \n                dp[i] += 1\n            elif i - j > 0 and i - j < n: \n                dp[i] += dp[i - j] \n    return dp[n] \n  \n# Driver code \nn = 5\nprint(count_ways(n)) ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #function to check if a number is power of 2 \n    return (x & (x-1) == 0) \n    \ndef differ_by_one_bit(num1, num2): \n    #function to check if two numbers differ at one bit position\n    count = 0\n    for i in range(32): \n        if (num1 ^ num2) & (1 << i): \n            count += 1\n            if count > 1: \n                return False\n    return True if count == 1 else False\n\n#test cases\nprint(differ_by_one_bit(5, 3)) #True\nprint(differ_by_one_bit(7, 9)) #True\nprint(differ_by_one_bit(10, 11)) #False\nprint(differ_by_one_bit(15, 17)) #False\nprint(differ_by_one_bit(2, 3)) #False\nprint(differ_by_one_bit(1, 3)) #False",
        "generated_testcode": "assert is_Power_Of_Two (4) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)\n\n# Example usage:\nprint(find_char_long(\"This is an example string to find all words with 4 characters or more\")) # ['example', 'with', 'find', 'words']\nprint(find_char_long(\"Hello, this is a small sentence.\")) # []\nprint(find_char_long(\"I am a very long sentence with a long word in it.\")) # ['long', 'sentence', 'long', 'word', 'sentence']\nprint(find_char_long(\"Supercalifragilisticexpialidocious\")) # ['Supercalifragilisticexpialidocious']\n",
        "generated_testcode": "assert find_char_long(text=\"This is a sample text with some words.\") == ['sample', 'some', 'words']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(square_nums(nums)) # Output: [1, 4, 9, 16, 25, 36, 49, 64]\n\n\n# Write a function to filter even numbers from a list using lambda function\ndef even_nums(nums):\n    return list(filter(lambda x: x%2 == 0, nums))\n\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(even_nums(nums)) # Output: [2, 4, 6, 8]\n\n\n# Write a function to sum of even numbers using lambda function\ndef sum_even_nums(nums):\n    return sum(list(filter(lambda x: x%2 == 0, nums))\n\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_even_nums(nums)) # Output: 20",
        "generated_testcode": "assert square_nums(range(1, 5)) == [1, 4, 9, 4, 9, 16]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    count = 0\n    for i in range(n): \n        if str[i] != str[0]: \n            count += 1\n            break\n    else: \n        return 0\n    i = 1\n    while i < n: \n        str = str[i:] + str[:i] \n        if str == str: \n            return count + 1\n        i += 1\n    return count + 2\n  \n# Driver code \nstr = \"abcdabcd\"\nprint(find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(str) == 3\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_list = sorted(list1)\n    return sorted_list[:n]\n\nlist1 = [5,3,7,2,8,1,6,4,9,10,11,15,12,17,19,22]\nn = 3\nprint(small_nnum(list1,n)) # Output: [2, 3, 4]\n\nlist2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = 7\nprint(small_nnum(list2,n)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "generated_testcode": "assert small_nnum(range(10), 3) == [0, 1, 2]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    i = s.find(ch)\n    j = s[::-1].find(ch)\n    if i == -1 or j == -1:\n        return s\n    return s[:i] + s[i+1:j] + s[j+1:]\n\ns = input(\"Enter a string: \")\nch = input(\"Enter a character to be removed: \")\nprint(remove_Occ(s,ch))\n",
        "generated_testcode": "assert remove_Occ(s=\"hello world\", ch=\"l\") == \"he wrd\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(M, key=lambda row: sum(row))\n\nM = [[3, 1, 4], [1, 5, 2], [2, 6, 9]]\nprint(sort_matrix(M))\n# Output: [[1, 5, 2], [3, 1, 4], [2, 6, 9]]\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "assert sort_matrix(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == [[1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return sorted(freq.items(), key=lambda x: x[1], reverse=True)[0:3]\n\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\", \"banana\", \"orange\", \"orange\", \"orange\", \"apple\", \"apple\", \"apple\", \"apple\", \"grape\"]\nprint(count_common(words))  # Output: [('apple', 4), ('orange', 3), ('banana', 3)]\n\n# Note: The function should return the most common words in a list in descending order of frequency. In the event of a tie, the function should return the first word encountered.\n",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (1/2)*l*b*h\n\n# Test the function with sample inputs\nprint(find_Volume(3, 4, 5)) # Output: 6.0\nprint(find_Volume(10, 5, 12)) # Output: 60.0\nprint(find_Volume(7, 12, 9)) # Output: 135.0 ",
        "generated_testcode": "assert find_Volume(3,4,5) == 6\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    word = \"\"\n    for i in range(len(text)):\n        if text[i].isupper() or i == 0:\n            result.append(word)\n            word = \"\"\n        if text[i].islower():\n            word += text[i]\n    result.append(word)\n    return result\n\n# Test the function with a sample string\ntext = \"Hello, World! This is a test string.\"\nprint(split_lowerstring(text)) # Output: ['Hello', 'World', 'This', 'is', 'a', 'test', 'string.']\n\n# Test the function with a different sample string\ntext = \"Python is awesome. It is a great programming language.\"\nprint(split_lowerstring(text)) # Output: ['Python', 'is', 'awesome', 'It', 'is', 'a', 'great', 'programming', 'language.'] ",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\" ) == [\"H\", \"elloW\", \"orl\", \"d\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return text.islower() and text.replace(\"_\", \"\").islower()\n\n\nprint(text_lowercase_underscore(\"hello_world\"))  # True\nprint(text_lowercase_underscore(\"hello_world_123\"))  # False\nprint(text_lowercase_underscore(\"hello_WORLD\"))  # False\nprint(text_lowercase_underscore(\"hello_world_\"))  # False\nprint(text_lowercase_underscore(\"hello_world_underscore\"))  # True\nprint(text_lowercase_underscore(\"hello_world_underscore_world\"))  # True\nprint(text_lowercase_underscore(\"hello_world_underscore_world_123\"))  # False\nprint(text_lowercase_underscore(\"hello_world_underscore_world_\"))  # False\nprint(text_lowercase_underscore(\"hello_world_underscore_world_123_\"))  # False\nprint(text_lowercase_underscore(\"_hello_world_underscore_world_\"))  # False\n\n\n# Another solution using regex\ndef text_lowercase_underscore(text):\n    import re\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', text))\n\nprint(text_lowercase_underscore(\"hello_world\"))  # True\nprint(text_lowercase_underscore(\"hello_",
        "generated_testcode": "assert text_lowercase_underscore(None) == \"\"\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Given a side of a square, returns its perimeter\n    :param a: integer\n    :return: integer\n    \"\"\"\n    return a * 4\n\n\n# Test cases\nprint(square_perimeter(5)) # should return 20\nprint(square_perimeter(10)) # should return 40\nprint(square_perimeter(15)) # should return 60\n\n",
        "generated_testcode": "assert square_perimeter(4) == 16\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(string) \n\ndef remove_chars(str1, str2):\n    list1 = str_to_list(str1) \n    list2 = str_to_list(str2)\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    return \"\".join(list1)\n\n# Test the function\nprint(remove_chars(\"hello world\", \"lo\")) ",
        "generated_testcode": "assert str_to_list([\"hello\", \"lo\"] == [\"h\", \"e\", \"l\", \"o\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n\n\n# Test cases\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])) # True\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11])) # True\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(test_duplicate([1, 2, 3, 4, 5, 5, 6, 7, 8, 9])) # True\n\nprint(test_duplicate([1, 2, 2, 3, 4, 5, 6, 7, 8])) # True\nprint(test_duplicate([1])) # False\n",
        "generated_testcode": "assert test_duplicate([1,2,3,4,5,6,7,8,9] == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 1000 in [22, 33, 44, 55, 66, 77, 88, 99]:\n        if x % 10 in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] or x % 1000 in [20, 30, 40, 50, 60, 70, 80, 90]:\n            return True\n    return False\n\n\n# Test the function with some test cases\nprint(is_woodall(22)) # True\nprint(is_woodall(23)) # False\nprint(is_woodall(55)) # True\nprint(is_woodall(99)) # True\nprint(is_woodall(67)) # False\nprint(is_woodall(78)) # True\nprint(is_woodall(24)) # False\nprint(is_woodall(77)) # True\nprint(is_woodall(88)) # True\nprint(is_woodall(12)) # False\nprint(is_woodall(230)) # True\nprint(is_woodall(780)) # True\nprint(is_woodall(450)) # False\n",
        "generated_testcode": "assert is_woodall(15) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1,m+1): \n        if i % n == 0: \n            count += 1 \n    return count \n\n\n# Test the function \nprint(multiples_of_num(10,3)) # Output: 4 (There are 4 multiples of 3 in the range of 1 to 10)\nprint(multiples_of_num(20,5)) # Output: 6 (There are 6 multiples of 5 in the range of 1 to 20)\nprint(multiples_of_num(20,10)) # Output: 4 (There are 4 multiples of 10 in the range of 1 to 20)",
        "generated_testcode": "assert multiples_of_num(5, 2) == [0, 2, 4, 6, 8, 10, 12]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return None\n\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 2, 5, 6, 1])) # Output: 2\nprint(find_first_duplicate([2, 1, 3, 5, 4, 6, 3])) # Output: 3\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7])) # Output: None\nprint(find_first_duplicate([1, 1, 2, 3, 4, 5, 6])) # Output: 1\nprint(find_first_duplicate([1, 2, 2, 3, 4, 5, 6])) # Output: 2\nprint(find_first_duplicate([1, 1, 2, 3, 4, 5, 5])) # Output: 1\n\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5] ) == 1\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in list1:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n\n# Test the function with sample inputs\nprint(maximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])) # Output: 39\nprint(maximum_Sum([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])) # Output: 50\nprint(maximum_Sum([[5, 10, 15, 20], [25, 30, 35], [40, 45, 50, 55], [60, 65, 70, 75]])) # Output: 185\n",
        "generated_testcode": "assert maximum_Sum([[1,2,3], [4,5,6], [7,8,9]] ) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    decimal = 0\n    length = len(binary)\n    for i in range(length):\n        decimal += 2 ** (length-i-1) * int(binary[i])\n    return decimal\n\n# Test the function with sample input\nbinary = \"10101\"\nprint(binary_to_decimal(binary)) # Output: 11\n\nbinary = \"110101\"\nprint(binary_to_decimal(binary)) # Output: 19\nbinary = \"111111\"\nprint(binary_to_decimal(binary)) # Output: 15\nbinary = \"010100\"\nprint(binary_to_decimal(binary)) # Output: 10\n\n\n# Test the function with some edge cases\nbinary = \"0\"\nprint(binary_to_decimal(binary)) # Output: 0\nbinary = \"1\"\nprint(binary_to_decimal(binary)) # Output: 1\nbinary = \"000000\"\nprint(binary_to_decimal(binary)) # Output: 0\nbinary = \"1111111\"\nprint(binary_to_decimal(binary)) # Output: 15\nbinary = \"11111111\"\nprint(binary_to_decimal(binary)) # Output: 31\nbinary = \"0000000\"\nprint(binary_to_decimal(binary)) # Output: 0\nbinary =",
        "generated_testcode": "assert binary_to_decimal(1010) == 10\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    product = 1\n    product_list = []\n    for i in arr:\n        if arr.count(i) == 1:\n            product_list.append(i)\n    for i in product_list:\n        product *= i\n    return product\n\n#Example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]\nn = len(arr)\nprint(find_Product(arr, n))\n",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10] , 6) == 362888000\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # if len(test_list) < K:\n    #     return False\n    #\n    # unique_elements = set()\n    # for element in test_list:\n    #     if isinstance(element, tuple):\n    #         unique_elements.add(element)\n    #     else:\n    #         return False\n    #\n    # if len(unique_elements) == K:\n    #     return True\n    # else:\n    #     return False\n\n    # one liner\n    return len(set(test_list)) == K if all(isinstance(i, tuple) for i in test_list) else False\n\n\n# Test cases\nprint(check_k_elements([(1, 2, (3, 4), 5], 2)) # should return True\nprint(check_k_elements([(1, 2, 3, 4, 5], 2)) # should return False\nprint(check_k_elements([(1, 2, 3, 4, (5, 6)], 3)) # should return True\nprint(check_k_elements([(1, 2, 3, 4, 5, 6], 4)) # should return False\nprint(check_k_elements([(1, 2, (3, 4, 5, 6), (7, 8)], 4)) # should return True\nprint(check_k_elements([(1, 2, 3, (4, 5),",
        "generated_testcode": "assert check_k_elements([(1,2,3,4,5,6,7,8,9), 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = [] \n    for string in list: \n        new_string = ''.join([i for i in string if not i.isdigit()]) \n        new_list.append(new_string) \n    return new_list\n\n#Test the function with a sample list\nl = ['hello123', 'world12', 'python3', '4pytho9n', '9goodbye', 'world123'] \nprint(remove(l))\n#Output: ['helloworld', 'python', 'python', 'goodbye', 'world'] ",
        "generated_testcode": "assert remove([\"hello123\", \"world45\", \"python678\"]) == [\"hello\", \"world\", \"python\"]\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if k > n: \n        return 0\n    res = 1\n    for i in range(1,k+1): \n        res = res * (n-i+1) // i \n    return res ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num_map = {}\n    for i in range(arr_size):\n        if arr[i] in num_map:\n            num_map[arr[i]] += 1\n        else:\n            num_map[arr[i]] = 1\n    for key in num_map:\n        if num_map[key] % 2 != 0:\n            return key\n    return -1\n\n# Test the function with the given test cases\narr = [1, 2, 3, 2, 1, 4, 5, 3, 6, 4, 3, 6, 2, 5, 6, 1]\nprint(get_Odd_Occurrence(arr, len(arr))) # Output: 5\n\narr = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7]\nprint(get_Odd_Occurrence(arr, len(arr)) # Output: 1\narr = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\nprint(get_Odd_Occurrence(arr, len(arr)) # Output: -1 ",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,4,5,6,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(len(s)): \n            if s[i] == s[j]: \n                if i != j: \n                    count += 1\n    return count \n\ndef count_Substrings(s): \n    count = 0\n    for i in range(len(s)): \n        for j in range(len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count \n\n\ndef count_Substring_start_end(s): \n    count = 0\n    for i in range(len(s)): \n        for j in range(len(s)): \n            if s[i] == s[j] and i != j: \n                count += 1\n    return count \n\n\ndef count_Substring_same_chars(s): \n    count = 0\n    for i in range(len(s)): \n        for j in range(len(s)): \n            if s[i:j+1] == s[j:len(s)-i]: \n                count += 1\n    return count \n\n\ndef count_Substring_unique_chars(s): \n    count = 0\n    for i in range(len(s)): \n        for j in range(len(s)): \n            if i != j: \n                count += 1\n    return count \n",
        "generated_testcode": "assert check_Equality(s=\"ababcd\") == 4\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    heap = []\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num)\n\n    result = []\n    for i in range(k):\n        if heap:\n            result.append(heapq.heappop(heap)[1])\n        else:\n            break\n\n    return result\n\n#Example:\n#Input: nums = [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 10, 11, 11, 11, 13], k = 3\n#Output: [8, 11, 13]\n\n#Explanation: The most common integers in the given list are 8 and 11, which both occur 4 times, and 13 occurs 1 time.\n#Therefore, the function should return [8, 11, 13].\n",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) == [9, 8, 7]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a list to store prime factors \n    factors = [] \n    # Initialize a variable to store the current divisor \n    i = 2\n    # Iterate through the range from 2 to n \n    while i*i <= n: \n        # If n is divisible by i \n        if (n % i) == 0: \n            # Add i to the factors list \n            factors.append(i) \n            # Divide n by i \n            n //= i \n        else: \n            # Increment i \n            i += 1\n    # Check if n is a prime number and is greater than 2 \n    if n > 2: \n        factors.append(n) \n    # Return the maximum prime factor \n    return max(factors) \n\n# Taking input from the user \nnum = int(input(\"Enter a number: \")) \n# Call the function and print the result \nprint(\"Largest prime factor of\", num, \"is\", max_Prime_Factors(num)) ",
        "generated_testcode": "assert max_Prime_Factors (13191) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N //= 2\n    return binary\n\ndef decimal_to_binary(decimal_number):\n    return bin(int(decimal_number) & 0xffffffff)\n\n# Test the function\nprint(decimal_to_binary(10)) # Output: 1010\nprint(decimal_to_binary(16)) # Output: 1000000\nprint(decimal_to_binary(255)) # Output: 111101\nprint(decimal_to_binary(56)) # Output: 1100010000\nprint(decimal_to_binary(1024)) # Output: 10000000000000\nprint(decimal_to_binary(2333)) # Output: 11110101111\nprint(decimal_to_binary(56789)) # Output: 101000010111110010111110111\nprint(decimal_to_binary(12345)) # Output: 101011010001011001110111\n",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total = sum(range(1,N+1))\n    actual_sum = sum(ar)\n    return total - actual_sum\n\n#Example: \n# Input: [1,2,3,4,5,6,7,9] \n# Output: 8 \n# Explanation: The missing number is 8. ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 50) == 5",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    i = 1\n    j = 1\n    num = 0\n    while count < n:\n        num += i * j\n        i += 1\n        j += 1\n        count += 1\n    return num\n\n# test the function\nprint(find_rect_num(5)) # should print 6\nprint(find_rect_num(10)) # should print 20\nprint(find_rect_num(15)) # should print 225\n\n# you can test the function with more inputs here\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def gcd(a, b): \n        if b == 0: \n            return a \n        return gcd(b, a % b) \n\n    def find_digit_count(num): \n        count = 0\n        while num != 0: \n            count += 1\n            num //= 10\n        return count \n    \n    def find_nth_digit(num, n): \n        count = find_digit_count(num) \n        num //= 10**(count - n) \n        return num % 10\n    \n    gcd_value = gcd(p, q) \n    LCM = (p * q) // gcd_value \n    nth_digit = (N - 1) // LCM \n    num1 = p // gcd_value \n    num2 = q // gcd_value \n    if nth_digit >= find_digit_count(num1): \n        num1 //= 10**(find_digit_count(num1) - nth_digit) \n        nth_digit = (N - 1) % LCM + 1\n    elif nth_digit >= find_digit_count(num2): \n        num2 //= 10**(find_digit_count(num2) - nth_digit) \n        nth_digit = (N - 1) % LCM + 1\n    else: \n        nth_digit =",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    int_list = []\n    str_list = []\n    \n    for i in mixed_list:\n        if type(i) == int:\n            int_list.append(i)\n        else:\n            str_list.append(i)\n    \n    int_list.sort()\n    str_list.sort()\n    return int_list + str_list\n\n\n# Test the function\nprint(sort_mixed_list([3, 1, 'apple', 'banana', 2, 'orange', 'cherry', 4, 'dog', 'cat']))\n# Output: [1, 2, 3, 4, 'apple', 'banana', 'cat', 'cherry', 'dog']\n\n\n# Test the function\nprint(sort_mixed_list([5, 3, 'cat', 1, 8, 2, 'dog', 4, 'apple']))\n# Output: [1, 2, 3, 4, 5, 'apple', 'cat', 'dog', 8] ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, 3, \"banana\", 2, 4, \"orange\", 5, \"grape\", 1, 3, 2, \"kiwi\", 4, 5, 6, 7, \"kiwi\", 8, 9, 10, 11, \"apple\", 12, \"orange\"] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\"]\n\n# Test the function with the given input and check if it returns the expected output. ",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_num = []\n    odd_num = []\n    for num in list1:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return even_num, odd_num\n\n# Test the function with the sample input\nprint(div_even_odd([2, 5, 12, 8, 13, 4, 6, 7, 9]))\n\n# Output: ([2, 8, 4], [5, 13, 7, 9])\n\n\n# Test the function with the sample input\nprint(div_even_odd([1, 3, 5, 6, 8, 10, 11, 9, 7, 4])\n\n# Output: ([4, 8, 6, 10], [1, 3, 5, 11, 7])\n\n# The function should return a tuple containing two lists, one with all the even numbers and another with all the odd numbers in the input list. If there are no even or odd numbers in the input list, return an empty list.\n\n# Test the function with the sample input\nprint(div_even_odd([1, 3, 5, 7]))\n\n# Output: ([], [1, 3, 5, 7])\n\n# Test the function with the sample input\nprint(div_even_odd([2, 4])\n\n#",
        "generated_testcode": "assert div_even_odd(list(range(1, 10)) == (3, 1)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(S) <= 1:\n        return True\n    freq = {}\n    for char in S:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n    groups = []\n    current_group = []\n    for char, count in sorted_freq:\n        if count > 0:\n            current_group.append(char)\n            count -= 1\n            for i in range(len(groups)):\n                if len(groups[i]) + 1 == count:\n                    current_group = groups[i] + [char]\n                    groups.pop(i)\n                    break\n                elif len(groups[i]) >= count:\n                    current_group = groups.pop(i) + [char]\n                    break\n            else:\n                current_group = [char]\n            freq[char] = 0\n    for group in groups:\n        if len(group) > 1:\n            return False\n    return True\n\n\n# Test cases\nprint(rearange_string(\"aab\")) # True\nprint(rearange_string(\"aabb\")) # False\nprint(rearange_string(\"abbc\")) # True\nprint(rearange_string(\"abbcde\")) # False\nprint(rearange_string(\"abbccd\")) # True\nprint(rearange",
        "generated_testcode": "assert rearange_string(S=\"aab\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    flat_list = [item for sublist in nums for item in sublist]\n    count = Counter(flat_list)\n    return count\n\n#Example:\nnums = [[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9,10]\nprint(freq_element(nums)) # Output: Counter({1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7, 8: 6, 9: 1, 10: 1}\n",
        "generated_testcode": "assert freq_element([[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]] ) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 1",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_evennumbers(nums)) # Output: [2, 4, 6, 8, 10]\n\n\n# Write a function to filter odd numbers using lambda function\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums)) # Output: [1, 3, 5, 7, 9]\n\n\n# Write a function to filter numbers greater than 5 using lambda function\ndef filter_greater_than_five(nums):\n    return list(filter(lambda x: x > 5, nums))\n\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_greater_than_five(nums)) # Output: [6, 7, 8, 9, 10]\n\n\n# Write",
        "generated_testcode": "assert filter_evennumbers(range(1, 10)) == [2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store the count of each element in the array \n    freq = {} \n    # traverse through the array \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n\n    # traverse through the dictionary and find the sum of repeated elements \n    sum = 0\n    for key, value in freq.items(): \n        if value > 1: \n            sum += key * (value - 1) \n    return sum ",
        "generated_testcode": "assert find_Sum([1,2,3,4,2,5,6,1,3,7,2],7) == 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    result = re.findall(r\"[a-z]+\", text)\n    return result\n\n# Test the function with the example text\ntext = \"This is an example_text_with_underscore_and_lowercase_letters\"\nprint(text_match(text)) # Output: ['example', 'underscore', 'lowercase', 'letters'] ",
        "generated_testcode": "assert text_match(\n    \"hello_world_python_programming_is_fun\"\n) == [\n    \"hello\",\n    \"world\",\n    \"python\",\n    \"programming\",\n    \"is\",\n    \"fun\"\n]\n\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(r'^word')\n    return bool(pattern.match(text))\n\n# Test cases\nprint(text_match_string(\"wordhello\")) # True\nprint(text_match_string(\"world\")) # True\nprint(text_match_string(\"testword\")) # True\nprint(text_match_string(\"word\")) # True\nprint(text_match_string(\"no word here\")) # False\nprint(text_match_string(\"wordy\")) # True\nprint(text_match_string(\"1word2\")) # True\nprint(text_match_string(\"word2\")) # True\nprint(text_match_string(\"1word\")) # True\nprint(text_match_string(\"wor\")) # False\nprint(text_match_string(\"wor d\")) # False\nprint(text_match_string(\"\")) # False\nprint(text_match_string(\"1\")) # False\nprint(text_match_string(\"wo\")) # False\nprint(text_match_string(\"hello world\")) # False\n",
        "generated_testcode": "assert text_match_string(text=\"hello world\") == \"hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0: \n        return x \n    return find_gcd(y, x % y) \n\n\ndef find_gcd_of_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n\n\narr = [24, 8, 32, 16, 10, 18] \nprint(\"The GCD of the given array is:\", find_gcd_of_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(data)):\n        for j in range(i+1,len(data)):\n            if data[i] == data[j]:\n                return False\n    return True\n\n# test the function\nprint(test_distinct([1,2,3,4,5,6,7])) # True\nprint(test_distinct([1,1,2,3,4,5,6,7])) # False\nprint(test_distinct([1,2,2,3,4,5,6,7])) # False\nprint(test_distinct([1,2,3,4,5,5,6,7])) # False\nprint(test_distinct([1,2,3,4,5,6,7,7])) # False\nprint(test_distinct([1,2,3,4,5,6,7,8])) # True\n\n",
        "generated_testcode": "assert test_distinct(range(1, 10)) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if A<=0 or B<=0:\n        return None\n    elif A==B:\n        return B\n    else:\n        factorial_a=1\n        for i in range(1,A+1):\n            factorial_a*=i\n        factorial_b=1\n        for j in range(1,B+1):\n            factorial_b*=j\n        return factorial_b%10\n    \n#test the function\nprint(compute_Last_Digit(5,100))\nprint(compute_Last_Digit(15,20))\nprint(compute_Last_Digit(3,5))\nprint(compute_Last_Digit(7,7))\nprint(compute_Last_Digit(2,5))\nprint(compute_Last_Digit(0,100))\nprint(compute_Last_Digit(10,20))",
        "generated_testcode": "assert compute_Last_Digit(5,10) == 5\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a binary representation of the number\n    binary_num = bin(n)[2:]\n    # Loop through the binary representation of the number and set odd bits to 1\n    for i in range(len(binary_num)):\n        if binary_num[i] == '0':\n            binary_num = binary_num[:i] + '1' + binary_num[i+1:]\n    # Convert the binary number back to decimal and return the result\n    return int(binary_num, 2)\n\n\n# Test the function\nprint(odd_bit_set_number(5)) # Output: 7\nprint(odd_bit_set_number(10)) # Output: 11\nprint(odd_bit_set_number(15)) # Output: 17\nprint(odd_bit_set_number(27)) # Output: 31",
        "generated_testcode": "assert odd_bit_set_number(10) == 11\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for row in nums:\n        result.append(row[N-1])\n    return result\n\n# Test the function with a sample input\nnums = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]\nN = 3\nprint(specified_element(nums, N))  # Output: [3, 7, 11, 15]\n\n# Test the function with another sample input\nnums = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]\nN = 2\nprint(specified_element(nums, N))  # Output: [2, 6, 10]\n",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    min_len = lambda lst: len(min(lst, key=len)\n    return min_len(input_list)\n\n\n# Example usage:\ninput_list = [[1, 2, 3, 4], [5, 6], [7, 8, 9, 10, 11], [1, 2], [3, 4, 5, 6, 7, 8, 9, 10]]\nprint(min_length_list(input_list)) # Output: [1, 2]\n\ninput_list = [['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\nprint(min_length_list(input_list)) # Output: ['banana']\ninput_list = ['hello', 'world', 'python', 'programming', 'is', 'fun']\nprint(min_length_list(input_list)) # Output: ['is']\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_length_list(input_list)) # Output: [1, 2] ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\", \"strawberry\"] == \"cherry\")\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x == y and y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n\n# Test cases\nprint(check_equilateral(3,3,3)) # Output: Equilateral\nprint(check_equilateral(5,4,6)) # Output: Not Equilateral\nprint(check_equilateral(6,6,6)) # Output: Equilateral\nprint(check_equilateral(8,8,8)) # Output: Equilateral\nprint(check_equilateral(12,12,12)) # Output: Equilateral\nprint(check_equilateral(10,8,6)) # Output: Not Equilateral\nprint(check_equilateral(10,10,12)) # Output: Not Equilateral\n",
        "generated_testcode": "assert check_equilateral(3,3,3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return b*h\n\n#Test the function\nprint(parallelogram_area(10,5)) # Output: 50\nprint(parallelogram_area(6,8)) # Output: 48\nprint(parallelogram_area(2,12)) # Output: 24\n\n\n# Write a function to calculate area of a rectangle\ndef rectangle_area(l,b):\n    return l*b\n\n# Test the function\nprint(rectangle_area(10,5)) # Output: 50\nprint(rectangle_area(6,8)) # Output: 48\nprint(rectangle_area(2,12)) # Output: 24\n\n\n# Write a function to calculate area of a triangle\ndef triangle_area(b,h):\n    return 0.5*b*h\n\n# Test the function\nprint(triangle_area(10,5)) # Output: 25.0\nprint(triangle_area(6,8)) # Output: 24.0\nprint(triangle_area(2,12)) # Output: 6.0\n\n\n# Write a function to calculate area of a circle\nimport math\ndef circle_area(r):\n    return math.pi*(r**2)\n\n# Test the function\nprint(circle_area(5)) # Output: 78.5398163339744483\nprint(circle_area(8)) # Output: 20",
        "generated_testcode": "assert parallelogram_area(4, 6) == 24\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(check_Equality(\"hello\")) # True\nprint(check_Equality(\"python\")) # False\nprint(check_Equality(\"racecar\")) # True\nprint(check_Equality(\"aaa\")) # True\nprint(check_Equality(\"abba\")) # True\nprint(check_Equality(\"abcd\")) # False\n",
        "generated_testcode": "assert check_Equality(str) == True # Test case 1\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_numbers = max_val - min_val + 1\n    count_list = [0] * range_of_numbers\n\n    output_list = [0] * len(my_list)\n\n    for i in my_list:\n        count_list[i - min_val] += 1\n\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i-1]\n\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output_list[count_list[my_list[i] - min_val] - 1] = my_list[i]\n        count_list[my_list[i] - min_val] -= 1\n\n\n    return output_list\n\n\n# Test the function with the given input\nmy_list = [3, 1, 4, 1, 1, 2, 5, 9, 2, 6, 5, 3, 8, 9, 4, 7, 8, 6, 10]\nprint(\"Original List:\", my_list)\nsorted_list = counting_sort(my_list)\nprint(\"Sorted List:\", sorted_list)\n",
        "generated_testcode": "assert counting_sort([4, 2, 5, 1, 3, 1, 2, 6, 7, 8, 9, 0, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return a*(r**(n-1)\n\n# take input from user\na = float(input(\"Enter first term: \"))\nr = float(input(\"Enter common ratio: \")\nn = int(input(\"Enter nth term: \")\n\n# calculate t-n term\nt_n = tn_gp(a,n,r)\nprint(\"t-\",n,\"term is: \",t_n)\n\n# check for invalid input\nif r==1:\n    print(\"This is not a geometric series, it is arithmetic series\")\nelif r==0:\n    print(\"The series will never converge\")\nelif r==-1:\n    print(\"The series will never converge\")\nelse:\n    pass\n\n# check for invalid input\nif n<=0:\n    print(\"Invalid input\")\nelse:\n    pass\n\n# calculate t-n term\nt_n = tn_gp(a,n,r)\nprint(\"t-\",n,\"term is: \",t_n)",
        "generated_testcode": "assert tn_gp(2,3,3) == 8\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return num == 2 * int(str(num)[::-1]) - 1\n\ndef is_one_less_than_twice_reverse(num):\n    return rev(num)\n\n# Test cases\nprint(is_one_less_than_twice_reverse(12)) # True\nprint(is_one_less_than_twice_reverse(10021)) # True\nprint(is_one_less_than_twice_reverse(21)) # True\nprint(is_one_less_than_twice_reverse(10000)) # False\nprint(is_one_less_than_twice_reverse(0)) # False\nprint(is_one_less_than_twice_reverse(55)) # False\nprint(is_one_less_than_twice_reverse(99)) # False\nprint(is_one_less_than_twice_reverse(101)) # False\nprint(is_one_less_than_twice_reverse(231)) # False\nprint(is_one_less_than_twice_reverse(12321)) # False\n\n\n# Another test case\nprint(is_one_less_than_twice_reverse(1020)) # True\nprint(is_one_less_than_twice_reverse(12345)) # True\nprint(is_one_less_than_twice_reverse(987654)) # False\n",
        "generated_testcode": "assert rev(12345) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_Max_Num_helper(arr,n,i,max_num):\n        if i == n :\n            return max_num\n        return find_Max_Num_helper(arr,n,i+1,max(max_num,int(''.join(str(arr[i:n)),10))*(max_num-int(''.join(str(arr[:i],10))+1) if max_num!=0 else 1))\n    \n    return find_Max_Num_helper(arr,0,0)\n\n# Example usage:\narr = [1, 3, 4, 7, 8, 9]\nn = len(arr)\nprint(find_Max_Num(arr,n)) ",
        "generated_testcode": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9] , 3) == 967\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    else: \n        return False\n\n# test the function \nprint(opposite_Signs(5, -5)) #True \nprint(opposite_Signs(5, 8)) #False \nprint(opposite_Signs(-5, -8)) #True ",
        "generated_testcode": "assert opposite_Signs(3, -5) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # we can use the formula to find if a number is octagonal: n^2 = m*(3m-1)/2, where m is an integer\n    # we can find m using the quadratic equation formula: m = (-1 + sqrt(1 + 24n^2))/2\n    # if m is an integer, then n is octagonal\n    m = (-1 + int((1 + 24*n**2)**0.5))/2\n    if m == int(m):\n        return True\n    else:\n        return False\n\ndef nth_octagonal(n):\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_octagonal(i):\n            count += 1\n    return i\n\n# test the function\nprint(nth_octagonal(1000)) # should print 10004",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 1:\n        return n\n    dp = [1] * n\n    max_len = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] > 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_len = max(max_len, dp[i])\n    return max_len\n\n\n# Test the function\narr = [1, 5, 3, 7, 9, 1, 5, 2, 6, 2, 8, 4]\nn = len(arr)\nprint(\"Maximum length of subsequence with difference of 1:\", max_len_sub(arr, n))\n\n# Output: 6\n# Explanation: The maximum length of subsequence with difference of 1 is 6.\n# The subsequence is: [1, 5, 3, 7, 9, 6, 2, 8, 4]\n# Here, the difference between adjacent elements is 1 for 5 and 7, 7 and 9, 9 and 6, and 6 and 8. \n",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 8, 4, 6, 10, 12, 15] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(n):\n            total = 0\n            for k in range(i,j+1):\n                total += int(s[k])\n            if total == j-i+1:\n                count += 1\n    return count\n\n# Example usage:\ns = \"99142\"\nn = len(s)\nprint(count_Substrings(s, n)) # Output: 5 ",
        "generated_testcode": "assert count_Substrings(123,3) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n\n# Test the function with the given list\nmy_list = [3, 5, 8, 1, 2, 6, 4, 7]\nprint(smallest_num(my_list))\n\n# Output: 1\n\n\n# Write a python function to find the sum of numbers in a list\ndef sum_list(xs):\n    total = 0\n    for i in xs:\n        total += i\n    return total\n\n# Test the function with the given list\nmy_list = [3, 5, 8, 1, 2, 6, 4, 7]\nprint(sum_list(my_list))\n\n# Output: 18\n\n\n# Write a python function to find the maximum number in a list\ndef max_num(xs):\n    largest = xs[0]\n    for i in xs:\n        if i > largest:\n            largest = i\n    return largest\n\n# Test the function with the given list\nmy_list = [3, 5, 8, 1, 2, 6, 4, 7]\nprint(max_num(my_list))\n\n# Output: 8\n\n\n# Write a python function to find the product of numbers in a list\ndef product(xs):\n    result = 1\n    for i in xs:\n        result *= i\n    return",
        "generated_testcode": "assert smallest_num([]), None\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_diff = 0\n    min_val = min(test_list)\n    for i in test_list:\n        if i > min_val:\n            max_diff = max(max_diff, i - min_val)\n        else:\n            min_val = i\n    return max_diff\n\n# Test cases\nprint(max_difference((1, 5, 3, 19, 8, 7, 4, 2, 10, 13))) # Output: 16\nprint(max_difference((4, 2, 9, 10, 1, 12, 8, 3, 14)) # Output: 12\nprint(max_difference((5, 3, 1, 2, 6, 9, 4, 8, 7, 10)) # Output: 7\nprint(max_difference((10, 1, 9, 8, 7, 6, 5, 4, 3)) # Output: 4\n",
        "generated_testcode": "assert max_difference(()) == 0\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n\n# Test the function with a sample list of tuples\nsample_list = [(90, 'Maths'), (80, 'Physics'), (70, 'Chemistry'), (95, 'Biology'), (75, 'Computer Science'), (85, 'English'), (60, 'History'), (88, 'Geography'), (92, 'Physical Education')]\nprint(subject_marks(sample_list))\n\n# Output: [(90, 'Maths'), (95, 'Biology'), (92, 'Physical Education'), (88, 'Geography'), (85, 'English'), (80, 'Physics'), (75, 'Computer Science'), (70, 'History')] ",
        "generated_testcode": "assert subject_marks([(1, 80), (2, 90), (3, 70), (4, 95), (5, 85)] ) == [(1, 80), (2, 90), (4, 95), (3, 70)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # recursive case\n\n\n\n# Test the function\nprint(recursive_list_sum([1, 2, 3, 4, 5]))  # Output: 15\nprint(recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 45\n",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 45\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n# Testing the function\nprint(pos_count([1, 2, 3, -4, 5, 6, -7, 8, -9, 10])) # Output: 4\nprint(pos_count([-1, -2, -3, -4, -5, -6])) # Output: 0\nprint(pos_count([0, 0, 0, 0])) # Output: 0\nprint(pos_count([1, 2, 3, 4, 5])) # Output: 4\n\n\n# Another way to count positive numbers in a list using list comprehension\ndef pos_count(list):\n    return len([i for i in list if i > 0])\n\n# Testing the function\nprint(pos_count([1, 2, 3, -4, 5, 6, -7, 8, -9, 10])) # Output: 4\nprint(pos_count([-1, -2, -3, -4, -5, -6])) # Output: 0\nprint(pos_count([0, 0, 0, 0])) # Output: 0\nprint(pos_count([1, 2, 3, 4, 5])) # Output: 4\n\n\n# Another way to count positive numbers in a list using filter() function\ndef pos_count(",
        "generated_testcode": "assert pos_count([1,2,3,-4,5,6,-7,8,-9,10] ) == 4\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n\n\ndef partition_count(n):\n    return bell_number(n)\n\nprint(partition_count(5)) # 15 ",
        "generated_testcode": "assert bell_number(5) == 10\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(A) <= 1:\n        return True\n    # Check for increasing order\n    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9] # True\nprint(is_Monotonic(A))\n\nA = [6, 5, 4, 3, 2, 1, 1] # False\nprint(is_Monotonic(A))\nA = [1, 1, 1, 2, 2, 3, 3, 4] # False\nprint(is_Monotonic(A))\nA = [1, 2, 3, 4, 5, 4, 3, 2, 1] # False\nprint(is_Monotonic(A))\nA = [1, 2, 3, 4, 5] # True\nprint(is_Monotonic(A))\nA = [5, 4, 3, 2, 1] # True\nprint(is_Monotonic(A))\nA = [1, 2, 4, 2, 3, ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8,9] == True)\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\nprint(is_sublist([1,2,3,4,5,6,7], [1,2])) # True\nprint(is_sublist([1,2,3,4,5,6,7], [2,3])) # True\nprint(is_sublist([1,2,3,4,5,6,7], [1,3,4,5])) # True\nprint(is_sublist([1,2,3,4,5,6,7], [4,5,6])) # True\nprint(is_sublist([1,2,3,4,5,6,7], [8,9])) # False\nprint(is_sublist([1,2,3,4,5,6,7], [3,4,5,6,7,8])) # False\n\n\n#Alternative Solution:\ndef is_sublist(l, s):\n    return any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\nprint(is_sublist([1,2,3,4,5,6,7], [1,2])) # True\nprint(is_sublist([1,2,3,4,5,6,7], [2,3])) # True\n",
        "generated_testcode": "assert is_sublist([\"hello\", \"world\", \"python\", \"programming\"], [\"world\", \"python\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = True\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            result = False\n            break\n    return result\n\n#Test the function\nInput = [(1,2,3,4), (5,6,7,8), (9,10,11)]\nk = 3\nprint(find_equal_tuple(Input, k))\n\nInput = [(1,2,3,4), (5,6,7,8,9), (10,11,12)]\nk = 3\nprint(find_equal_tuple(Input, k))\n\nInput = [(1,2,3), (5,6,7,8,9), (10,11,12)]\nk = 3\nprint(find_equal_tuple(Input, k))\n",
        "generated_testcode": "assert find_equal_tuple((), 0) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        sorted = True\n        for i in range(1, n-1):\n            if nums[i] > nums[i+1]:\n                sorted = False\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        gap = int(n/shrink)\n        while gap > 0:\n            for i in range(0, n-gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    sorted = False\n            gap = int(gap/shrink)\n            if gap < 1:\n                break\n    return nums\n\n\n# Test the function\nnums = [9, 5, 1, 4, 8, 2, 7, 3, 6, 5, 4, 7, 10, 9, 11, 2, 3]\nprint(\"Original list:\", nums)\nprint(\"Sorted list:\", comb_sort(nums))\n\n\n# Output: Original list: [9, 5, 1, 4, 8, 2, 7, 3, 6, 5, 4, 7, 10, 9",
        "generated_testcode": "assert comb_sort([3, 1, 4, 2, 1, 0, 5, 6, 7, 2, 8, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n    return False\n\n# Test the function with different values \nprint(dif_Square(5)) # True\nprint(dif_Square(10)) # True\nprint(dif_Square(15)) # True\nprint(dif_Square(12)) # False\nprint(dif_Square(45)) # False\nprint(dif_Square(16)) # False\nprint(dif_Square(100)) # True\n\n\n# We can also use math.isqrt to find the square root of the number\nimport math\ndef dif_Square_2(n):\n    root_n = int(math.isqrt(n))\n    for i in range(root_n+1):\n        for j in range(root_n+1):\n            if i*i + j*j == n:\n                return True\n    return False\n\n# Test the function with different values \nprint(dif_Square_2(5)) # True\nprint(dif_Square_2(10)) # True\nprint(dif_Square_2(15)) # True\nprint(dif_Square_2(12)) # False\nprint(dif_Square_2(45)) # False\n",
        "generated_testcode": "assert dif_Square(1) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    import re\n\n    delimiters = [' ', ', ',', '\\n']\n    pattern = \"|\".join(map(re.escape, delimiters)\n    words = re.split(pattern, text)\n    return words\n\n# Test the function with an example\nprint(multiple_split(\"Hello, world\\nPython, is\\nawesome\"))\n# Output: ['Hello', 'world', 'Python', 'is', 'awesome'] ",
        "generated_testcode": "assert multiple_split(\n    \"This is a test string with multiple delimiters: ;,!? and spaces. And some more text here.\",\n    [\";\", \",\", \"!\", \"?\"]) == [\n        \"This is a test string with multiple delimiters\", \"and spaces\", \"And some more text here.\"]\n\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if len(colors[i]) != len(patterns[i]):\n            return False\n        for j in range(len(colors[i])):\n            if colors[i][j] not in patterns[i]:\n                return False\n    return True\n\n# Test cases\ncolors = [[\"RED\", \"GREEN\", \"BLUE\", \"YELLOW\", \"ORANGE\"], [\"RED\", \"GREEN\", \"BLUE\", \"ORANGE\"], [\"RED\", \"YELLOW\", \"BLUE\", \"GREEN\"]]\npatterns = [[\"RGB\", \"RBG\", \"GRB\"], [\"RGB\", \"RBG\", \"GRB\"], [\"RGB\", \"GBR\", \"GRB\"]]\nprint(is_samepatterns(colors, patterns)) # Output: True\n\ncolors = [\"RED\", \"GREEN\", \"BLUE\", \"YELLOW\", \"ORANGE\"]\npatterns = [\"RGB\", \"RBG\", \"GRB\"]\nprint(is_samepatterns(colors, patterns)) # Output: False\n\ncolors = [\"RED\", \"GREEN\", \"BLUE\", \"YELLOW\", \"ORANGE\", \"BLACK\"]\npatterns = [\"RGB\", \"RBG\", \"GRB\", \"BRG\"]\nprint(is_samepatterns(colors, patterns)) # Output: False\n\ncolors = [\"RED\", \"GREEN\", \"BL",
        "generated_testcode": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"purple\"], [\"red\", \"blue\", \"green\", \"yellow\", \"purple\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def check_divisible(tup):\n        for i in tup:\n            if i % K != 0:\n                return False\n        return True\n\n    result = []\n    for tup in test_list:\n        if check_divisible(tup):\n            result.append(tup)\n    return result\n\n\n# Test cases\nprint(find_tuples([(12, 6, 15, 18), (24, 8, 27), (25, 45, 40), (10, 12, 15)], 3))\nprint(find_tuples([(12, 6, 15, 18), (24, 8, 27), (25, 45, 40), (10, 12, 15)], 5))\nprint(find_tuples([(12, 6, 15, 18), (24, 8, 27), (25, 45, 40), (10, 12, 15)], 10))\n\n# Output:\n# [(12, 6, 15, 18)]\n# []\n# [(12, 6, 15, 18), (24, 8, 27), (10, 12, 15)]\n",
        "generated_testcode": "assert find_tuples([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14, 15, 16)], 3) == [(1, 2, 3, 4), (8, 9, 10), (11, 12, 13), (14, 15, 16)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (m+n-1) * (m+n)\n\n# Test the function\nprint(count_Squares(5,5)) # Output: 16\nprint(count_Squares(4,6)) # Output: 20\nprint(count_Squares(7,8)) # Output: 40\n\n\n#Alternative way to solve the problem using math library\nimport math\ndef count_Squares(m,n):\n    return math.ceil(m/2) * math.ceil(n/2)\n# Test the function\nprint(count_Squares(5,5)) # Output: 6\nprint(count_Squares(4,6)) # Output: 6\nprint(count_Squares(7,8)) # Output: 9\n\n",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return abs(even_sum - odd_sum)\n\n\nprint(is_Diff(123456)) # Output: 4\nprint(is_Diff(987654321)) # Output: 20\nprint(is_Diff(12345)) # Output: 0\nprint(is_Diff(98765)) # Output: 0\nprint(is_Diff(789)) # Output: 24\nprint(is_Diff(12345)) # Output: 0\n\n\n# Explanation:\n# In the first example, the even digits are 2 and 6 and their sum is 8. \n# The odd digits are 1, 3, 5 and their sum is 9. The difference between the even and odd digits is 8-9= -1.\n# In the second example, the even digits are 8 and 6 and their sum is 14. \n# The odd digits are 7 and their sum is 3. The difference between the even and odd digits is 14-3=11.\n# In the third example, there are no even digits and the odd digits are 9, 7, 5 and their sum is 17",
        "generated_testcode": "assert is_Diff(12345) == 8\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        binary = bin(i)\n        set_bits = binary.count('1')\n        if set_bits % 2 == 1:\n            count += 1\n    return count\n\n\n# Test the function with some inputs\nprint(count_With_Odd_SetBits(10)) # Output: 7\nprint(count_With_Odd_SetBits(50)) # Output: 23\nprint(count_With_Odd_SetBits(1000)) # Output: 27\nprint(count_With_Odd_SetBits(10000)) # Output: 333\n\n",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 1\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n#Test the function with some inputs\nprint(word_len(\"hello\")) # Output: Odd\nprint(word_len(\"world\")) # Output: Odd\nprint(word_len(\"python\")) # Output: Odd\nprint(word_len(\"programming\")) # Output: Odd\nprint(word_len(\"example\")) # Output: Even\nprint(word_len(\"test\")) # Output: Odd\n\n",
        "generated_testcode": "assert word_len(123) == False\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (n * (n + 1) // 2) * (n + 1) // 2\n\n# Example usage:\nprint(tetrahedral_number(1)) # Output: 1\nprint(tetrahedral_number(2)) # Output: 4\nprint(tetrahedral_number(3)) # Output: 10\nprint(tetrahedral_number(4)) # Output: 20\nprint(tetrahedral_number(5)) # Output: 35\n\n\n# You can also use this function to find the nth number in the sequence of tetrahedral numbers. ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tup = tuple(zip(test_tup1, test_tup2))\n    return new_tup\n\n# Test the function with some sample inputs\nprint(zip_tuples((1, 2, 3, 4), (5, 6, 7))) # Output: ((1, 5), (2, 6), (3, 7))\nprint(zip_tuples(('a', 'b', 'c'), (True, False, None)) # Output: (('a', True), ('b', False), ('c', None))\nprint(zip_tuples(('x', 'y', 'z'), (10, 20, 30)) # Output: (('x', 10), ('y', 20), ('z', 30))\nprint(zip_tuples(('a', 'b', 'c', 'd'), (1, 2, 3, 4)) # Output: ('a', 1), ('b', 2), ('c', 3), ('d', 4)\n\n# Note: If the length of the tuples is not equal, the function should return a tuple of tuples, where the length of each tuple is the length of the shorter tuple.\n",
        "generated_testcode": "assert zip_tuples(('hello', (1, 2, 3), (4, 5, 6)) == (('h', 1, 4), ('e', 2, 5), ('l', 3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # input radius of the sphere\n    pi = 3.14159\n    # calculate the volume of the sphere using formula 4/3 * pi * r^3\n    v = (4/3) * pi * r**3\n    return v\n\n# test the function\nprint(volume_sphere(5)) # expected output 523.598\nprint(volume_sphere(10)) # expected output 942.478\nprint(volume_sphere(2.5)) # expected output 113.097",
        "generated_testcode": "assert volume_sphere(5) == 523.598, \"Incorrect volume calculation for radius 5\"\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in strr:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for key, value in char_dict.items():\n        if value%2 == 1:\n            return key\n    return None\n\n#test the function with the given test cases\nprint(get_Char(\"hello\")) # should return 'l'\nprint(get_Char(\"racecar\")) # should return 'e'\nprint(get_Char(\"Python\")) # should return 'n'\nprint(get_Char(\"test\")) # should return None\nprint(get_Char(\"mississippi\")) # should return 'i'\nprint(get_Char(\"test\")) # should return None\n\n#test the function with the given test cases\ndef get_Char(strr):  \n    char_dict = {}\n    for char in strr:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for key, value in char_dict.items():\n        if value%2 == 1:\n            return key\n    return None\n\n#test the function with the given test cases\nprint(get_Char(\"hello\")) # should return 'l'\nprint(get_Char(\"racecar\")) # should return 'e'\nprint(get_Char(\"Python\")) # should return 'n'\nprint(get_Char(\"test\")) # should",
        "generated_testcode": "assert get_Char(strr=\"hello\") == \"h\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        sequence = [0, 1, 1]\n        for i in range(3, n+1): \n            sequence.append(sequence[sequence[sequence[i-1]]+sequence[i-2])]\n        return sequence[n]\n\nn = int(input(\"Enter the nth number in the Newman Conway sequence: \"))\nprint(\"The nth number in the Newman Conway sequence is:\", sequence(n))",
        "generated_testcode": "assert sequence(1) == [1]\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    return (4 * pi * r ** 2)\n\n#Test the function with a sample value of radius 5\nprint(surfacearea_sphere(5)) ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1598957458617000079\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pass\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    A centered hexagonal number is a number that is the sum of the first n integers and the first n-1 integers in reverse order.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return n * (2 * n - 1)\n\n\n# Test cases\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(2))  # Output: 3\nprint(centered_hexagonal_number(3))  # Output: 6\nprint(centered_hexagonal_number(4))  # Output: 10\nprint(centered_hexagonal_number(5))  # Output: 15\nprint(centered_hexagonal_number(6))  # Output: 21\nprint(centered_hexagonal_number(7))  # Output: 28\nprint(centered_hexagonal_number(8))  # Output: 37\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in dict1.keys():\n        result[key] = dict1[key]\n    for key in dict2.keys():\n        result[key] = dict2[key]\n    for key in dict3.keys():\n        result[key] = dict3[key]\n    return result\n\n# Test cases\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"d\": 4, \"e\": 5, \"f\": 6}\ndict3 = {\"g\": 7, \"h\": 8, \"i\": 9}\n\nprint(merge_dictionaries_three(dict1, dict2, dict3))\n# Expected output: {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9}\n\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"b\": 4, \"d\": 5, \"e\": 6}\ndict3 = {\"a\": 7, \"e\": 8, \"f\": 9}\nprint(merge_dictionaries_three(dict1, dict2, dict3))\n# Expected output: {\"a\": 7, \"b\": 4, \"c\": 3, \"d\": 5, \"e\": 8, \"f\":",
        "generated_testcode": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n\n# Test the function\nprint(freq_count([1, 2, 3, 2, 3, 4, 1, 5, 5, 6, 7, 1, 8, 9])) # Expected output: {1: 2, 2: 2, 3: 2, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nprint(freq_count([1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6])) # Expected output: {1: 1, 2: 2, 3: 3, 4: 1, 5: 2, 6: 3}\nprint(freq_count(['a', 'b', 'c', 'd', 'd', 'd', 'e', 'f', 'f', 'f', 'f'])) # Expected output: {'a': 1, 'b': 1, 'c': 1, 'd': 3, 'e': 1, 'f': 3}\n",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"] == {'apple': 3, 'banana': 3, 'orange': 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if N == 1:\n        return None\n    else:\n        closest = N - 1\n        while closest > 0:\n            if N % closest == 0:\n                return closest\n            else:\n                closest -= 1\n        return closest\n\n# Test cases\nprint(closest_num(12)) # Output: 11\nprint(closest_num(15)) # Output: 14\nprint(closest_num(22)) # Output: 21\nprint(closest_num(21)) # Output: 20\nprint(closest_num(23)) # Output: 22\nprint(closest_num(50)) # Output: 49\nprint(closest_num(30)) # Output: 29\n",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n#Test the function\nmy_list = ['apple', 'banana', 'cherry', 'grape', 'orange', 'kiwi', 'mango']\nprint(len_log(my_list)) ",
        "generated_testcode": "assert len_log([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"] == 6\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n\n\n# Test the function\nstrings = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"grapefruit\"]\nsub_str = \"juice\"\nprint(find_substring(strings, sub_str))\n",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"python\", \"programming\"], \"pro\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    num_list = list(str(n))\n    #print(num_list)\n    count = 0\n    for i in range(1, len(num_list)):\n        if num_list[i] < num_list[i-1]:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(is_undulating(12345)) # True\nprint(is_undulating(12453)) # False\nprint(is_undulating(24567)) # False\nprint(is_undulating(123345)) # True\nprint(is_undulating(123145)) # False\nprint(is_undulating(123321)) # False\nprint(is_undulating(123231)) # True\nprint(is_undulating(121323)) # False\nprint(is_undulating(121232)) # True\nprint(is_undulating(121212)) # False\n\nprint(is_undulating(123445)) # False\nprint(is_undulating(1233445)) # True",
        "generated_testcode": "assert is_undulating(123456789) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n\nprint(power(2,3)) # Output: 8\nprint(power(5,5)) # Output: 3125\nprint(power(10,0)) # Output: 1\nprint(power(0,0)) # Output: 1\nprint(power(0,2)) # Output: 0",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    index = 0\n    min_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value[1]:\n            index = i\n            min_value = test_list[i]\n    return index\n\n\n#Test the function\ntest_list = [(1, 2), (3, 1), (4, 5), (6, 4), (2, 3)]\nprint(index_minimum(test_list)) # output: 1\n\ntest_list = [(10, 20), (5, 30), (1, 15), (3, 40)]\nprint(index_minimum(test_list)) # output: 2\ntest_list = [(10, 100), (20, 5), (30, 15), (40, 1)]\nprint(index_minimum(test_list)) # output: 0",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)] ) == (0, 1, 2)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(lst)\n    min_len = 0\n    max_len = 0\n    temp = 0\n    count = 0\n    for i in range(n):\n        temp = 0\n        for j in range(i, n):\n            if lst[j] == 1:\n                temp += 1\n            else:\n                break\n        min_len = max(min_len, temp)\n    return min_len\n\nlst = [1,0,1,0,0,1,1,0,1,0,0,1,0,1,0]\nprint(Find_Min_Length(lst))",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9] ) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n\n#Test the function\nprint(divisor(12)) # Output: 3\nprint(divisor(20)) # Output: 4\nprint(divisor(27)) # Output: 6\n",
        "generated_testcode": "assert divisor(1) == 1\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n\n\n#Example usage:\nlist1 = [['apple', 'banana', 'orange', 'banana', 'orange', 'orange', 'apple', 'banana', 'mango', 'apple', 'orange']\nprint(frequency_lists(list1))\n#Output: {'apple': 2, 'banana': 3, 'orange': 3, 'mango': 1}\n",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\"] == { \"apple\": 4, \"banana\": 4, \"orange\": 4}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(numbers) == 0:\n        return 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n\n\n# Test the function with the following code:\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = multiply_num(num_list)\nprint(result) # Output: 36.0\n\nnum_list = [10, 20, 30, 40]\nresult = multiply_num(num_list)\nprint(result) # Output: 200.0\n\nnum_list = []\nresult = multiply_num(num_list)\nprint(result) # Output: 1.0\n\nnum_list = [10, 20]\nresult = multiply_num(num_list)\nprint(result) # Output: 50.0\n\nnum_list = [0, 1, 2, 3, 4, 5, 6]\nresult = multiply_num(num_list)\nprint(result) # Output: 0.0\n\nnum_list = [0]\nresult = multiply_num(num_list)\nprint(result) # Output: 0.0 ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5] ) == 60\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n = n // 2\n    binary.reverse()\n    return binary\n\n\n# Test the function with an example\nprint(decimal_to_binary(42)) # Output: [1, 0, 1, 1, 0, 1, 1, 0]\nprint(decimal_to_binary(10)) # Output: [1, 0, 1, 0, 1, 0, 1, 0]\nprint(decimal_to_binary(255)) # Output: [1, 1, 0, 1, 0, 1]\nprint(decimal_to_binary(35)) # Output: [1, 0, 0, 1, 1, 1]\nprint(decimal_to_binary(55)) # Output: [1, 0, 1, 1, 1, 1, 0, 1]\nprint(decimal_to_binary(23)) # Output: [1, 1, 0, 0, 1, 1]\n\n\n# Modify the function to return a binary string instead of a list\ndef decimal_to_binary_string(n):\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n = n // 2\n    binary.reverse()\n    return ''.join(str(",
        "generated_testcode": "assert decimal_to_binary(0) == \"0b0\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num = str(num)\n    len_num = len(num)\n    if num == num[::-1]:\n        return int(num) + 1\n    elif len_num % 2 == 0:\n        mid = len_num // 2\n        left, right = num[:mid], num[mid:]\n        left_new, right_new = \"\", \"\"\n        for i in range(mid):\n            left_new += num[i]\n            right_new = num[mid - i - 1] + right_new\n        new_num = left_new + right_new\n        if int(new_num) > int(num):\n            return int(new_num)\n        else:\n            new_num = str(int(num) + 1)\n            while new_num[::-1] != new_num:\n                new_num = str(int(new_num) + 1)\n            return int(new_num)\n    else:\n        mid = len_num // 2\n        left, right = num[:mid], num[mid:]\n        left_new, right_new = \"\", \"\"\n        for i in range(mid):\n            left_new += num[i]\n            right_new = num[mid - i - 1] + right_new\n        new_num = left_new + right_new\n        if int(new_num) > int(num):\n            return int(new_num)\n        else:\n            new_num = str(",
        "generated_testcode": "assert next_smallest_palindrome(12321) == 12345\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Sort the array in non-descending order\n    arr.sort()\n    return arr[k-1]\n\n# Test the function with sample input\narr = [12, 3, 5, 2, 7, 19, 11]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k)) # Output: 7\n\n\n# Test the function with sample input\narr = [1, 3, 2, 11, 5, 6, 4]\nn = len(arr)\nk = 4\nprint(kth_element(arr, n, k)) # Output: 4\n\n\n# Test the function with sample input\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 1\nprint(kth_element(arr, n, k)) # Output: 1\n\n\n# Test the function with sample input\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nk = 6\nprint(kth_element(arr, n, k)) # Output: 10 ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 5\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    words = word.split('_')\n    camel_case_word = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i].lower()\n        else:\n            camel_case_word += words[i].capitalize()\n    return camel_case_word\n\n\n# Test cases\nprint(snake_to_camel(\"hello_world\")) # Output: \"helloWorld\"\nprint(snake_to_camel(\"snake_case\")) # Output: \"snakeCase\"\nprint(snake_to_camel(\"camel_case\")) # Output: \"camelCase\"\nprint(snake_to_camel(\"snake_case_string\")) # Output: \"snakeCaseString\"\nprint(snake_to_camel(\"snake_case_string_converter\")) # Output: \"snakeCaseStringConverter\"\nprint(snake_to_camel(\"camel_case_converter\")) # Output: \"camelCaseConverter\"\nprint(snake_to_camel(\"hello_world_this_is_snake_case\")) # Output: \"helloWorldThisIsSnakeCase\" ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\" ) == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(n-m+1, n+1):\n        res *= i\n    for i in range(1, m+1):\n        res //= i\n    return res\n\n# Test cases\nprint(eulerian_num(5, 3)) # Output: 15\nprint(eulerian_num(6, 2)) # Output: 30\nprint(eulerian_num(7, 4)) # Output: 84\nprint(eulerian_num(8, 4)) # Output: 65 ",
        "generated_testcode": "assert eulerian_num(1, 1) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist, key=lambda x: x.lower()))\n    return result\n\ninput_list = [['banana', 'cherry', 'apple'], ['pear', 'grape', 'orange'], ['kiwi', 'mango', 'strawberry']]\nprint(sort_sublists(input_list)) # [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear'], ['kiwi', 'mango', 'strawberry']]\n\n#Alternate solution using lambda function\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\ninput_list = [['banana', 'cherry', 'apple'], ['pear', 'grape', 'orange'], ['kiwi', 'mango', 'strawberry']]\nprint(sort_sublists(input_list)) # [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear'], ['kiwi', 'mango', 'strawberry']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"] == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n\n#Test the function\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Should print 3\n\n\nlst = [True, False, True, False, True]\nprint(count(lst)) # Should print 3\n\n\nlst = [False, False, False, False, False, False]\nprint(count(lst)) # Should print 0\n\n\nlst = [True, False, False, True, True, False, True]\nprint(count(lst)) # Should print 2\n\n\nlst = [False, False, False, False, False, False]\nprint(count(lst)) # Should print 0\n\n\nlst = [True, True, True, True, True, True]\nprint(count(lst)) # Should print 4\n\n\nlst = [False, False, False, False]\nprint(count(lst)) # Should print 0\n\n\nlst = [True, True, True, True]\nprint(count(lst)) # Should print 3\n\n\n#Write a python function to count even numbers in the given list\ndef count_even(lst):\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n    return count\n\n# Test the function\nlst = [2, 4, 6, 8, 10,",
        "generated_testcode": "assert count([True, False, True, False, True, False, True] ) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = list(test_tup)\n    for num in test_list:\n        new_list.append(num)\n    return tuple(new_list)\n\n# Test the function\ntest_list = [1, 2, 3, 4, 5]\ntest_tuple = (6, 7, 8, 9)\nprint(add_lists(test_list, test_tuple)) # Output: (6, 7, 8, 9, 1, 2, 3, 4, 5)\n\n# Test the function with another tuple\ntest_list = [10, 11, 12, 13]\ntest_tuple = (14, 15, 16)\nprint(add_lists(test_list, test_tuple)) # Output: (14, 15, 16, 10, 11, 12, 13)",
        "generated_testcode": "assert add_lists([\"apple\", \"banana\", \"cherry\"], (1, 2, 3)) == (\"apple\", \"banana\", \"cherry\", 1, 2, 3)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_hexadecimal(num):\n        try:\n            int(num,16)\n            return True\n        except ValueError:\n            return False\n\n    count = 0\n    for i in range(L,R+1):\n        if is_hexadecimal(str(i)):\n            count += 1\n    return count\n\nL = 10\nR = 1000\nprint(count_Hexadecimal(L,R))\n\n# Output: 7",
        "generated_testcode": "assert count_Hexadecimal(0,15) == 16\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    heapq.heappush(heap,num1[0])\n    heapq.heappush(heap,num2[0])\n    heapq.heappush(heap,num3[0])\n    iters = [iter(num1),iter(num2),iter(num3)]\n    i = 0\n    while i<len(num1) and i<len(num2) and i<len(num3):\n        if heap[0] == num1[i]:\n            i += 1\n        elif heap[0] == num2[i]:\n            i += 1\n        elif heap[0] == num3[i]:\n            i += 1\n        else:\n            i += 1\n        heapq.heappushpop(heap,i)\n    while i<len(num1):\n        if heap[0] == num1[i]:\n            i += 1\n        else:\n            heapq.heappushpop(heap,num1[i])\n    while i<len(num2):\n        if heap[0] == num2[i]:\n            i += 1\n        else:\n            heapq.heappushpop(heap,num2[i])\n    while i<len(num3):\n        if heap[0] == num3[i]:\n            i += 1\n        else:\n            heapq.heappushpop(heap,num3[i])\n   ",
        "generated_testcode": "assert merge_sorted_list(sorted([1,2,3,4,5,6,7,8,9], [2,4,6,8,10,12,14], [3,6,9,12,15,18,20]) == [1,2,2,3,4,4,5,6,6,6,8,8,9,9,10,12,12,14,15,18,20]\n\n# Test case 2\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(n):\n        if s[i]=='0':\n            count+=1\n        else:\n            count=0\n    return count\n\ndef count_rotations(s):\n    n = len(s)\n    return n-odd_Equivalent(s,n)\n\n# Test the function with example inputs\nprint(count_rotations('1011010'))\nprint(count_rotations('010101'))",
        "generated_testcode": "assert odd_Equivalent(1011, 3) == 1\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            result.append(i)\n    return result\n\n# Test the function with the given test cases\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8], 1, 10))\nprint(extract_missing([], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7], 1, 5))\nprint(extract_missing([1, 2, 4, 5, 6, 8, 9], 1, 10))\nprint(extract_missing([2, 4, 6, 8, 9], 1, 10))\nprint(extract_missing([1, 3, 5, 7, 9], 1, 9))\nprint(extract_missing([], 1, 1))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\n\n# Output\n# [2, 3, 4, 5, 6, ",
        "generated_testcode": "assert extract_missing(range(1, 10), 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[i+1]:\n                common_list.append(nestedlist[i][j])\n    return common_list\n\n# Testing the function\nnestedlist = [['apple', 'banana', 'orange'], ['banana', 'orange', 'kiwi'], ['orange', 'kiwi', 'grape']]\nprint(common_in_nested_lists(nestedlist)) # Output: ['orange', 'kiwi'] ",
        "generated_testcode": "assert common_in_nested_lists(\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]\n) == [3, 4, 5]\n\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    perimeter = 2*3.14*diameter + 2*3.14*diameter\n    return perimeter\n\n# test the function\ndiameter = 5\nheight = 10\nprint(perimeter(diameter,height)) ",
        "generated_testcode": "assert perimeter(10,20) == 60.0\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nprint(check_integer(\"123\")) # True\nprint(check_integer(\"12.3\")) # False\nprint(check_integer(\"-123\")) # False\nprint(check_integer(\"12a3\")) # False\nprint(check_integer(\"12e3\")) # False\nprint(check_integer(\"hello\")) # False\nprint(check_integer(\"3.14\")) # False",
        "generated_testcode": "assert check_integer(123) == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n\n#Testing the function\ntest_list = [(1,2,3),(1,2,3),(4,5,6),(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3)]\nprint(assign_freq(test_list))  #Output should be {(1, 2, 3): 3, (4, 5, 6): 2, (7, 8, 9): 2, (10, 11, 12): 1}\n\ntest_list = [(1,2,3),(1,2,3),(4,5,6),(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3),(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(10,11,12),(1,2,3)]\nprint(assign_freq(test_",
        "generated_testcode": "assert assign_freq(()) == []\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    empty = True\n    for i in list1:\n        if i:\n            empty = False\n            break\n    return empty\n\n#Example usage:\nlist1 = [{}, {}, {}, {}]\nprint(empty_dit(list1)) #True\nlist2 = [{\"a\":1}, {}, {\"b\":2}]\nprint(empty_dit(list2)) #False\nlist3 = []\nprint(empty_dit(list3)) #True",
        "generated_testcode": "assert empty_dit([]), \"All dictionaries are empty\"\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param nums: tuple of positive integers\n    :return: integer\n    \"\"\"\n    # Your code here\n    integer = 0\n    for i in range(len(nums)):\n        integer += nums[i] * 10**(len(nums) - i - 1)\n    return integer\n\n\n# test the function with the sample input\nnums = (1, 2, 3, 4, 5)\nprint(tuple_to_int(nums))  # Output: 54321\n\nnums = (123,)\nprint(tuple_to_int(nums))  # Output: 123\nnums = (1, 234, 5)\nprint(tuple_to_int(nums))  # Output: 5231\nnums = (1, 23, 45, 6, 7)\nprint(tuple_to_int(nums))  # Output: 765231",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except ValueError:\n            continue\n    return result\n\n\n# Test the function with the given test cases\ntest_list1 = [\"123\", \"apple\", \"56.7\", \"cat\", \"dog\", \"90.3\", \"fish\"]\ntest_list2 = [\"123\", \"dog\", \"fish\", \"67\", \"56.7\", \"apple\"]\ntest_list3 = [\"fish\", \"apple\", \"dog\", \"cat\", \"elephant\", \"12.9\", \"22\"]\nprint(list_to_float(test_list1))\nprint(list_to_float(test_list2))\nprint(list_to_float(test_list3))\n\n# Output: [123.0, 56.7, 90.3]\n# Output: [123.0, 67.0, 56.7, 22.0]\n# Output: []",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    lst = string.split()\n    return lst \n\n\n# Test cases \nprint(string_to_list(\"This is a test string.\")) # ['This', 'is', 'a', 'test', 'string.']\nprint(string_to_list(\"https://www.example.com\")) # ['https://www.example.com']\nprint(string_to_list(\"https://www.example.com https://www.google.com\")) # ['https://www.example.com', 'https://www.google.com']\nprint(string_to_list(\"https://www.example.com https://www.google.com https://www.python.org\")) # ['https://www.example.com', 'https://www.google.com', 'https://www.python.org']\n",
        "generated_testcode": "assert string_to_list(\"https://www.google.com\" ) == [\"https://\", \"www.google.com\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the two variables to hold the elements\n    # of the array\n    first = 0\n    second = 0\n    # Traverse the array\n    for i in range(n) :\n        # If the remainder of the division of the current\n        # element by 2 is 0, then it is the same as the\n        # next element, so add it to the first element\n        if i % 2 == 0 :\n            first = first ^ arr[i]\n        # If the remainder of the division of the current\n        # element by 2 is 1, then add it to the second element\n        else :\n            second = second ^ arr[i]\n    # Return the element that appears only once\n    return first ^ second\n\n# Driver code\narr = [1,2,3,4,4,5,6,6,7,8,8,9,10,10,11,11,12,13,14,14,15,16,17,17]\nn = len(arr)\nprint(search(arr,n))\n",
        "generated_testcode": "assert search([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 15] , 11) == 12\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n            else:\n                max_product = max_product\n    return max_product\n\n# Test cases\nprint(max_product_tuple([(2,3),(5,7),(3,6),(1,4),(7,9)])) # Output: 56\nprint(max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) # Output: 28\nprint(max_product_tuple([(1,100000,-10000,-10000)]) # Output: 1000000000\nprint(max_product_tuple([(-100,-10000,100000,10000])) # Output: 1000000000\nprint(max_product_tuple([(-5,-2,4,-3,-1,5,-4,6])) # Output: 24\nprint(max_product_tuple([(100,-10,-100,-20,20,30,-30)]) # Output: 600\n",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)] ) == 560\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store the difference and count of each element\n    freq = {}\n    for i in A:\n        freq[i] = freq.get(i, 0) + 1\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = sum - (A[i] + A[j])\n            if diff in freq:\n                if freq[diff] > 0:\n                    return True\n    return False\n\nA = [1, 5, 3, 7, 8, 5, 9, 2, 3, 4]\nn = len(A)\nsum = 10\ncount = 1\n\nprint(check_triplet(A, n, sum)) ",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 1) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    def isSmart(num):\n        digits = [int(digit) for digit in str(num)]\n        count = 0\n        for i in range(len(digits)):\n            count += digits[i]**2\n        return count == sum(digits)\n\n    i = 1\n    count = 0\n    while count < n:\n        if isSmart(i):\n            count += 1\n        i += 1\n    return i-1\n\n\n# Test the function\nprint(smartNumber(1))  # Output: 1\nprint(smartNumber(2))  # Output: 13\nprint(smartNumber(3))  # Output: 101\nprint(smartNumber(4))  # Output: 123\nprint(smartNumber(5))  # Output: 130\nprint(smartNumber(6))  # Output: 137\nprint(smartNumber(7))  # Output: 149\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def sum_proper_divisors(num):\n        div_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    def is_amicable(num1, num2):\n        return sum_proper_divisors(num1) == num2 and sum_proper_divisors(num2) == num1\n\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_amicable(i, sum_proper_divisors(i)):\n            amicable_sum += i\n    return amicable_sum\n\n\n# Test the function\nprint(amicable_numbers_sum(1000000))  # Output: 316961\nprint(amicable_numbers_sum(500000))  # Output: 84462",
        "generated_testcode": "assert amicable_numbers_sum(10) == 316\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    angle = math.atan2(b,a)\n    return math.degrees(angle)\n\n# Test cases\nprint(angle_complex(3,4)) # Output: 53.1301020942272262174 (in degrees)\nprint(angle_complex(-5,-4)) # Output: -53.130102094272262174 (in degrees)\nprint(angle_complex(0,5)) # Output: 45.0 (in degrees)\nprint(angle_complex(2,0)) # Output: 0.0 (in degrees)\nprint(angle_complex(0,-3)) # Output: 180.0 (in degrees)\nprint(angle_complex(-2,0)) # Output: -90.0 (in degrees)\nprint(angle_complex(-1,1)) # Output: 135.0 (in degrees)\nprint(angle_complex(1,-1)) # Output: -135.0 (in degrees)\nprint(angle_complex(1,1)) # Output: 45.0 (in degrees)\nprint(angle_complex(-1,-1)) # Output: -135.0 (in degrees) ",
        "generated_testcode": "assert angle_complex(1, 1) == 45\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count0 = 0\n    count1 = 0\n    maxDiff = 0\n    start = 0\n    end = 0\n    max_len = 0\n    max_start = 0\n    max_end = 0\n    for i in range(n):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        while count0 > count1:\n            count0 -= 1\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                max_start = start\n                max_end = i - 1\n            else:\n                end = i - 1\n            while count0 > count1:\n                count0 -= 1\n                if string[start] == '0':\n                    count0 -= 1\n                else:\n                    count1 -= 1\n                start += 1\n        while count0 < count1:\n            count1 -= 1\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                max_start = start\n                max_end = i - 1\n            else:\n                end = i - 1\n            while count0 < count1:\n                count1 -= 1\n                if string[start] == '1':\n                    count1 -= 1\n                else:\n                    count0 -= 1\n                start += 1\n    return max_len\n\n",
        "generated_testcode": "assert find_length(1010101010, 7) == ",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    return lcm(a, b)\n\n# Test the function with sample inputs\nprint(sum(12, 18)) # Output: 24 (2 and 3 are the common divisors of 12 and 18)\nprint(sum(20, 15)) # Output: 30 (4 and 5 are the common divisors of 20 and 15)\nprint(sum(18, 24)) # Output: 24 (3 and 6 are the common divisors of 18 and 24)\nprint(sum(12, 24)) # Output: 30 (2, 3, and 4 are the common divisors of 12 and 24)\nprint(sum(15, 20)) # Output: 30 (3 and 5 are the common divisors of 15 and 20) ",
        "generated_testcode": "assert sum(12, 18) == 6 # 3 + 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(y):\n        result += x\n    return result\n\n# Test cases\nprint(multiply_int(3, 5)) # Should return 15\nprint(multiply_int(4, 10)) # Should return 40\nprint(multiply_int(7, 0)) # Should return 0\nprint(multiply_int(-3, 7)) # Should return -21\nprint(multiply_int(10, -5)) # Should return -50\nprint(multiply_int(-7, 2)) # Should return -14",
        "generated_testcode": "assert multiply_int(3, 4) == 12\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str.split()\n    shortlisted_words = []\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n    return shortlisted_words\n\n\n# Test the function with an example\nprint(long_words(5, \"Hello world this is a test\"))\n# Output: ['Hello', 'world', 'this', 'is', 'test']\n\n# Test the function with another example\nprint(long_words(3, \"python is an easy to learn language\"))\n# Output: ['python', 'easy', 'learn', 'language']\n",
        "generated_testcode": "assert long_words(3, \"hello world\") == [\"hello\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    current_sum = sum(row_sum(my_matrix) for row_sum in my_matrix)\n    if current_sum != magic_sum:\n        return False\n    current_sum = sum(col_sum(my_matrix) for col_sum in transpose(my_matrix))\n    if current_sum != magic_sum:\n        return False\n    current_sum = sum(diagonal_sum(my_matrix) for diagonal_sum in my_matrix)\n    if current_sum != magic_sum:\n        return False\n    if n % 2 == 0:\n        current_sum = sum(my_matrix[i][i] for i in range(n))\n        if current_sum != magic_sum:\n            return False\n    if n % 2 == 1:\n        current_sum = sum(my_matrix[i][n - i - 1] for i in range(n))\n        if current_sum != magic_sum:\n            return False\n    return True\n\n\ndef row_sum(row):\n    return sum(row)\n\n\ndef transpose(matrix):\n    return list(zip(*matrix)\n\ndef diagonal_sum(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix))\n\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    return magic_",
        "generated_testcode": "assert magic_square_test(\n    [[4, 9, 2, 3],\n     [3, 5, 7],\n     [8, 1, 6]]\n) == True\n\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary to store the frequency of each number in the list\n    freq_dict = {}\n    # Iterate through the list\n    for num in nums:\n        # If the number is already in the dictionary, increment its count\n        if num in freq_dict:\n            freq_dict[num] += 1\n        # If the number is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            freq_dict[num] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(freq_dict.values())\n    # Find the keys with the maximum count\n    max_keys = [key for key, value in freq_dict.items() if value == max_count]\n    # Return the maximum key with the maximum count\n    return max_keys[0]\n\n# Test the function with some inputs\nprint(max_occurrences([1, 2, 3, 2, 3, 4, 5, 2, 3, 2, 3, 2])) # Output: 2\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: None\nprint(max_occurrences([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3])) # Output: 3",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 3, 3, 2, 6, 7, 8, 8, 8, 8, 8, 1] ) == 8\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    non_vowels_list = []\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n        else:\n            non_vowels_list.append(char)\n    for char in vowels_list[::-1]:\n        result += char\n    for char in non_vowels_list:\n        result += char\n    return result\n\n\n# Test the function with the given test cases\nprint(reverse_vowels(\"hello world\")) # expected output: \"holle wlroW\"\nprint(reverse_vowels(\"Python\")) # expected output: \"Python\"\nprint(reverse_vowels(\"India\")) # expected output: \"Indai\"\nprint(reverse_vowels(\"programming\")) # expected output: \"prmognirpogram\"\nprint(reverse_vowels(\"AEIOU\")) # expected output: \"UOIEA\"\nprint(reverse_vowels(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")) # expected output: \"aBcDefgHijKlMnOpqRstUvwXyZ\"\nprint(reverse_vowels(\"aeiou\")) # expected output: \"euoa\"\nprint(reverse_vowels(\"Python is awesome\")) # expected output: \"nohtyP",
        "generated_testcode": "assert reverse_vowels(None) == None\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ' '\n    return str1\n\n\n#test the function\ntup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(tup_string(tup1))\n\n\n# Output: '1 2 3 4 5 6 7 8 9 ' ",
        "generated_testcode": "assert tup_string(()) == \"\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x < 0, nums)\n\n\n# Test the function with the following code\nnums = [-2, 3, -5, 8, -1, -9, 0, 7, -4, 12]\nprint(sum_negativenum(nums)) # Output: -16\n",
        "generated_testcode": "assert sum_negativenum(list(range(-5, 5)) == -5)\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = [int(x) for x in input().split()]\n    arr.pop()\n    for i in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1]+1)\n        else:\n            arr.append(arr[-1]-1)\n    return arr[-1] % 2\n\nn,p = map(int,input().split())\nprint(check_last(arr,n,p))\n\n#Alternate Solution\ndef check_last(arr,n,p):\n    arr = [int(x) for x in input().split()]\n    last = arr.pop()\n    for i in range(p):\n        if last % 2 == 0:\n            arr.append(last+1)\n            last += 1\n        else:\n            arr.append(last-1)\n            last -= 1\n    return arr[-1] % 2\n\nn,p = map(int,input().split())\nprint(check_last(arr,n,p)) ",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6,7,8], 2, 3) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (2*n - 1)\n\n# Test the function with different values of n\nprint(hexagonal_num(1))\nprint(hexagonal_num(2))\nprint(hexagonal_num(3))\nprint(hexagonal_num(4))\nprint(hexagonal_num(5))\nprint(hexagonal_num(10))\nprint(hexagonal_num(20))\n\n\n# Create a function to find the sum of the first n hexagonal numbers\ndef sum_hexagonal_num(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += hexagonal_num(i)\n    return sum\n\n# Test the function with different values of n\nprint(sum_hexagonal_num(5))\nprint(sum_hexagonal_num(10))\nprint(sum_hexagonal_num(20))\nprint(sum_hexagonal_num(50))\n\n\n# Create a function to find the nth hexagonal number in reverse\ndef nth_hexagonal(n):\n    i = 1\n    sum = 0\n    while sum < n:\n        i += 1\n        sum = sum_hexagonal_num(i)\n    return hexagonal_num(i-1)\n\n# Test the function with different values of n\nprint(nth_hexagonal(5))\nprint(nth_hexagonal(10))\n",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if units <= 10000:\n        total_cost = units * 0.5\n    elif units > 1000 and units <= 3000:\n        total_cost = 1000 * 0.5 + (units - 1000) * 0.6\n    else:\n        total_cost = 1000 * 0.5 + 200 * 0.6 + (units - 2000) * 0.7\n\n    return total_cost\n\n\n# Test the function with a sample input\nprint(cal_electbill(250)) # Output: 12.5\nprint(cal_electbill(350)) # Output: 19.0\nprint(cal_electbill(5000)) # Output: 75.0\n\n\n# Test the function with some more inputs\nprint(cal_electbill(100)) # Output: 5.0\nprint(cal_electbill(50)) # Output: 30.0\nprint(cal_electbill(400)) # Output: 80.0\nprint(cal_electbill(600)) # Output: 100.0\nprint(cal_electbill(1500)) # Output: 70.0\n",
        "generated_testcode": "assert cal_electbill(1000) == 1000 * 0.05\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    zero = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    zeroes = len(nums) - count\n    ratio = count/zeroes\n    return ratio\n\n# Test cases\nprint(zero_count([1, 0, 0, 2, 0, 1, 0, 0, 1, 0])) # 0.6\nprint(zero_count([1, 1, 1, 1, 1])) # 0\nprint(zero_count([0, 0, 0])) # 1\nprint(zero_count([0, 1, 0, 1, 0, 1])) # 0.5\nprint(zero_count([1, 2, 3, 4])) # 0\n",
        "generated_testcode": "assert zero_count([0, 0, 0, 1, 2, 3, 0, 0, 4, 0, 5, 0] ) == 5/7\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return True\n    while n % 2 == 0:\n        n //= 2\n    while n > 1:\n        if n % 2 == 1:\n            return False\n        n //= 2\n    return True\n",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Write your code here\n    import math\n    pi = math.pi\n    return 2 * pi * r\n\n\n# Test the function with a value of radius 5\nprint(circle_circumference(5))  # Output: 31.41592653589793\n\n# Test the function with a value of radius 10\nprint(circle_circumference(10))  # Output: 62.831853031764\n\n# Test the function with a value of radius 20\nprint(circle_circumference(20))  # Output: 125.663706141529\n",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n# Write a function to find the area of a circle\ndef circle_area(r):\n    pass\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            result.append(test_list[i])\n    return result\n\n# test the function\nprint(extract_singly([1, 2, 3, 4, 2, 5, 3, 1, 6, 6, 7, 8, 8, 1]))\n# Output: [4, 5, 7]\n\n\n# test the function\nprint(extract_singly([\"apple\", \"banana\", \"orange\", \"banana\", \"apple\", \"grape\", \"mango\", \"orange\", \"apple\"])\n# Output: ['orange'] ",
        "generated_testcode": "assert extract_singly(()) == ()\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(nums)\n    for i in range(n // 2 - 1, 0, -1):\n        mi = nums.index(max(nums[:i + 1]) if nums[0] != i + 1 else nums[i + 1])\n        if i != mi:\n            nums[:i + 1] = nums[:i + 1][::-1]\n            nums[:mi + 1] = nums[:mi + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n\n\n\n# Test the function\nnums = [4, 5, 1, 3, 2, 7, 8, 6, 9, 5, 1, 3, 2]\nprint(pancake_sort(nums))  # Output: [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\n\n\n# Test the function with empty list\nnums = []\nprint(pancake_sort(nums))  # Output: []\n\n\n# Test the function with list with one element\nnums = [1]\nprint(pancake_sort(nums))  # Output: [1]\n\n\n# Test the function with list with two or more equal elements\nnums = [2, 2,",
        "generated_testcode": "assert pancake_sort([3, 2, 1, 4, 5, 1, 0] ) == [0, 1, 1, 2, 3, 4]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist3 = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(count_samepair(list1, list2, list3))  # Output: 2\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(count_samepair(list1, list2, list3))  # Output: 0\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlist2 = [2, 3,",
        "generated_testcode": "assert count_samepair([\"apple\",\"banana\",\"orange\"],[\"apple\",\"grape\",\"orange\"],[\"apple\",\"grape\",\"kiwi\"]) == 2\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in Input: \n        if type(i) == tuple:\n            count += 1\n    return count \n\n\n#Test the function \nInput = (1, 2, (3, 4, [5, 6, 7], 8), (9, 10), [11, 12], (13, [14, 15], 16))\nprint(find_lists(Input)) # Output: 2 ",
        "generated_testcode": "assert find_lists(()) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum+=abs(arr[i]-arr[j])\n    return sum\n\n#example:\n#Input: [1, 2, 3, 4, 5, 6]\n#Output: 15\n#Explanation: The absolute differences are: 0, 1, 2, 3, 3, 2, 2, 2, 1, 1, 0, 1, 1, 1, 1. Their sum is 15.\n#Input: [1, 2, 3, 4, 5, 6, 7]\n#Output: 14\n#Explanation: The absolute differences are: 0, 1, 2, 3, 4, 3, 2, 1, 2, 1, 1, 1, 0, 1, 2, 1, 1, 1. Their sum is 14.\n\n\n#Input: [1, 2, 3, 4, 5, 6, 7, 8]\n#Output: 27\n#Explanation: The absolute differences are: 0, 1, 2, 3, 4, 3, 2, 1, 2, 1, 1, 0, 1, 2, 1, 1,",
        "generated_testcode": "assert sum_Pairs([1, 2, 3, 4, 5, 6, 7, 8] , 5) == 26\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": " \n    # Initialize the maximum difference as the first element of the array \n    max_diff = abs(arr[1] - arr[0]) \n  \n    # Initialize the minimum value as the first element of the array \n    min_val = arr[0] \n  \n    # Traverse through the array \n    for i in range(1,n): \n        # Calculate the difference between the current element and the minimum value \n        diff = arr[i] - min_val \n  \n        # If the difference is greater than the maximum difference, update the maximum difference \n        if diff > max_diff: \n            max_diff = diff \n  \n        # If the current element is smaller than the minimum value, update the minimum value \n        if arr[i] < min_val: \n            min_val = arr[i] \n  \n    # Calculate the maximum difference between the minimum value and the maximum element in the array \n    max_diff = max(max_diff, arr[n-1] - min_val) \n  \n    return max_diff ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 6, 8, 4, 5, 7, 10, 12, 15, 11, 9] , 9) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    ascii_value = 0\n    for i in str1:\n        ascii_value += ord(i)\n    return ascii_value\n\n#test the function\nprint(ascii_value_string(\"hello\"))\n# expected output: 1085\nprint(ascii_value_string(\"python\"))\n# expected output: 116446",
        "generated_testcode": "assert ascii_value_string(123) == 49\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n)] for i in range(m)]\n    dp[0][0] = tri[0][0]\n    for i in range(1, m):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = tri[i][j] + dp[i-1][j]\n            elif j == n-1:\n                dp[i][j] = tri[i][j] + dp[i-1][j-1]\n            else:\n                dp[i][j] = tri[i][j] + max(dp[i-1][j-1], dp[i-1][j])\n    for j in range(1, n-1):\n        dp[m-1][j] = dp[m-1][j] + tri[m-1][j]\n    return max(dp[m-1])\n    \n# Test the function with the given example\ntri = [[7], [3, 4], [8, 5], [2, 1, 6], [5, 10, 11, 3], [8, 1, 8, 2, 1]]\nm = len(tri)\nn = len(tri[0])\nprint(max_path_sum(tri, m, n))\n# Output: 33\n\n# Explanation:\n# The maximum path sum can be 8 -> 5 -> ",
        "generated_testcode": "assert max_path_sum(\n    [[5],\n     [3, 4],\n     [2, 4, 6],\n     [8, 5, 9, 3],\n     [6, 1, 1, 2, 5],\n     [1, 8, 3, 4, 1, 5]], 4) == 23\n\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum1 = 0\n    while x != 0 :\n        sum1 += x % 10\n        x = x // 10\n    return sum1\n\ndef sum_digits_double(x) :\n    sum2 = 0\n    while x != 0 :\n        sum2 += x % 10\n        x = x // 10\n    return sum2\n\ndef divide_number(num) :\n    sum1 = sum_digits_single(num)\n    sum2 = sum_digits_double(num)\n    if sum1 > sum2 :\n        return num // 2, num // 2\n    else :\n        return num // sum1, num // sum2\n\n# Test cases\nprint(divide_number(1234)) # Output : (13, 55)\nprint(divide_number(9876)) # Output : (69, 68)\nprint(divide_number(13579)) # Output : (81, 379)\nprint(divide_number(999)) # Output : (10, 89)\nprint(divide_number(1000)) # Output : (10, 10)\nprint(divide_number(9999)) # Output : (50, 499)\nprint(divide_number(789)) # Output : (78, 9)\nprint(divide_number(3456",
        "generated_testcode": "assert sum_digits_single(12345) == (3, 2345)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a dictionary to store the count of elements and their positions\n    count_dict = {}\n    for i in range(n):\n        count_dict[arr[i]] = [i+1, i+1]\n\n    # Traverse through the array\n    for i in range(1, n):\n        if arr[i] - arr[i-1] == 1:\n            # If the difference is one, update the count and position\n            count_dict[arr[i]][0] = count_dict[arr[i-1]][0] + 1\n        else:\n            # If the difference is not one, insert a new key with the count and position\n            count_dict[arr[i]][0] = 1\n            count_dict[arr[i]][1] = i+1\n    # Find the maximum count\n    max_count = max(count_dict.values(), key=lambda x: x[0])[0]\n    # Find the positions of the maximum count\n    max_count_pos = [key for key in count_dict if count_dict[key] == [max_count, 0]][0]\n    # Traverse through the dictionary and find the longest subsequence\n    seq = []\n    while max_count > 0:\n        seq.append(max_count_pos)\n        max_count_pos = count_dict[max_count_pos][1]\n        max_count -= 1\n    return seq\n\n# Test the function\narr = [1",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def find_seq(a,b,c):\n        count=0\n        num=a\n        while True:\n            num=num+b\n            if num==c:\n                return True\n            elif num==0 or num==1:\n                return False\n            else:\n                count+=1\n                if count>10000:\n                    return False\n    return find_seq(a,b,c)\n\n\n#Example:\na=5\nb=10\nc=15\nprint(does_Contain_B(a,b,c)) # Output: True\n\na=3\nb=7\nc=19\nprint(does_Contain_B(a,b,c)) # Output: False\n\na=1\nb=1\nc=1\nprint(does_Contain_B(a,b,c)) # Output: False ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if p == 0:\n        return q\n    else:\n        return gcd(q%p,p)\n\ndef co_prime(n1,n2):\n    if gcd(n1,n2) == 1:\n        return True\n    else:\n        return False\n\n#test the function\nn1 = 3\nn2 = 5\nprint(co_prime(n1,n2))\nn1 = 4\nn2 = 7\nprint(co_prime(n1,n2))\nn1 = 12\nn2 = 13\nprint(co_prime(n1,n2))\nn1 = 15\nn2 = 27\nprint(co_prime(n1,n2))\nn1 = 8\nn2 = 17\nprint(co_prime(n1,n2))",
        "generated_testcode": "assert gcd(3,5) == 1\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(a) > 1:\n        mid = len(a)//2\n        left = a[:mid]\n        right = a[mid:]\n        merge(left, b)\n        merge(right, b)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                a[k] = left[i]\n                i += 1\n            else:\n                a[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            a[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            a[k] = right[j]\n            j += 1\n            k += 1\n        return a\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    merge_sort(left)\n    merge_sort(right)\n    return merge(left, right)\n",
        "generated_testcode": "assert merge([1,3,5,2,4,6,7,8,9,0], [3,2,1,4,5,6,7,8,9] ) == [0,1,2,3,3,4,4,5,6,7,8,8,9,9]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    x = -b / (2*a) \n    y = a*(x**2) + b*x + c \n    return x, y ",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given a two-dimensional list of integers nums and an integer N,\n    return a new list containing only the Nth element of each sublist.\n    If a sublist does not have N elements, ignore it.\n    \"\"\"\n    result = []\n    for sublist in nums:\n        if len(sublist) >= N:\n            result.append(sublist[N-1])\n    return result\n\n# Test cases\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12], [13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23]], 3)) # [3, 9, 17, 20, 22]\nprint(specified_element([[1, 2], [4, 5], [7, 8, 9, 10], [11], [13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25]], 2)) # [2, 8, 15, 21, 25]\nprint(specified_element([[1, 2, 3], [4, 5], [7",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 6, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    n = bin(n)\n    n = list(n[2:])\n    for i in range(len(n)):\n        if n[i] == '0':\n            n[i] = '1'\n        else:\n            n[i] = '0'\n    n = ''.join(n)\n    return int(n, 2)\n\n# Test the function\nnum = 10\nprint(even_bit_toggle_number(num)) # Output: 111\nnum = 20\nprint(even_bit_toggle_number(num)) # Output: 21\nnum = 5\nprint(even_bit_toggle_number(num)) # Output: 5\nnum = 15\nprint(even_bit_toggle_number(num)) # Output: 21\nnum = 12\nprint(even_bit_toggle_number(num)) # Output: 11\nnum = 14\nprint(even_bit_toggle_number(num)) # Output: 15\nnum = 25\nprint(even_bit_toggle_number(num)) # Output: 21",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    tuple_int = ()\n    for value in tuple_str:\n        tuple_int += (int(value),)\n    return tuple_int\n\n\n# Test the function with a sample tuple\ntup_str = ('10', '20', '30', '40')\nprint(tuple_int_str(tup_str)) # Output: (10, 20, 30, 40)\n\n\n# Test the function with a sample tuple\ntup_str = ('10', '20.5', '30.7', '40.9')\nprint(tuple_int_str(tup_str)) # Output: ValueError: invalid literal for int() with base 10: '20.5'",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not list1:\n        return []\n    result = []\n    count = 1\n    prev = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] == prev:\n            count += 1\n        else:\n            result.append(str(count) + prev)\n            prev = list1[i]\n            count = 1\n    result.append(str(count) + prev)\n    return result\n\n\ndef decode_list(list2):\n    result = []\n    i = 0\n    while i < len(list2):\n        count = int(list2[i])\n        char = list2[i+1]\n        result.extend([char] * count)\n        i += 2\n    return result\n\n\n# Test Cases\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 1, 1, 1, 2])) # ['12', '21', '331', '42', '51']\nprint(decode_list(encode_list([1, 2, 1, 2, 3, 1, 3, 1, 2]))) # [1, 1, 2, 2, 3, 3, 3, 4, 4, 1, 1, 1, 2]\n\nprint(encode_list([1,",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [('a', 4), ('b', 1), ('c', 2), ('a', 2)]\n\n# Test case 2\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if k >= n: \n        return 0\n    min_diff = max(arr) - min(arr)\n    if k >= min_diff: \n        return min_diff\n    else: \n        return k \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nk = 10\nprint(min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5,6,7,8], 3, 2) == 2 # Explanation: We can make all elements equal to 5 by swapping 1 and 8 and swapping 2 and 7. \n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if month in (1, 2, 3, 4, 111, 12, 10, 9, 8, 7):\n        print(\"Summer\")\n    elif month in (5, 6, 7, 8):\n        if days >= 21:\n            print(\"Summer\")\n        else:\n            print(\"Winter\")\n    elif month in (9, 10, 11):\n        if days >= 22:\n            print(\"Autumn\")\n        else:\n            print(\"Spring\")\n    else:\n        print(\"Winter\")\n\n\n#Test the function with the following inputs\nmonth_season(1, 15) # Winter\nmonth_season(6, 20) # Summer\nmonth_season(9, 25) # Autumn\nmonth_season(4, 1) # Spring\nmonth_season(3, 31) # Summer",
        "generated_testcode": "assert month_season(12,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return (n/b, 0)\n    else: \n        x = n/a\n        y = b/a\n        return (x, y)\n\n# Test the function \nprint(solution(2, 3, 5))  # Output: (0, 1.67) ",
        "generated_testcode": "assert solution (2, 3, 5) == (0, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n\n\n# Test the function with sample inputs\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [3, 7, 10, 12]\nprint(remove_elements(lst1, lst2))\n# Output: [1, 2, 4, 5, 6, 8, 9]\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [2, 4, 6]\nprint(remove_elements(lst1, lst2))\n# Output: [1, 3, 5, 7, 8, 9, 10]\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [1, 8, 9]\nprint(remove_elements(lst1, lst2))\n# Output: [2, 3, 4, 5, 6, 7, 10]\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [1, ",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"grape\"]) == [\"apple\", \"kiwi\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n\n# Test cases\nprint(sum_series(5)) # Output: 9 (5 + 3 + 1 = 9)\nprint(sum_series(10)) # Output: 55 (10 + 8 + 5 + 2 = 25\nprint(sum_series(7)) # Output: 18 (7 + 5 + 2 = 15 + 13)\n",
        "generated_testcode": "assert sum_series(5) == 15 # 5 + 3 + 1 = 9\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    ap = (s*l)/2\n    return ap\n\n# Test the function with sides of a regular polygon\nsides = 5\nlength = 3\nprint(\"Area of a regular polygon with\", sides, \"sides and edge length\", length, \"is:\", area_polygon(sides,length))\n\n# Test the function with sides of a square\nsides = 4\nlength = 4\nprint(\"Area of a square with edge length\", length, \"is:\", area_polygon(sides,length))\n\n# Test the function with sides of a hexagon\nsides = 6\nlength = 3\nprint(\"Area of a hexagon with edge length\", length, \"is:\", area_polygon(sides,length))\n\n# Test the function with sides of a triangle\nsides = 3\nlength = 6\nprint(\"Area of a triangle with edge length\", length, \"is:\", area_polygon(sides,length))\n\n# Test the function with sides of an octagon\nsides = 8\nlength = 4\nprint(\"Area of an octagon with edge length\", length, \"is:\", area_polygon(sides,length))\n\n# Test the function with sides of an equilateral triangle\nsides = 3\nlength = 7\nprint(\"Area of an equilateral triangle with side length\", length, \"is:\", area_polygon(sides,length))\n",
        "generated_testcode": "assert area_polygon(3, 10) == 15.11835039273119268645\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    sum1 = sum([i for i in range(1,n) if n%i==0])\n    sum2 = sum([i for i in range(1,n) if n%i==0])\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n\n# test the function\nprint(divSum(6)) # Output: True\nprint(divSum(8)) # Output: True\nprint(divSum(12)) # Output: False",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    for i in range(26): \n        count_dict[i] = 0\n    for char in str1.lower(): \n        if char.isalpha(): \n            count_dict[ord(char) - ord('a')] += 1\n    return count_dict\n\nstr1 = input(\"Enter a string: \")\nresult = count_char_position(str1)\nprint(result)\n",
        "generated_testcode": "assert count_char_position(\"Hello World\") == {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, 'l': 2, 'o': 3, 'W': 2, 'r': 2, 'd': 2}\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] == 0:\n                continue\n            if A[i]^A[j]%2==0:\n                count += 1\n    return count ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 5) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n. \n    \"\"\"\n    if n==0:\n        return 1\n    return 2**(n-1).bit_length()\n\nprint(next_Power_Of_2(10)) # Output: 8\nprint(next_Power_Of_2(17)) # Output: 16\nprint(next_Power_Of_2(32)) # Output: 32\nprint(next_Power_Of_2(2048)) # Output: 2048",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in a: \n        if i == x: \n            count+=1\n    return count\n\n#Example\na = [1,2,3,4,5,2,3,5,6,1,1,1,1,2,3,4,5,7,8,9,1,1]\nx = 1\nprint(frequency(a,x)) #Output: 4 ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9) == 3\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2*get_pell(n-1) + get_pell(n-2)\n\n# Test the function with some inputs\nprint(get_pell(1))\nprint(get_pell(2))\nprint(get_pell(3))\nprint(get_pell(4))\nprint(get_pell(5))\nprint(get_pell(6))\nprint(get_pell(7))\nprint(get_pell(8))\n\n# This function returns the nth pell number, which is defined as the sum of the squares of the first n-1 and n-2 pell numbers. ",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # take input list1                                                                                                                                                                                               \n    # take input m and n as range                                                                                                                                                                            \n    # initialize a variable sum to 0                                                                                                                                                                         \n    # iterate through the list1 from index m to n                                                                                                                                                            \n    # add the element to sum variable                                                                                                                                                                       \n    # return the sum                                                                                                                                                                                    \n    sum = 0                                                                                                                                                                                             \n    for i in range(m, n+1):                                                                                                                                                                               \n        sum += list1[i]                                                                                                                                                                                    \n    return sum                                                                                                                                                                                      \n\n# test the function                                                                                                                                                                                             \nprint(sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4)) # Output: 12 (as the sum of 3+4+5+6 = 16)                                                                                                         \nprint(sum_range_list([10, 20, 30, 40, 50, 60, 70, 80], 1, 5)) # Output: 150 (as the",
        "generated_testcode": "assert sum_range_list(range(1, 10), 2, 5) == 12\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 5 * a\n\n\n# Test the function with the given test cases\nprint(perimeter_pentagon(4))  # Output: 20\nprint(perimeter_pentagon(7))  # Output: 35\nprint(perimeter_pentagon(10) # Output: 50\n",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n\ns = \"std is a cool language\"\nprint(count_occurance(s))  # Output: 2\n\ns = \"std is not a good language\"\nprint(count_occurance(s))  # Output: 2\n\ns = \"this is a string\"\nprint(count_occurance(s))  # Output: 0\n\n\n# Alternate Solution:\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n\ns = \"std is a cool language\"\nprint(count_occurance(s))  # Output: 2\n\ns = \"std is not a good language\"\nprint(count_occurance(s))  # Output: 2\n\ns = \"this is a string\"\nprint(count_occurance(s))  # Output: 0\n",
        "generated_testcode": "assert count_occurance([\"hello world\", \"std\", \"python\", \"std\", \"python\"] == ",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\n# Test the function with a sample input\nprint(remove_splchar(\"!@#$%^&*()12345abc#$%^&*()def67890ABCDEFghijklmnopQRSTuvwxyz?/.,;:-+\"))  # output: \"12345abcdef67890ABCDEFghijklmnopQRSTuvwxyz\"\n\n#Test the function with another sample input\nprint(remove_splchar(\"Hello, world! This is a test string.\"))  # output: \"HelloworldThisisateststring\"\n\n# Test the function with yet another sample input\nprint(remove_splchar(\"Python is awesome! 1234\"))  # output: \"Pythonisawesome1234\"\n\n# Test the function with an empty string\nprint(remove_splchar(\"\"))  # output: \"\"\n\n# Test the function with a string with no alphanumeric characters\nprint(remove_splchar(\"!@#$%^&*()[]{}|:;,.<>?/\")  # output: \"\"",
        "generated_testcode": "assert remove_splchar(123abc@#$%def) == \"123abcdef\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {}\n    for key, value in l:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n# Example usage:\nl = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4), (\"a\", 5), (\"b\", 6), (\"c\", 7)]\nprint(group_keyvalue(l)) # Output: {'a': [1, 3, 5], 'b': [2, 6], 'c': [4, 7]}\n\nl = [(\"cat\", \"meow\"), (\"dog\", \"woof\"), (\"cat\", \"meow\"), (\"dog\", \"ruff\"), (\"cat\", \"purr\")]\nprint(group_keyvalue(l)) # Output: {'cat': ['meow', 'meow', 'purr'], 'dog': ['woof', 'ruff']}\n\n# Test your function with a list of tuples with different key-value pairs. ",
        "generated_testcode": "assert group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('a', 6), ('d', 7)] ) == {'a': [1, 3, 6], 'b': [2, 5], 'c': [4], 'd': [7]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(is_valid_parenthese('()')) # True\nprint(is_valid_parenthese('()[]{}')) # True\nprint(is_valid_parenthese('({[)]')) # False\nprint(is_valid_parenthese('((')) # False\nprint(is_valid_parenthese('([{})')) # False\nprint(is_valid_parenthese('()')) # True\nprint(is_valid_parenthese('[]')) # True\nprint(is_valid_parenthese('{}')) # True\nprint(is_valid_parenthese('[]()')) # True\nprint(is_valid_parenthese('({[)]')) # False\nprint(is_valid_parenthese('([{})')) # False\nprint(is_valid_parenthese('((()')) # True\nprint(is_valid_parenthese('(()')) # True\nprint(is_valid_parenthese('[]')) # True\nprint(is_valid_parenthese('[()') # False\nprint(is_valid_parenthese('[]]')) # False\nprint(is_valid_parenthese('}{')) # False\nprint(is_valid_parenthese",
        "generated_testcode": "assert is_valid_parenthese(\"()\" == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return a+b+c\n    else:\n        return \"Not a triangle\"\n\nprint(perimeter_triangle(3,4,5))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(5,7,9))\nprint(perimeter_triangle(3,4,1))\n\n#Output:\n#12\n#6\n#16\n#Not a triangle",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def lcm(a,b):\n        return a*b // gcd(a,b)\n    def gcd(a,b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    lcm_range = [L]\n    for i in range(L+1, R+1):\n        lcm_range.append(i)\n    for i in range(len(lcm_range)):\n        for j in range(i+1, len(lcm_range)):\n            if lcm(lcm_range[i], lcm_range[j]) >= L and lcm(lcm_range[i], lcm_range[j]) <= R:\n                return [lcm_range[i], lcm_range[j]]\n    return []\n\n\n# Test the function\nL = 15\nR = 35\nprint(answer(L, R)) # Output: [15, 35]\n\nL = 25\nR = 15\nprint(answer(L, R)) # Output: [25, 35]",
        "generated_testcode": "assert answer(1, 10) == (1, 2)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for p in patterns:\n        if p in text:\n            result.append(p)\n    return result\n\n#Test the function\npatterns = [\"hello\", \"world\",\"python\",\"programming\"]\ntext = \"hello world, I am learning python\"\nprint(string_literals(patterns,text)) # Output: [\"hello\", \"world\"]\n\ntext = \"Hello, I am learning Python programming\"\nprint(string_literals(patterns,text)) # Output: [\"hello\", \"programming\"]\ntext = \"Hi I am a newbie in python programming\"\nprint(string_literals(patterns,text)) # Output: []\n\n\n#Write a function to search some literals strings in a string using regular expression\ndef regex_string_literals(patterns,text):\n    import re\n    result = []\n    for p in patterns:\n        if re.search(p,text):\n            result.append(p)\n    return result\n\n#Test the function\npatterns = [\"hello\", \"world\",\"python\",\"programming\"]\ntext = \"hello world, I am learning python\"\nprint(regex_string_literals(patterns,text)) # Output: [\"hello\", \"world\"]\n\ntext = \"Hello, I am learning Python programming\"\nprint(regex_string_literals(patterns,text)) # Output: [\"python\", \"programming\"]\ntext = \"Hi I am a newbie in python programming\"\nprint(regex_string_literals(patterns,text)) # Output: []\n\n",
        "generated_testcode": "assert string_literals([\"hello\",\"world\"], \"hello world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        temp = x // 10\n        while temp > 0:\n            if x % 10 == temp:\n                return False\n            x //= 10\n            temp //= 10\n        return True\n\n# Test cases\nprint(is_num_keith(1000)) # True\nprint(is_num_keith(11111)) # True\nprint(is_num_keith(121)) # True\nprint(is_num_keith(123)) # False\nprint(is_num_keith(22222)) # False\nprint(is_num_keith(2223)) # False\nprint(is_num_keith(33333333)) # True\nprint(is_num_keith(33333343)) # False\nprint(is_num_keith(4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444",
        "generated_testcode": "assert is_num_keith(123) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    R = 6371 # radius of the Earth in km\n    rlat1 = radians(slat)\n    rlon1 = radians(slon)\n    rlat2 = radians(elat)\n    rlon2 = radians(elon)\n    dlat = rlat2-rlat1\n    dlon = rlon2-rlon1\n    a = (sin(dlat/2))**2 + cos(rlat1)*cos(rlat2)*(sin(dlon/2)**2)\n    c = 2*atan2(sqrt(a),sqrt(1-a))\n    distance = R*c\n    return distance\n\n#Test the function\nprint(distance_lat_long(45,12,46,13)) # Output: 151.5191877610515467612\n\n#This function will take in the latitude and longitude of two points, calculate the distance between them and return the result in km\n",
        "generated_testcode": "assert distance_lat_long(37.33,-1222.5,40.5,-74.5) == 3427.7 # distance between SF and NYC\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\n\ndef longest_common_prefix(str_list):\n    if not str_list:\n        return \"\"\n    prefix = str_list[0]\n    for s in str_list[1:]:\n        prefix = common_prefix_util(prefix, s)\n        if not prefix:\n            return \"\"\n    return prefix\n\n\n# Test the function\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"])) # Output: \"fl\"\nprint(longest_common_prefix([\"dog\", \"racecar\", \"car\"])) # Output: \"\"\nprint(longest_common_prefix([\"dog\", \"doghouse\", \"dogcar\"])) # Output: \"dog\"\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\", \"flowing\"])) # Output: \"flow\"\nprint(longest_common_prefix([\"hello\", \"hell\", \"heaven\", \"hero\"])) # Output: \"hel\"\nprint(longest_common_prefix([\"hello\", \"hello\", \"hello\"])) # Output: \"hello\"",
        "generated_testcode": "assert common_prefix_util([\"flower\", \"flow\", \"flight\"]), \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    uppercase_chars = re.findall(r'[A-Z]', string)\n    lowercase_chars = re.findall(r'[a-z]', string)\n    special_chars = re.findall(r'[!@#$%^&*()]', string)\n    numeric_chars = re.findall(r'\\d', string)\n    return (uppercase_chars, lowercase_chars, special_chars, numeric_chars)\n\n# Testing the function\nstring = \"Hello!@#world123\"\nprint(find_character(string))\n# Output: (['H', 'o'], ['l', 'l', 'e'], ['!', '@', '#'], ['w', 'o', 'r', 'l', 'd', '1', '2', '3'])\n\nstring = \"Python 3.6.6\"\nprint(find_character(string))\n# Output: ('P', 'y', '', 't', 'h', 'o', 'n', '', '', '3', '', '.', '', '6', '', '.', '', '6')\n\nstring = \"python@123\"\nprint(find_character(string))\n# Output: ('p', 'y', '@', 't', 'h', 'o', 'n', 'p', 'y', 't', 'h', 'o', 'n', '', '1', '2', '3') ",
        "generated_testcode": "assert find_character(123abc@#DEF) == {'uppercase': 'DEF', 'lowercase': 'abc', 'special_char': '@', 'numeric': '123'}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n# Test the function\narr = [1, 5, 3, 7, 9, 1, 5, 3, 4, 8, 6, 4, 9]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k)) # Output: 4\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 2\nprint(count_pairs(arr, n, k)) # Output: 10\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 1\nprint(count_pairs(arr, n, k)) # Output: 6\n",
        "generated_testcode": "assert count_pairs([1, 5, 3, 7, 9, 2, 8, 5, 4], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n#Test the function with a sample list\nnums = [5, 10, 15, 20, 25, 30, 35, 40, 45]\nprint(greater_specificnum(nums, 20))  # Output: [25, 30, 35, 40, 45]\nprint(greater_specificnum(nums, 18)) # Output: [20, 25, 30, 35, 40, 45]\nprint(greater_specificnum(nums, 32)) # Output: [40, 45]\nprint(greater_specificnum(nums, 45)) # Output: [] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9], 5) == [6,7,8,9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is greater than 0\n    if discriminant > 0:\n        focus1 = (-b + math.sqrt(discriminant))/(2*a)\n        focus2 = (-b - math.sqrt(discriminant))/(2*a)\n        return (focus1, focus2)\n    # Check if the discriminant is equal to 0\n    elif discriminant == 0:\n        focus1 = (-b) / (2*a)\n        return (focus1,)\n    # Otherwise, the parabola does not have real roots and does not have a focus\n    else:\n        return None\n\n# Example usage\na = 3\nb = 4\nc = -10\nprint(parabola_focus(a, b, c)) # Output: (2.0, 3.0)\n\na = 1\nb = 2\nc = 1\nprint(parabola_focus(a, b, c)) # Output: (-2.0,)\n\na = 2\nb = 4\nc = -12\nprint(parabola_focus(a, b, c)) # Output: None\n",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == (-1, 1)\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n\n    def search_literals(patterns, text):\n        for pattern in patterns:\n            if re.search(pattern, text):\n                return pattern\n        return None\n\n    return search_literals(patterns, text)\n\n\n# Test the function with some examples\ntext = \"This is a test string to search literals.\"\npatterns = [\"test\", \"literals\", \"search\"]\nprint(check_literals(text, patterns)) # Output: \"test\"\n\ntext = \"This is a test string to search literals.\"\npatterns = [\"test\", \"strings\", \"search\"]\nprint(check_literals(text, patterns)) # Output: \"search\"\ntext = \"This is a test string to search for literals.\"\npatterns = [\"search\", \"literals\"]\nprint(check_literals(text, patterns)) # Output: \"literals\"\ntext = \"This is a test string to search for literals.\"\npatterns = [\"hello\", \"world\"]\nprint(check_literals(text, patterns)) # Output: None\n\n\n# Another way to implement the same function\ndef check_literals(text, patterns):\n    import re\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return pattern\n    return None\n\n# Test the function with some examples\ntext = \"This is a test string to search literals.\"\npatterns = [\"test\", \"literals\", \"search\"]\nprint(check_literals(text, patterns)) # Output: \"",
        "generated_testcode": "assert check_literals(\n    \"This is a test string. It contains some literals like 'python' and 'regex'.\",\n    ['python', 'regex']\n) == ['python', 'regex']\n\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a table to store the length of the longest common subsequence \n    # for every possible prefix of X and every possible prefix of Y \n    table = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # fill the table in bottom-up fashion \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                table[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n  \n    # create a sequence to reconstruct the subsequence \n    index = table[m][n] \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\" \n    i, j = m, n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n            lcs[index] = \"\" \n        elif table[i-1][j] > table[i][j-1",
        "generated_testcode": "assert longest_common_subsequence([\"ABCDGH\", \"AEDFHR\"] , 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            j=n/i\n            if i**2==j or (n/i)**2==i:\n                return True\n    return False\n\n# Test the function with some test cases\nprint(prod_Square(25)) # True\nprint(prod_Square(36)) # True\nprint(prod_Square(11)) # False\nprint(prod_Square(22)) # True\nprint(prod_Square(13)) # False\nprint(prod_Square(23)) # False\nprint(prod_Square(49)) # True\nprint(prod_Square(75)) # True\nprint(prod_Square(26)) # False\nprint(prod_Square(100)) # True\nprint(prod_Square(17)) # False\n",
        "generated_testcode": "assert prod_Square(1) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = sorted(set(filter(lambda x: x > 0, arr))  # Remove duplicates and zeroes\n    for i in range(1, n+1):\n        if i not in arr: \n            return i  # Return the first missing positive number\n    return n+1 # If all numbers are present, return n+1\n\n\n# Test cases\nprint(first_Missing_Positive([3, 4, -1, 1, 5, 6, 2], 5)) # Output: 1\nprint(first_Missing_Positive([1, 2, 0, 3, 4], 5)) # Output: 5\nprint(first_Missing_Positive([7, 8, 9, 11, 12], 11)) # Output: 1\nprint(first_Missing_Positive([1, 2, 3, 4, 5, 6, 7, 9], 9)) # Output: 8\nprint(first_Missing_Positive([1, 2, 3, 4, 5, 6, 7, 8], 8)) # Output: 9\nprint(first_Missing_Positive([1, 2, 3, 4, 5, 6, 7, 9, 11], 11) # Output: 8\n\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(1)",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 5, 6, 2, 1, -2, 8, 7, 2] , 7) == 4\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(x1, x2+1): \n        for j in range(y1, y2+1): \n            if(is_Intgral(i) and is_Intgral(j)): \n                count += 1 \n    return count \n  \n#function to check if a point is an integral co-ordinate \ndef is_Intgral(num): \n    if(num % 1 == 0): \n        return True \n    else: \n        return False \n  \n#testing the function \nprint(count_Intgral_Points(0,0,3,3)) # Output: 4 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 5\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"June\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return True\n    elif monthname3 == \"April\" or monthname3 == \"July\" or monthname3 == \"November\" or monthname3 == \"September\":\n        return False\n    else:\n        return True\n\n\n# Test the function\nprint(check_monthnumber(\"January\"))\nprint(check_monthnumber(\"April\"))\nprint(check_monthnumber(\"December\"))\n\n",
        "generated_testcode": "assert check_monthnumber(30) == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    letters = False\n    numbers = False\n    for i in str:\n        if i.isalpha():\n            letters = True\n        if i.isdigit():\n            numbers = True\n        if letters == True and numbers == True:\n            return True\n    return False\n\nprint(check_String(\"abcd1234\")) # True\nprint(check_String(\"1234\")) # False\nprint(check_String(\"Hello World\")) # False\nprint(check_String(\"a1Bcde\")) # True\nprint(check_String(\"a1b2c3d4e5\")) # True\n\n\n# Another way to solve the same problem\ndef check_String(string):\n    if any(char.isalpha() for char in string) and any(char.isdigit() for char in string):\n        return True\n    else:\n        return False\n\nprint(check_String(\"abcd1234\")) # True\nprint(check_String(\"1234\")) # False\nprint(check_String(\"Hello World\")) # False\nprint(check_String(\"a1Bcde\")) # True\nprint(check_String(\"a1b2c3d4e5\")) # True",
        "generated_testcode": "assert check_String(123abc) == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    unique_tup = []\n    for num in test_tup:\n        if num not in unique_tup:\n            unique_tup.append(num)\n    return tuple(unique_tup)\n\n#Example:\ntest_tup = (1,2,3,4,2,3,4,5,6,7,8,5)\nprint(remove_tuple(test_tup))\n# Output: (1,2,3,4,5,6,7,8)\n\n#Explanation: The duplicates have been removed from the tuple and the unique elements are returned as a tuple. ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    decimal = 0  \n    base = 1  \n    n = int(n)  \n    while n > 0:  \n        last_digit = n % 10  \n        decimal += last_digit * base  \n        base *= 8  \n        n = n // 10  \n    return decimal  \n\n#test the function  \nprint(octal_To_Decimal('17')) #Output: 15\nprint(octal_To_Decimal('7654')) #Output: 4582",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #binary search \n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n# Example usage:\narr = [1,2,3,4,4,4,4,5,6,7,7,8,9]\nx = 4\nn = len(arr)\nprint(first(arr,x,n)) # Output: 2\n\n# Explanation:\n# The element 4 is present in the array at the indices 2, 3, and 4, but we want the smallest index where it is present.\n# Therefore, we need to return 2 as the output. ",
        "generated_testcode": "assert first([1,2,3,4,4,4,5,6,7,7,8,9], 4, 7) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in test_list:\n        if len(i) != K:\n            new_list.append(i)\n    return new_list\n\n\n# Test cases\ntest_list = [(1,2,3),(4,5,6),(7,8,9,10),(11,12),(13,14,15,16,17),(\"apple\",\"banana\", \"cherry\"),(\"dog\", \"cat\", \"fish\", \"bear\")]\nprint(remove_tuples(test_list, 2)) # Output: [(7,8,9,10), ('dog', 'cat', 'fish', 'bear')]\nprint(remove_tuples(test_list, 3)) # Output: (1,2,3),(4,5,6),(11,12),(13,14,15,16,17)\nprint(remove_tuples(test_list, 4)) # Output: ()\nprint(remove_tuples(test_list, 1)) # Output: (1,2,3),(4,5,6),(11,12),(13,14,15,16,17)\n\n\n#Solution\ndef remove_tuples(test_list, K):\n    new_list = []\n    for i in test_list:\n        if len(i) != K:\n            new_list.append(i)\n    return new_list\n\n\n# Test cases",
        "generated_testcode": "assert remove_tuples([(1,2,3,4), (5,6,7,8), (9,10), (11,12,13,14), (15,16), (17,18,19,20,21)], 2) == [(1,2,3,4), (9,10), (15,16)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in range(test_tup2[1]):\n        result *= test_tup1[0]\n    return result\n\n# Test the function with test cases\nprint(find_exponentio((2,3)) # output should be 8\nprint(find_exponentio((10,2)) # output should be 100\nprint(find_exponentio((5,0)) # output should be 1\nprint(find_exponentio((10,10)) # output should be 1000000000000000\nprint(find_exponentio((2,5)) # output should be 32\nprint(find_exponentio((3,4)) # output should be 81\n",
        "generated_testcode": "assert find_exponentio((2,3) , (4,5) ) == (32, 125)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Calculate the semi-major and semi-minor axes of the ellipse\n    if a > b:\n        semimajor = a\n        semiminor = b\n    else:\n        semimajor = b\n        semiminor = a\n    semi_axes = (semimajor,semiminor)\n    # Find the maximum possible height of the triangle\n    max_height = 2 * (semimajor - semiminor * np.sqrt(1 - np.power(semiminor/semimajor,2))\n    # Find the maximum area of the triangle\n    max_area = (max_height * semimajor) * (semimajor - max_height)\n    # Find the radius of the inscribed circle\n    radius = np.sqrt(max_area/np.pi)\n    # Calculate the angle at which the triangle is inscribed\n    angle = np.arcsin(radius/semimajor)\n    # Calculate the cosine of the angle\n    cos_angle = np.cos(angle)\n    # Calculate the sine of the angle\n    sin_angle = np.sin(angle)\n    # Calculate the y-coordinate of the point where the triangle is inscribed\n    y_coord = semimajor * sin_angle\n    # Calculate the x-coordinate of the point where the triangle is inscribed\n    x_coord = semimajor * (1 - np.power(sin_angle,2))\n    # Calculate the",
        "generated_testcode": "assert largest_triangle(3, 4) == 6.0\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    power = 0\n    while (n>0): \n        n = n >> 1\n        power += 1\n    return 2**(power-1)\n\n# Testing the function \nn = 15\nprint(\"The highest power of 2 less than or equal to\",n,\"is\",highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = max(list1)\n    max_positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            max_positions.append(i)\n    return max_positions\n\n\n# Test the function with the following example list\ntest_list = [5, 2, 7, 3, 9, 1, 9, 5, 8, 1, 7, 1, 4, 3]\nprint(position_max(test_list))  # Output: [1, 4, 6]\n\n\n# Test the function with another example list\ntest_list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(position_max(test_list2))  # Output: [0, 1, 2, 3, 4, 5]\n",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if lst[1:] == lst[:-1]: \n        print(\"Yes, all elements in the list are same\") \n    else: \n        print(\"No, the elements in the list are not same\") ",
        "generated_testcode": "assert chkList([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 1:\n            new_str += char\n    return new_str\n\n# Test the function with an example string\nprint(remove_even(\"Hello, World!\")) # Output: H, l, o, r, l, !\n\n\n# Write a function to remove vowels from a string\ndef remove_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str\n\n# Test the function with an example string\nprint(remove_vowels(\"Hello, World!\")) # Output: Hll, Wrld!\n\n\n# Write a function to reverse a string\ndef reverse_string(str1):\n    return str1[::-1]\n# Test the function with an example string\nprint(reverse_string(\"Hello, World!\") # Output: !dlroW ,olleH\n\n# Write a function to count the number of vowels in a string\ndef count_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in str1:\n        if char in vowels:\n            count += 1\n    return count\n# Test the function with an example string\nprint(count_vowels(\"Hello, World!\")) #",
        "generated_testcode": "assert remove_even(123456789) == \"1357\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    xor_result = n1^n2 \n    count = 0 \n    while xor_result: \n        count += xor_result & 1\n        xor_result >>= 1\n    return count \n\n#Test the function \nprint(hamming_Distance(12,22)) ",
        "generated_testcode": "assert hamming_Distance(10, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in s : \n        if i == c : \n            count += 1\n    return count ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    tup_len = len(test_tup)\n    inversions = 0\n    for i in range(tup_len):\n        for j in range(i+1, tup_len):\n            if test_tup[i] > test_tup[j]:\n                inversions += 1\n    return inversions\n\n# Test case\ntest_tup = (2, 1, 3, 5, 4, 1)\nprint(inversion_elements(test_tup)) # Output: 6 (as (2, 1) and (3, 1) are inversions)\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(inversion_elements(test_tup)) # Output: 0 (no inversions)\n\ntest_tup = (5, 4, 3, 2, 1)\nprint(inversion_elements(test_tup)) # Output: 6 (as (5, 4) and (5, 3) are inversions)\n\ntest_tup = (1, 3, 2, 5, 4)\nprint(inversion_elements(test_tup)) # Output: 4 (as (1, 3) and (3, 2) are inversions)\n",
        "generated_testcode": "assert inversion_elements(()) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)-1):\n        result.append(str(test_tup[i]) + str(test_tup[i+1]))\n    return result\n\n#Test the function\nprint(concatenate_elements((1,2,3,4,5)) # Output: ['12', '23', '34', '45']\nprint(concatenate_elements(('a', 'b', 'c', 'd', 'e')) # Output: ['ab', 'bc', 'cd', 'de']\nprint(concatenate_elements(('a', 1, 2, 3, 4, 'b', 5)) # Output: ['a1', '12', '23', '34', '4b', 'b5']\nprint(concatenate_elements((1.0, 2.5, 3.7, 'Hello', 'World')) # Output: ['1.02.5', '2.53.7', '3.7Hello', 'HelloW', 'World'] ",
        "generated_testcode": "assert concatenate_elements((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0] * n for i in range(n)] \n    max_len = 0\n    max_count = 0\n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 1\n            max_len = 2\n            max_count = 2\n    for i in range(2, n): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                if i == j: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = 1 + dp[i+1][j-1] \n                if dp[i][j] > max_len: \n                    max_len = dp[i][j] \n                    max_count = 1\n                elif dp[i][j] == max_len: \n                    max_count += 1\n    return max_count ",
        "generated_testcode": "assert find_longest_repeating_subseq(\u201cabcabc\u201d) == 1\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(r'^\\d+\\.\\d{2}$')\n    return pattern.match(num)\n\n# Test cases\nprint(is_decimal('1.23')) # True\nprint(is_decimal('23.45')) # True\nprint(is_decimal('12.345')) # False\nprint(is_decimal('1.2345')) # False\nprint(is_decimal('12.3')) # False\nprint(is_decimal('123')) # False\nprint(is_decimal('1.2')) # False\nprint(is_decimal('12.36')) # True\nprint(is_decimal('1.20')) # False\nprint(is_decimal('1.234')) # False\nprint(is_decimal('1.235')) # True\nprint(is_decimal('1.236')) # False\nprint(is_decimal('1.2365')) # False\nprint(is_decimal('1.2350')) # False\nprint(is_decimal('1.230')) # False\nprint(is_decimal('1.23650')) # False\nprint(is_decimal('1.23500')) # False\nprint(is_decimal('1.23456')) # False",
        "generated_testcode": "assert is_decimal(123.45) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(heap)==0:\n        return None\n    else:\n        min_item=heap[0]\n        heap[0]=a\n        heapify(heap,0)\n        return min_item\n\n#heapify function to maintain the heap property\ndef heapify(heap,i):\n    l=2*i+1\n    r=2*i+2\n    smallest=i\n    if l<len(heap) and heap[l]<heap[i]:\n        smallest=l\n    if r<len(heap) and heap[r]<heap[smallest]:\n        smallest=r\n    if smallest!=i:\n        heap[i],heap[smallest]=heap[smallest],heap[i]\n        heapify(heap,smallest)\n        \n#function to delete the smallest element from the heap and insert a new item\ndef delete_min(heap):\n    if len(heap)==0:\n        return None\n    else:\n        min_item=heap[0]\n        heap[0]=heap.pop()\n        heapify(heap,0)\n        return min_item\n\n#function to insert a new item into the heap\ndef heap_insert(heap,a):\n    heap.append(a)\n    i=len(heap)-1\n    while i>0 and heap[(i-1)//2]>heap[i]:\n        heap[(i-1)//2],he",
        "generated_testcode": "assert heap_replace([1,2,3,4,5,6,7,8,9], 10) == [2,3,4,5,6,7,8,9,10]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern, string))\n\n# Test cases\nprint(is_allowed_specific_char(\"Hello123\")) # True\nprint(is_allowed_specific_char(\"Hello_world\")) # False\nprint(is_allowed_specific_char(\"12345\")) # True\nprint(is_allowed_specific_char(\"\")) # True\nprint(is_allowed_specific_char(\"A1B2c3d4\")) # False\nprint(is_allowed_specific_char(\"aBcDeFg123\")) # False",
        "generated_testcode": "assert is_allowed_specific_char(123abc) == False\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(2**n): \n        if (i & (1 << n-1) != 0) and (i & (1 << (n-2) != 0): \n            count += 1\n    return count \n\n# Test the function \nn = 3\nprint(count_Num(n)) ",
        "generated_testcode": "assert count_Num(10) == 1\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n\n#Example: \n#Input: 5\n#Output: 2255\n#Explanation: The numbers from 1 to 5 are 1, 2, 3, 4, 5 and 6 and their fourth power sum is 1^4 + 2^4 + 3^4 + 4^4 + 5^4 + 6^4 = 1 + 16 + 81 + 64 + 225 + 225 = 128\nn = int(input())\nprint(fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 2260\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Concatenate two string tuples\"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n\n# Test the function\ntup1 = ('Hello', 'World')\ntup2 = ('Python', 'Programming')\nprint(concatenate_strings(tup1, tup2))\n# Expected output: ('HelloPython', 'WorldProgramming')\n\ntup1 = ('A', 'B', 'C')\ntup2 = ('D', 'E', 'F')\nprint(concatenate_strings(tup1, tup2))\n# Expected output: ('AD', 'BE', 'CF')\ntup1 = ('I',)\ntup2 = ('am', 'learning', 'Python',)\nprint(concatenate_strings(tup1, tup2))\n# Expected output: ('Iam', 'learningPython')\n",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Convert radian to degree.\n    :param radian: a float value in radian\n    :return: a float value in degree\n    \"\"\"\n    degree = radian * 180 / 3.14159\n    return degree\n\n\n# Test the function\nprint(degree_radian(3.14159))  # Output: 180.0\nprint(degree_radian(0.0))   # Output: 0.0\nprint(degree_radian(4.712389))  # Output: 267.2609\n",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += [alist[i+1]]*alist[i]\n    return decoded_list\n\n# Test the function with an example input\nprint(decode_list([1, 2, 3, 2, 4, 1, 5, 6, 1, 3, 2, 7, 1, 8])) # Output: [2, 3, 4, 5, 6, 3, 7, 8]\n\n# Test the function with an empty list\nprint(decode_list([])) # Output: []\n\n# Test the function with a list with only single element\nprint(decode_list([2, 3])) # Output: [3]\n\n# Test the function with a list with no repeated elements\nprint(decode_list([1, 2, 3, 4])) # Output: [2, 3, 4]\n\n# Test the function with a list with negative values\nprint(decode_list([1, -2, 5, 3])) # Output: [-2, 5, 3]\n\n# Test the function with a list with 0 value\nprint(decode_list([1, 0, 2, 3])) # Output: []\n",
        "generated_testcode": "assert decode_list([\"A2\", \"B3\", \"C4\", \"D\"] == [\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"D\"])\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def check_subset(subset, superset): \n        if not subset: \n            return True\n        for item in subset: \n            if isinstance(item, list): \n                if not any(isinstance(item, list) for item in superset): \n                    return False\n                for sublist in superset: \n                    if check_subset(item, sublist): \n                        return True\n            elif item not in [elem for sublist in superset for elem in sublist]: \n                return False\n        return True\n    return check_subset(list1, list2)\n\n\n# Test cases \nprint(check_subset_list([[1,2], [3,4]], [[1,2], [3,4,5], [1,2,3]])) # True\nprint(check_subset_list([[1,2], [3,4]], [[1,2,3], [4,5]])) # False\nprint(check_subset_list([[1,2, [3,4]], [[1,2,3], [4,5]])) # False\nprint(check_subset_list([[1,2, [3,4]], [[1,2], [4,5]])) # True\nprint(check_subset_list([[1,2], [3,4], [5,6]], [[1,2,3], [4,5,6], [7,8]])) # False\nprint(check_subset_list([[1,2],",
        "generated_testcode": "assert check_subset_list([[1, 2, [3, 4]], [5, 6]], [[1, 2, [3, 4], 5, 6]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str:\n        if char_freq[char] > 1:\n            return char\n    return None\n\n# Test the function\nprint(first_Repeated_Char(\"hello world\")) # Output: None\nprint(first_Repeated_Char(\"geeksforgeeks\")) # Output: e\nprint(first_Repeated_Char(\"google\")) # Output: o\nprint(first_Repeated_Char(\"aabbcc\")) # Output: a\nprint(first_Repeated_Char(\"aabbcde\")) # Output: None\n",
        "generated_testcode": "assert first_Repeated_Char(str) == 'a' # Test case 1\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while A != B:\n        if A == 0 or B == 0:\n            return abs(A-B)\n        if A > B:\n            A -= 1\n            count += 1\n        else:\n            B -= 1\n            count += 1\n    return count\n\n#Testing the function\nprint(min_Operations(10, 4))\nprint(min_Operations(5, 3))\nprint(min_Operations(15, 12))\n\n\n#Time Complexity: O(n)\n#Space Complexity: O(1)\n\n#The time complexity is O(n) as we are iterating through the numbers until A and B become equal. The space complexity is O(1) as we are using only one variable to keep track of the count. ",
        "generated_testcode": "assert min_Operations(10, 20) == 2\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup) < K:\n        return \"Invalid input, K is greater than length of tuple\"\n    min_k = sorted(test_tup)[:K]\n    max_k = sorted(test_tup, reverse=True)[:K]\n    return min_k, max_k\n\n\n# Test the function\nprint(extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))\nprint(extract_min_max((10, 9, 8, 7, 6, 5, 4, 3, 2, 1), 2))\nprint(extract_min_max((5, 3, 2, 1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14), 5))\n\n# Output: ([1, 2, 3], [10, 9, 8])\n#        ([1, 2], [10, 9])\n#        ([5, 3, 2], [14, 13, 12])",
        "generated_testcode": "assert extract_min_max((), 0) == ()\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    special_chars = [' ',' ','.']\n    char_counts = {}\n    for char in special_chars:\n        char_counts[char] = text.count(char)\n    max_char = max(char_counts, key=char_counts.get)\n    text = text.replace(max_char,':',n)\n    return text\n\n#Example usage:\ntext = \"This is a sample text, with some spaces, and some dots....\"\nprint(replace_max_specialchar(text,2))\n# Output: This:is:a:sample:text::some:some:dots:::\n#Explanation:\n# The function counts the occurrences of spaces, commas, and dots in the given text.\n# The space and dot have the highest count, so they are replaced with a colon.\n# Since we are only replacing the maximum n occurrences, the colon is placed only twice in this case. ",
        "generated_testcode": "assert replace_max_specialchar(\"This is a test, string. It has spaces, commas, and dots.\", 2) == \"This:is:a:test,string.It:has:spaces,and:dots.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n#Test the function with some sample inputs\nprint(first_even([1,2,3,4,5,6,7,8])) # Output: 2\nprint(first_even([9,8,7,6,5,4,3,2])) # Output: 8\nprint(first_even([1,3,5,7,9])) # Output: None\nprint(first_even([10,20,30,40,50])) # Output: 10\nprint(first_even([1,3,5,7,9,10,20,30,40])) # Output: 10\n",
        "generated_testcode": "assert first_even([]), None\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(set(map(type, test_tuple)) == 1\n\n\n# Test the function\nprint(check_type((1,2,3,4,5))  # True, all elements are integers\nprint(check_type((1,2,\"hello\",3,4)) # False, there is a string element\nprint(check_type((\"hello\", \"world\")) # True, all elements are strings\nprint(check_type((\"hello\", 2, 3, \"world\")) # False, there is a mix of string and integer",
        "generated_testcode": "assert check_type(()) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n\n# Driver code\narr = [1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5]\nn = len(arr)\nx = 4\nif is_majority(arr, n, x):\n    print(x, \"is a majority element\")\nelse:\n    print(x, \"is not a majority element\")\n\n\n# Output: 4 is a majority element",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n\n#Example:\n# Input: 5\n# Output: 2\n# Explanation: \n# The binary representation of 5 is 101\n# Hence, in this case the set bits are 1 and 0, so the function returns 2\n# \n# Input: 23\n# Output: 3\n# Explanation: \n# The binary representation of 23 is 1011111\n# Hence, in this case the set bits are 1, 1, 1 and 1, so the function returns 3\n\n\n# Input: 0\n# Output: 0\n# Explanation: \n# The binary representation of 0 has no set bits, so the function returns 0\n\n\n# Input: 7\n# Output: 3\n# Explanation: \n# The binary representation of 7 is 1111\n# Hence, in this case the set bits are 1, 1, and 1, so the function returns 3\n# \n# Input: 12\n# Output: 2\n# Explanation: \n# The binary representation of 12 is 11000\n# Hence, in this case the set bits are 1 and 0, so the function returns 2\n\n\n# Input: 6\n# Output: 1\n# Explanation: \n# The",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return arr[low] \n  \n    if high == low + 1: \n        return arr[low] if arr[low] < arr[high] else arr[high] \n  \n    if high == low + 2: \n        return arr[low] if arr[low] < arr[high] else arr[high] if arr[low] > arr[low+1] else arr[low+1] \n  \n    mid = (low + high) // 2\n    if arr[mid] < arr[high]: \n        return find_Min(arr,low,mid-1) \n    return find_Min(arr,mid+1,high) \n  \n  \ndef findMin(arr,n): \n    return find_Min(arr,0,n-1) \n  \n# Driver code \narr = [15,18,19,20,25,3,4,6,12] \nn = len(arr) \nprint(findMin(arr,n)) ",
        "generated_testcode": "assert find_Min([3, 4, 5, 1, 2, 3], 0, 3) == 1\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    return new_str\n\n# Test the function\nprint(odd_values_string(\"Hello World\")) # Output: \"HloWrd\"\nprint(odd_values_string(\"Python\")) # Output: \"Pyto\"\nprint(odd_values_string(\"1234567890\")) # Output: \"13579\"\nprint(odd_values_string(\"abcdefghijklmnopqrstuvwxyz\")) # Output: \"acegikmoqsuz\"",
        "generated_testcode": "assert odd_values_string(None) == None\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n\n# Test the function with some values\nprint(min_of_three(5,7,3))\nprint(min_of_three(10,20,3))\nprint(min_of_three(8,8,8))\nprint(min_of_three(10,5,15))\n\n\n# Define a function to find the maximum of three numbers\ndef max_of_three(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n\n# Test the function with some values\nprint(max_of_three(5,7,3))\nprint(max_of_three(10,20,3))\nprint(max_of_three(8,8,8))\nprint(max_of_three(10,5,15))\n\n\n# Define a function to find the sum of two numbers\ndef sum_of_two(a,b):\n    return a+b\n\n# Test the function with some values\nprint(sum_of_two(5,7))\nprint(sum_of_two(10,20))\nprint(sum_of_two(8,8))\nprint(sum_of_two(10,-5))\n\n\n# Define a function to find the average of three",
        "generated_testcode": "assert min_of_three(10,20,30) == 10\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    #Function to check if all the bits are set or not\n    def all_bits_set(num):\n        count = 0\n        for i in range(32):\n            if num & (1 << i):\n                count += 1\n        if count == 32:\n            return True\n        else:\n            return False\n\n    #Iterating through the given range and checking if all the bits are unset or not\n    for i in range(l,r+1):\n        if all_bits_set(n & i):\n            return False\n    return True\n\n#Driver code\nn = 10\nl = 2\nr = 7\nif all_Bits_Set_In_The_Given_Range(n,l,r):\n    print(\"All bits are set\")\nelse:\n    print(\"All bits are unset\")",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Code here\n    neg_list = []\n    pos_list = []\n    for i in arr:\n        if i < 0:\n            neg_list.append(i)\n        else:\n            pos_list.append(i)\n    return neg_list + pos_list\n\n\n# Test the function\narr = [-12, 11, -13, -5, 6, -7, 8, -9, 10, -3, 12]\nprint(re_arrange_array(arr, len(arr)))\n\n",
        "generated_testcode": "assert re_arrange_array([1, 2, -3, 4, -5, 6, -7, 8, -9, 10] , 7) == [-3, -5, -7, -9, 1, 2, 4, 6, 8, 10]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str1 = str1.replace(\" \",\"\")\n    return str1.replace(\" \",\"char\")\n\n#Test the function\nprint(replace_blank(\"hello world\",\"*\"))\n# Output: \"helloworld\"\n\n#Explanation: The function replaces all the blank spaces with the character \"*\" in the string \"hello world\"\n\n\n#Test the function\nprint(replace_blank(\"   hello world   \",\"-\"))\n# Output: \"-----hello-world-----\"\n#Explanation: The function replaces all the blank spaces with the character \"-\" in the string \"   hello world   \"",
        "generated_testcode": "assert replace_blank(\"hello world\", \"*\" ) == \"hello*world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0]*n \n    dp[0] = tri[0][0] \n    dp[1] = tri[0][1] \n\n    for i in range(2, n): \n        for j in range(i + 1): \n            if j == 0: \n                dp[j] = max(tri[i][j], dp[j]) \n            elif j == i: \n                dp[j] = max(tri[i][j], dp[j - 1]) \n            else: \n                dp[j] = max(tri[i][j] + dp[j - 1], dp[j]) \n\n    return dp[n - 1] ",
        "generated_testcode": "assert max_sum(\n    [\n        [1, 3, 5, 7, 9],\n        [1, 5, 9, 13, 15],\n        [4, 7, 10, 12, 16],\n        [6, 11, 14, 17, 20]\n    ], 3) == 37\n\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort()\n    return list1[-n:]\n\n#Testing the function\nlist1=[4,8,3,5,7,1,6,2,9,0,4]\nn=3\nprint(larg_nnum(list1,n))\n\n\n#Output: [9,8,7]\n\n\n#Testing with another dataset\nlist2=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn=5\nprint(larg_nnum(list2,n))\n\n#Output: [20,19,18,17,16,15]\n",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10], 3) == [9,8,7]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 2 * 3.14159 * r * (r + h)\n    return area\n\n# Test the function with different values of r and h\nprint(lateralsuface_cylinder(5, 10)) # should return 196.85\nprint(lateralsuface_cylinder(7, 6)) # should return 140.85\n\n\n# Write a function to find the surface area of a sphere\ndef surface_sphere(r):\n    area = 4 * 3.14159 * r**2\n    return area\n\n# Test the function with different values of r\nprint(surface_sphere(5)) # should return 314.1592653589793\nprint(surface_sphere(7)) # should return 54.571056750135\n\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    volume = 4/3 * 3.14159 * r**3\n    return volume\n\n# Test the function with different values of r\nprint(volume_sphere(5)) # should return 523.5981\nprint(volume_sphere(7)) # should return 995.13337\n\n\n# Write a function to find the lateral surface area of a cube\ndef lateralsuface_cube(a):\n",
        "generated_testcode": "assert lateralsuface_cylinder(5,10) == 314.1592653589793\nprint(\"Test case 1 passed\")\n\n# Write a function to find the lateral surface area of a sphere\ndef lateralsuface_sphere(r):\n    pass\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    return l ** 3\n\n\n#Test the function with an input of 2\nprint(volume_cube(2))\n\n#Test the function with an input of 3\nprint(volume_cube(3))\n\n#Test the function with an input of 4\nprint(volume_cube(4))\n\n#Test the function with an input of 5\nprint(volume_cube(5))",
        "generated_testcode": "assert volume_cube(2) == 8\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = bin(n)\n    even_bit = \"\"\n    for i in range(len(n)-2):\n        if n[i] == '1':\n            even_bit += \"0\"\n        else:\n            even_bit += \"1\"\n    return int(even_bit, 2)\n\n\n# Test the function with input\nprint(even_bit_set_number(7)) # output: 10\nprint(even_bit_set_number(20)) # output: 14\nprint(even_bit_set_number(13)) # output: 10\nprint(even_bit_set_number(10)) # output: 10",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n=N//3\n    count=0\n    while n>=1:\n        count+=K*n*(n-1)*(n-2)//2\n        n-=1\n    return count\nN=int(input())\nK=int(input())\nprint(No_of_Triangle(N,K))\n\n#testcase\nN=6\nK=2\nprint(No_of_Triangle(N,K)) #output: 36\n\nN=8\nK=2\nprint(No_of_Triangle(N,K)) #output: 72\n\nN=10\nK=2\nprint(No_of_Triangle(N,K)) #output: 150\n\nN=15\nK=3\nprint(No_of_Triangle(N,K)) #output: 760\n\nN=20\nK=4\nprint(No_of_Triangle(N,K)) #output: 6300\n\n#Explanation:\n#In the first testcase, a regular triangle of size 6 with 2 equilateral triangles can be formed with sides of 3,3,3.\n#In the second testcase, a regular triangle of size 8 with 2 equilateral triangles can be formed with sides of 4,4,4, 3,4,4, and 4,4,3.\n#In the third testcase, a regular triangle of size 10 with 3 equilateral",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dict_count = {}\n    for i in range(len(test_list)):\n        if test_list[i][1] in dict_count:\n            dict_count[test_list[i][1]].append(test_list[i][0])\n        else:\n            dict_count[test_list[i][1]] = [test_list[i][0]]\n\n    for key in dict_count:\n        if len(set(dict_count[key])) > 1:\n            return False\n    return True\n\ntest_list = [(1, 10), (2, 20), (3, 20), (4, 30), (5, 10), (6, 20)]\nprint(check_occurences(test_list))  # Output: False\n\ntest_list = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 10), (6, 20)]\nprint(check_occurences(test_list))  # Output: True\n\ntest_list = [(1, 10), (2, 20), (3, 20), (4, 30), (5, 10), (6, 20), (7, 40)]\nprint(check_occurences(test_list))  # Output: True\n\ntest_list = [(1, 10), (2, 20), (3",
        "generated_testcode": "assert check_occurences([(1,2,3),(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(7,8,9),(7,8,9),(7,8,9)] ) == 3\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count\n\n#test the function \nprint(number_of_substrings(\"abc\")) # Output: 3\nprint(number_of_substrings(\"\")) # Output: 0\nprint(number_of_substrings(\"a\")) # Output: 1\nprint(number_of_substrings(\"abcd\")) # Output: 6\nprint(number_of_substrings(\"abcdabcd\")) # Output: 14\n",
        "generated_testcode": "assert number_of_substrings(None) == 0\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    dp = [1] * (m+1)\n    for i in range(2, m+1):\n        dp[i] = 2 * dp[i-1]\n    for i in range(2, n):\n        for j in range(2, m):\n            dp[j] += dp[j-1] + dp[j] * (m-j)\n    return dp[m]\n\n# Example usage:\nm = 10\nn = 5\nprint(get_total_number_of_sequences(m, n)) # Output: 76\n\nm = 5\nn = 10\nprint(get_total_number_of_sequences(m, n)) # Output: 336\n\nm = 5\nn = 100\nprint(get_total_number_of_sequences(m, n)) # Output: 378667\n",
        "generated_testcode": "assert get_total_number_of_sequences(10, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1[-1]=list2\n    return list1\n\n#Test the function\na=[1,2,3,4,5]\nb=[6,7,8,9]\nprint(replace_list(a,b)) # Output should be [1,2,3,9]\nprint(a) # Output should be [1,2,3,9]\n\n\n# Write a function to reverse a list using a for loop\ndef reverse_list(lst):\n    lst.reverse()\n    return lst\n\n#Test the function\na=[1,2,3,4,5]\nprint(reverse_list(a)) # Output should be [5,4,3,2,1]\nprint(a) # Output should be [5,4,3,2,1]\n\n\n# Write a function to check if a list is sorted in ascending order\ndef check_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            return False\n        else:\n            return True\n#Test the function\nprint(check_sorted([1,2,3,4,5,6,7])) # Output should be True\nprint(check_sorted([5,4,3,2,1,6,7]) # Output should be False\n\n\n# Write a function to concatenate two lists\ndef concatenate_lists(list1,list2):\n    list1.extend(list2)\n    return list1\n#Test the function\na",
        "generated_testcode": "assert replace_list([\"apple\",\"banana\",\"orange\",\"grape\"],[\"kiwi\",\"mango\",\"strawberry\"]) == [\"apple\",\"banana\",\"mango\"]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            col = []\n            for k in range(o):\n                col.append('*')\n            arr.append(col)\n    return arr\n\n# Test the function\nm = 3\nn = 4\no = 5\nprint(array_3d(m,n,o))\n# Output: [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]\nm = 2\nn = 2\no = 3\nprint(array_3d(m,n,o))\n# Output: [['*', '*', '*'], ['*', '*', '*']]\n\n# Explanation:\n# The function first creates an empty list called 'arr'. Then it loops through each row and appends a new list to it.\n# Each new list is then filled with 'o' number of '*'. This is done for each row 'm' times.\n# Finally, the function returns the 3d array with '*' as the element. ",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"Hello World\")) # Output: 10\nprint(count_charac(\"Python\")) # Output: 6\nprint(count_charac(\"\")) # Output: 0\nprint(count_charac(\"123456\")) # Output: 4\n\n\n# Better solution:\ndef count_charac(str1):\n    return len(str1)\n# Test the function\nprint(count_charac(\"Hello World\")) # Output: 10\nprint(count_charac(\"Python\")) # Output: 6\nprint(count_charac(\"\")) # Output: 0\nprint(count_charac(\"123456\")) # Output: 4\n\n\n# The built-in function len() in Python returns the length of a string.\n# It is a more efficient and recommended way to count the number of characters in a string. ",
        "generated_testcode": "assert count_charac(None) == 0\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in lst:\n        if i[0] in freq:\n            freq[i[0]] += 1\n        else:\n            freq[i[0]] = 1\n    return sorted(lst, key=lambda x: freq[x[0]], reverse=True) \n\n#Example usage:\nlst = [(1, 'a', 2), (1, 'b', 3), (2, 'c', 4), (2, 'd', 5), (1, 'e', 6), (3, 'f', 7), (2, 'g', 8)]\nprint(sort_on_occurence(lst))\n\n#Output: [(1, 'a', 2), (1, 'e', 6), (1, 'b', 3), (2, 'c', 4), (2, 'd', 5), (2, 'g', 8), (3, 'f', 7)]\n\n#Explanation:\n#The function counts the frequency of each element in the first position of the tuples using a dictionary and sorts the list based on it. ",
        "generated_testcode": "assert sort_on_occurence([(1,2), (2,3), (1,4), (3,5), (1,6), (2,7)] ) == [(1,2), (1,4), (1,6), (2,3), (2,7)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Convert N into a string so that we can use ord() function to find its ASCII value \n    str_N = str(N) \n    # Find the length of the string \n    len_N = len(str_N) \n    # Initialize the next perfect square as -1 \n    next_perfect_square = -1\n    # Convert the ASCII value of last digit of N to integer \n    last_digit = int(ord(str_N[-1]) + 1)\n    # If last digit is greater than 57, then the next perfect square does not exist \n    if last_digit > 57: \n        return \"No next perfect square exists\"\n    # If last digit is 9, then add 1 to the last digit and find the square of the sum of the digits in the given number \n    elif last_digit == 57: \n        sum_of_digits = sum(int(i) for i in str_N) \n        next_perfect_square = sum_of_digits**2 \n    else: \n        # Add 1 to the last digit and find the square of the sum of the digits in the given number \n        sum_of_digits = sum(int(i) for i in str_N[:-1]) + last_digit \n        next_perfect_square = sum_of_digits**2 \n    # If the sum of digits is even, add 1 to the last digit and find the square of the sum of digits \n",
        "generated_testcode": "assert next_Perfect_Square(10) == 13\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a table to store the maximum sum for sub-sequences ending at each index i \n    # and their corresponding length of the sub-sequence \n    max_sum = [0 for i in range(n)] \n    max_length = [1 for i in range(n)] \n  \n    # initialize max_sum[0] and max_length[0] \n    max_sum[0] = arr[0] \n    max_length[0] = 1\n  \n    # initialize max_sum[1] and max_length[1] \n    if arr[1] > arr[0]: \n        max_sum[1] = arr[1] \n    else: \n        max_sum[1] = arr[0] \n        max_length[1] = 1\n  \n  \n    # loop for i = 2 to n-1 \n    for i in range(2, n): \n        # check if the current element is greater than the previous element \n        if arr[i] > arr[i - 1]: \n            # if it is greater, then it can be a part of a new sub-sequence \n            if arr[i] + max_sum[i - 1] > arr[i]: \n                max_sum[i] = max_sum[i - 1] + arr[i] \n                max_length[i] = max_length[i - 1] + 1\n            else: \n                max_sum[i",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 25\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n\n    :param number: the number to compute the square root of\n    :return: the square root of the number\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The input must be a non-negative number\")\n\n    if number == 0 or number == 1:\n        return number\n\n    x0 = number\n    x1 = (x0 + 1) / 2\n    while abs(x1 - x0) >= 0.00001:\n        x0 = x1\n        x1 = (x0 + number / x0) / 2\n    return x1\n\n\n# Test the function\nprint(babylonian_squareroot(9))\nprint(babylonian_squareroot(16))\nprint(babylonian_squareroot(2))\nprint(babylonian_squareroot(0))\nprint(babylonian_squareroot(1))\nprint(babylonian_squareroot(25))\nprint(babylonian_squareroot(-5))\n\n",
        "generated_testcode": "assert babylonian_squareroot(2) == 1.414213562373095238095\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    # Create a table to store the length of the longest palindromic subsequence of all substrings\n    lps = [[0] * n for _ in range(n)] \n\n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        lps[i][i] = 1\n\n    # All substrings of length 2 are palindromes if the first and the last characters are the same \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            lps[i][i+1] = 2\n\n    # Initialize length of longest palindromic subsequence \n    maxLength = 2\n\n    # All other substrings of length greater than 2 \n    for clen in range(3, n+1): \n        for i in range(n-clen+1): \n            j = i+clen-1\n            if str[i] == str[j] and clen == 2: \n                lps[i][j] = 2\n            elif str[i] == str[j]: \n                lps[i][j] = lps[i+1][j-1] + 2\n            else: \n                lps[i][j] = max(lps[i+1][j], lps[i][j-1]) \n            # Check for substrings of length greater than ",
        "generated_testcode": "assert lps(input(\"Enter a string: \")) == \"racecar\" # Test case 1\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    sum = 0.0\n    for i in range(1, n):\n        sum += 1.0/i\n    return sum\n\nprint(harmonic_sum(5)) # Output: 2.1833333\nprint(harmonic_sum(10)) # Output: 2.828334\n",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(set(array_nums1) & set(array_nums2))\n\nprint(intersection_array([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11])\n# Output: [4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11]) == [4,5,6,7,8,9]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count \n\n# Test the function \ntup = (1,2,3,4,5,6,7,8,5,5,5,9,5)\nprint(count_X(tup,5)) # Output: 3\n\n\n#Alternative solution\ndef count_X(tup, x):\n    return tup.count(x)\n\n#Test the function\ntup = (1,2,3,4,5,6,7,8,5,5,5,9,5)\nprint(count_X(tup,5)) # Output: 3\n\n\n#Another alternative solution\ndef count_X(tup, x):\n    return sum(1 for i in tup if i == x)\n\n#Test the function\ntup = (1,2,3,4,5,6,7,8,5,5,5,9,5)\nprint(count_X(tup,5)) # Output: 3\n\n\n#Another alternative solution using list comprehension\ndef count_X(tup, x):\n    return len([i for i in tup if i == x])\n#Test the function\ntup = (1,2,3,4,5,6,7,8,5,5,5,9,5)\nprint(count_X(tup,5)) # Output: 3",
        "generated_testcode": "assert count_X((\"abc\", \"a\") == 1)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n#test the function with an example list\nprint(insert_element([1,2,3,4], 0)) # expected output: [0,1,0,2,0,3,0,4]\n",
        "generated_testcode": "assert insert_element([\"apple\", \"banana\", \"cherry\", \"date\"], \"orange\") == [\"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"cherry\", \"orange\", \"date\"]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    for i in numbers:\n        r = math.sqrt(i.real**2 + i.imag**2)\n        theta = math.degrees(math.atan(i.imag/i.real))\n        print(r, theta)\n\n#Example:\nconvert([1+2j, -3+4j, 5+6j])\n#Output:\n#2.23606769690756 31.5251047375428\n#5.53444486677843 44.216973960924\n#7.6923462401464 53.130614650831\n\n#Note: The output should be in the format r,theta where r is the magnitude of the complex number and theta is the angle in degrees. ",
        "generated_testcode": "assert convert(1+2j) == (2.23606765, 1.1071473)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n#Test the function with the following list\nlist1 = [1, 2, \"hello\", 3, \"world\", 4, 5, 6, 7, \"goodbye\", \"python\", 8, \"9\"]\nprint(count_integer(list1)) # Output: 4\n\nlist2 = [10, 11, 12, 13, 14, \"15\", \"16\", \"17\", \"18\", \"19\", 20, \"21\"]\nprint(count_integer(list2)) # Output: 4\nlist3 = [\"apple\", \"banana\", \"cherry\", 3.14, True, False, \"orange\", \"grape\", \"kiwi\", \"strawberry\"]\nprint(count_integer(list3)) # Output: 1\nlist4 = [\"100\", 20, \"30\", \"40\", 50, \"60\", 70, \"80\", \"90\", \"100\"]\nprint(count_integer(list4)) # Output: 1\nlist5 = [1, \"2\", 3, 4, \"5\", 6, 7, 8, \"9\", 10]\nprint(count_integer(list5)) # Output: 3\n\n",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] in ['a', 'e']:\n            result.append(word)\n    return result\n\n# Test cases\nprint(words_ae(\"Apple is great, I love it.\")) # Output: ['Apple', 'I', 'love']\nprint(words_ae(\"Hello world!\")) # Output: []\nprint(words_ae(\"We are learning programming.\")) # Output: ['We', 'learning']\nprint(words_ae(\"The quick brown fox jumps over the lazy dog.\")) # Output: ['The', 'quick', 'brown', 'jumps', 'the']\n",
        "generated_testcode": "assert words_ae(text=\"apple banana orange grapefruit\") == ['apple', 'orange']\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    red_colors = l[0]\n    blue_colors = l[1]\n    green_colors = l[2]\n    result = []\n    for i in range(n):\n        red = list(itertools.combinations_with_replacement(red_colors, i+1))\n        blue = list(itertools.combinations_with_replacement(blue_colors, i+1))\n        green = list(itertools.combinations_with_replacement(green_colors, i+1))\n        result.extend(list(itertools.product(red, blue, green)))\n    return result\n\n# Example usage:\nl = [\"red\", \"blue\", \"green\"]\nn = 2\nprint(combinations_colors(l, n))\n\n# Output: [('red', 'blue', 'green'), ('red', 'blue'), ('red', 'green'), ('blue', 'green'), ('red', 'red', 'blue', 'green'), ('red', 'red', 'green'), ('blue', 'blue', 'green'), ('red', 'blue'), ('red', 'green'), ('blue', 'green'), ('green', 'green')]\n\n# Another example:\nl = [\"red\", \"blue\", \"green\", \"yellow\"]\nn = 3\nprint(combinations_colors(l, n))\n# Output: [('red', 'blue', 'green'), ('red', 'blue', 'yellow'), ('red', 'green', 'yellow'), ('blue', 'green', 'yellow'), ('red",
        "generated_testcode": "assert combinations_colors([\"red\", \"blue\", \"green\"], 2) == [\"red\", \"red\", \"blue\", \"blue\", \"green\", \"green\"]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def is_prime(num):\n        if num == 1:\n            return False\n        elif num == 2:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(num ** 0.5) + 1, 2):\n                if num % i == 0:\n                    return False\n            return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n# test the function\nn = 100\nprint(count_Primes_nums(n)) ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a + b\n    b = a - b\n    a = a - b\n    return a,b\n\n# Test the function with some inputs\nprint(swap_numbers(10,5))\nprint(swap_numbers(20,15))\nprint(swap_numbers(100,20))\n\n\n# The output of the function would be:\n# (5, 10)\n# (15, 20)\n# (20, 10) ",
        "generated_testcode": "assert swap_numbers(10,20) == (20,10)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2!=0, array_nums))\n\n# Test the function with a sample list\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(count_odd(arr))\n\n# Output: 5 ",
        "generated_testcode": "assert count_odd(list(range(1, 10)) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2\n\n# test cases\nprint(maximize_elements((2, 3), (5, 6))) # should print (5, 6)\nprint(maximize_elements((4, 1), (4, 4))) # should print (4, 4)\nprint(maximize_elements((3, 4), (2, 7))) # should print (3, 4)\n\n\n# Note that if both tuples have the same values, we return the first tuple\nprint(maximize_elements((5, 5), (4, 4))) # should print (5, 5)\n\n# edge cases\nprint(maximize_elements((-2, -5), (3, 10)) # should print (3, 10)\nprint(maximize_elements((0, 0), (0, 0)) # should print (0, 0)\nprint(maximize_elements((-5, 0), (0, -5)) # should print (-5, -5)",
        "generated_testcode": "assert maximize_elements((1,2,3,4,5,6,7,8) , (9,10,11,12,13,14) ) == (14,14)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # The function to generate the nth newman-shanks-williams prime number using the Sieve of Sundaram method\n    def sundaram_sieve(limit):\n        # Initializing the boolean array to mark the numbers\n        n = (limit-1)//2\n        is_prime = [True]*(n+1)\n\n        # Marking the non-prime numbers in the array\n        for i in range(1, n+1):\n            j = i\n            while (i+j+i**2<=(n):\n                is_prime[i+j+i**2] = False\n                j += 1\n\n        # Converting the boolean array to list of primes\n        primes = [2*i+1|is_prime[i] for i in range(1,n) if is_prime[i]]\n        return primes\n\n    # Return the nth prime number\n    return sundaram_sieve(n)[n-1]\n\n# Test the function\nprint(newman_prime(10)) # Output: 10201\nprint(newman_prime(20)) # Output: 36755\nprint(newman_prime(30)) # Output: 69781\nprint(newman_prime(40)) # Output: 131389\nprint(newman_prime(50)) # Output: 250785\nprint(newman_prime(100)) # Output: 6",
        "generated_testcode": "assert newman_prime(1) == 2\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # check if the second tuple contains only one element and it is not zero\n    if len(test_tup2) == 1 and test_tup2[0] != 0:\n        result = [x / test_tup2[0] for x in test_tup1]\n        return result\n    else:\n        return None\n\n# test the function\ntup1 = (10, 20, 30)\ntup2 = (5,)\nprint(division_elements(tup1, tup2))  # Output: [2.0, 4.0, 6.0]\n\ntup1 = (10, 20, 30, 40)\ntup2 = (5,)\nprint(division_elements(tup1, tup2))  # Output: None\ntup1 = (10, 20, 30)\ntup2 = (0,)\nprint(division_elements(tup1, tup2))  # Output: None\n\n\n# Edge case\ntup1 = (10, 20, 30)\ntup2 = (0,)\nprint(division_elements(tup1, tup2))  # Output: None\n\n# Updated function\ndef division_elements(test_tup1, test_tup2):\n    # check if the second tuple contains only one element\n    if len(test_tup2) == 1:\n       ",
        "generated_testcode": "assert division_elements((10, 2) == 5\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    part1 = []\n    part2 = []\n    for i in range(L):\n        part1.append(list1[i])\n    for i in range(L, len(list1)):\n        part2.append(list1[i])\n    return part1, part2\n\n\n# Test the function with a list of numbers\nlist1 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nL = 5\nprint(split_two_parts(list1, L))\n\n# Output: ([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13])\n\n# Test the function with a list of strings\nlist1 = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\", \"strawberry\"]\nL = 3\nprint(split_two_parts(list1, L))\n\n# Output: (['apple', 'banana', 'cherry'], ['orange', 'grape', 'kiwi', 'mango', 'strawberry'])\n\n# Test the function with a list of mixed data types\nlist1 = [1, \"hello\", True, 3.14, \"world\", 7, 8]\nL = 3\nprint(split_two_parts(list1, L))\n\n# Output: ([1",
        "generated_testcode": "assert split_two_parts([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], 3) == ([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Merge two dictionaries and return a new dictionary with combined key-value pairs\n    :param d1: first dictionary\n    :param d2: second dictionary\n    :return: merged dictionary\n    \"\"\"\n    merged_dict = {}\n    for k,v in d1.items():\n        merged_dict[k] = v\n    for k,v in d2.items():\n        if k in merged_dict:\n            merged_dict[k] += v\n        else:\n            merged_dict[k] = v\n    return merged_dict\n\n\n# Test the function\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'a': 3, 'd': 4, 'e': 5}\nprint(merge_dict(d1, d2)) # {'a': 4, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n",
        "generated_testcode": "assert merge_dict({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return h_age * 7\n\n# Test the function with a few values\nprint(dog_age(1)) # Should return 7\nprint(dog_age(2)) # Should return 14\nprint(dog_age(10)) # Should return 70\n\n\n# Write a function to calculate the age of a cat in cat's years\ndef cat_age(c_age):\n    return c_age * 15\n\n# Test the function with a few values\nprint(cat_age(1)) # Should return 15\nprint(cat_age(2)) # Should return 30\nprint(cat_age(10)) # Should return 150\n\n\n# Write a function to calculate the age of a frog in frog's years\ndef frog_age(f_age):\n    return f_age * 5\n\n# Test the function with a few values\nprint(frog_age(1)) # Should return 5\nprint(frog_age(2)) # Should return 10\nprint(frog_age(10)) # Should return 50\n\n\n# Write a function to calculate the age of a fish in fish's years\ndef fish_age(f_age):\n    return f_age * 5\n\n# Test the function with a few values\nprint(fish_age(1)) # Should return 5\nprint(fish_age(2)) # Should return 10\nprint(fish_age(10)) # Should return 5",
        "generated_testcode": "assert dog_age(1) == 15 # A dog that is 1 human year old is 15 dog years old.\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n#Example usage:\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(list_split(S, 3)) # [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\nS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nprint(list_split(S, 2)) # [['a', 'b'], ['c', 'd', 'e'], ['f', 'g', 'h'], ['i']]\n\n#Can you modify the function to take any step value, not just steps of 3?\ndef list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(list_split(S, 2)) # [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\nS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nprint(",
        "generated_testcode": "assert list_split(range(1, 10), 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 6 * l ** 2\n\n\n# Test the function with an example\nprint(lateralsurface_cube(3)) # Output: 54\n\n\n# Test the function with another example\nprint(lateralsurface_cube(10)) # Output: 600\n\n\n# Test the function with another example\nprint(lateralsurface_cube(1)) # Output: 6\n\n\n# Test the function with another example\nprint(lateralsurface_cube(4.5) # Output: 36\n",
        "generated_testcode": "assert lateralsurface_cube(2) == 12\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n\n# Test the function\nprint(square_Sum(5)) # Output: 55 (1^2 + 3^2 + 5^2 + 7^2 + 9^2 + 111^2) = 55\nprint(square_Sum(10)) # Output: 225 (1^2 + 3^2 + 5^2 + 7^2 + 9^2 + 111^2 + 13^2 + 15^2 + 17^2 + 19^2 + 21^2 + 23^2 + 25^2 + 27^2 + 29^2) = 225\n",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    start = 1\n    for i in range(1, n+1):\n        start *= i\n    return start\n\n# test the function\nprint(find_star_num(5))  # Output: 120\nprint(find_star_num(7))  # Output: 5040\nprint(find_star_num(10)) # Output: 362888000\n\n# Note: The function uses the formula for the n'th star number, which is n!",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return ord(k)\n\n#Test the function\nprint(ascii_value('a'))  # Output: 97\nprint(ascii_value('b'))  # Output: 98\nprint(ascii_value('A'))  # Output: 65\nprint(ascii_value('B'))  # Output: 66\nprint(ascii_value('@'))  # Output: 64\nprint(ascii_value('!'))  # Output: 33\n\n\n#Alternate solution using the built-in chr() function\ndef ascii_value_alt(k):\n    return ord(k)\n\n#Test the function\nprint(ascii_value_alt(97))  # Output: 97\nprint(ascii_value_alt(98))  # Output: 98\nprint(ascii_value_alt(65))  # Output: 65\nprint(ascii_value_alt(66)  # Output: 66\nprint(ascii_value_alt(64)  # Output: 64\nprint(ascii_value_alt(33)  # Output: 33\n",
        "generated_testcode": "assert ascii_value(chr(65) == 65\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_even = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n\n#Example:\narr = [2, 3, 4, 6, 8, 10, 12, 14, 16]\nn = 5\nprint(sum_even_and_even_index(arr, n)) # Output: 20 (4 + 12 + 14 = 30) ",
        "generated_testcode": "assert sum_even_and_even_index([2, 5, 12, 8, 9, 3, 14, 110, 16], 6) == 20\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2,n+1,2): \n        sum += i**5\n    return sum ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [(x[0], x[1], x[2]) for x in test_list if x[2] == max([t[2] for t in test_list])]\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 2), (9, 10, 1), (11, 12, 7), (13, 14, 3), (15, 16, 4)]\nprint(rear_extract(test_list))\n\n# Output: [(15, 16, 4)]\n\ntest_list = [(1, 2, 7), (4, 5, 9), (7, 8, 3), (9, 10, 10), (11, 12, 10), (13, 14, 10), (15, 16, 9)]\nprint(rear_extract(test_list))\n\n# Output: [(15, 16, 9)]\n",
        "generated_testcode": "assert rear_extract([(1,2,3),(4,5,6),(7,8,9)] ) == 9\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n\n# Test the function with some inputs\nprint(substract_elements((1,2,3,4,5),(2,4,6,8)) # Output: (-1, -2, -2)\nprint(substract_elements((10,20,30,40),(5,15,25)) # Output: (5, 5, 15)\nprint(substract_elements((5,10,15,20),(0,5,10)) # Output: (5, 5, 10)\n\n# Write a function to convert a list of tuples to a dictionary\ndef list_to_dict(test_list):\n    result_dict = {}\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            result_dict[test_list[i][0]] = test_list[i][1]\n    return result_dict\n\n# Test the function with some inputs\nprint(list_to_dict([('apple', 2), ('banana', 4), ('orange', 6), ('mango', 8)]) # Output: {'apple': 2, 'banana': 4, 'orange': 6, 'mango': 8}\n",
        "generated_testcode": "assert substract_elements((1,2,3,4,5,6,7,8,9), (1,2,3,4,5,6,7) == (8,9)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initializing the sum variable to zero\n    sum = 0\n    # loop through all possible values of r from 0 to n\n    for r in range(n+1):\n        # calculate the binomial coefficient and check if r is even\n        if r % 2 == 0:\n            # calculate the binomial coefficient\n            coefficient = binomial_coefficient(n,r)\n            # add the binomial coefficient to the sum\n            sum += coefficient\n    return sum\n\n# recursive function to calculate binomial coefficient\ndef binomial_coefficient(n, r): \n    # base case\n    if r == 0 or r == n:\n        return 1\n    # recursive case\n    else:\n        return (binomial_coefficient(n-1, r-1) + binomial_coefficient(n-1, r)) \n\n# testing the function\nn = 10\nprint(even_binomial_Coeff_Sum(n))\n# output: 2037\n",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(m):\n        result.append(a[n-i-1])\n    return result[0]\n\n# Testing the function\na = [1,2,3,4,5,6,7,8,9,10]\nn = 7\nm = 3\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 7\nm = 2\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 5\nm = 3\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 6\nm = 2\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 7\nm = 4\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 8\nm = 3\nprint(get_Position(a,n,m))\n\na = [1,2,3,4,5,6",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 5, 3) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    return pi * r**2 * h\n\n# Test the function\nprint(volume_cylinder(5, 10)) # Output: 314.159\nprint(volume_cylinder(2, 7)) # Output: 9.425\nprint(volume_cylinder(10, 3)) # Output: 157.07\nprint(volume_cylinder(1, 6)) # Output: 15.707\n\n\n# Alternatively, we can write the function using a formula for the volume of a cylinder\ndef volume_cylinder_alt(r,h):\n    return r**2 * pi * h\n\n# Test the function\nprint(volume_cylinder_alt(5, 10)) # Output: 314.159\nprint(volume_cylinder_alt(2, 7)) # Output: 15.707\nprint(volume_cylinder_alt(10, 3)) # Output: 150.399",
        "generated_testcode": "assert volume_cylinder(5,10) == 3141.599\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return {k: v for k, v in dict.items() if v >= n}\n\n\n#test case\ndict = {'a': 5, 'b': 10, 'c': 3, 'd': 8, 'e': 12, 'f': 6}\nn = 5\nprint(dict_filter(dict,n))\n# output: {'a': 5, 'b': 10, 'e': 12}\n\n\ndict = {'a': 2, 'b': 4, 'c': 6, 'd': 8, 'e': 10}\nn = 5\nprint(dict_filter(dict,n))\n# output: {'b': 4, 'd': 8, 'e': 10}\n\n\ndict = {'a': 1, 'b': 7, 'c': 10, 'd': 9, 'e': 2}\nn = 5\nprint(dict_filter(dict,n))\n# output: {}\n\n\ndict = {'a': 5, 'b': 10, 'c': 3, 'd': 8, 'e': 12, 'f': 6}\nn = 8\nprint(dict_filter(dict,n))\n# output: {'a': 5, 'b': 10, 'd': 8, 'e': 12}\n\n\ndict = {'a': 10, 'b': 5, 'c': ",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i][0] != test_tup[i+1][0]:\n            return count\n        else:\n            count += 1\n    return count\n\n# Test the function with a sample tuple\ntest_tup = (('A', 10), ('B', 5), ('C', 8), ('D', 3), ('A', 7), ('E', 4), ('B', 9), ('C', 6))\nprint(count_first_elements(test_tup))  # Output: 2\n\n\n# Test the function with a sample tuple\ntest_tup2 = (('A', 10), ('A', 5), ('C', 8), ('D', 3), ('B', 7), ('A', 4), ('E', 9), ('C', 6), ('A', 2), ('B', 1), ('C', 4))\nprint(count_first_elements(test_tup2))  # Output: 5\n\n\n# Test the function with a sample tuple\ntest_tup3 = (('A', 10), ('A', 5), ('C', 8), ('B', 3), ('A', 7), ('E', 4), ('B', 9), ('C', 6))\nprint(count_first_elements(test_tup3))  # Output: 0\n\n\n# Test",
        "generated_testcode": "assert count_first_elements(()) == 0\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (n * (2 * n - 1) * (11 - 2 * n) == 0) ",
        "generated_testcode": "assert is_num_decagonal(1) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Search an element in a list using Sequential Search Algorithm\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n\n# Test the function\narray = [12, 45, 78, 67, 90, 12, 45, 89, 12, 34, 56, 78, 123]\nprint(\"List:\", array)\nelement = 12\nprint(\"Element to search:\", element)\nindex = sequential_search(array, element)\nif index == -1:\n    print(\"Element not found in the list\")\nelse:\n    print(\"Element found at index:\", index)\n\n\n# Output:\n# List: [12, 45, 78, 67, 90, 12, 45, 89, 12, 34, 56, 78, 123]\n# Element to search: 12\n# Element found at index: 0\n# Element found at index: 0\n",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], \"cherry\") == 2\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    :param test_list: List[int]\n    :return: bool\n    \"\"\"\n    # create a set from the list\n    set_list = set(test_list)\n    # check if the length of the set is equal to the length of the original list, then all the elements are unique\n    if len(set_list) == len(test_list):\n        return True\n    else:\n        return False\n\n# test the function\nprint(all_unique([1,2,3,4,5,6,7])) # True\nprint(all_unique([1,2,3,4,4,5,6,7])) # False\nprint(all_unique([1,2,3,3,4,5,6,7])) # False\nprint(all_unique([1,2,3,4,5,6,7,7])) # False\n",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\"]), True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x-y,nums1,nums2))\n\n#Example usage:\nnums1 = [1,2,3,4,5]\nnums2 = [3,2,1,4]\nprint(sub_list(nums1,nums2)) #Output should be [-2,-1,1]\n\nnums1 = [10,20,30,40]\nnums2 = [15,25,35]\nprint(sub_list(nums1,nums2)) #Output should be [-15,-5,0]\nnums1 = [1,2,3]\nnums2 = [4,5,6]\nprint(sub_list(nums1,nums2)) #Output should be [-3,-3,-3]\n\n#The function should work for any two lists of integers with the same length. ",
        "generated_testcode": "assert sub_list([1,2,3,4,5], [2,1,4]) == [1,1,-1,-1]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return True\n    digit = n % 10\n    n //= 10\n    if digit > 0 and digit <= 9 and n % 10 <= digit:\n        return validate(n)\n    else:\n        return False\n\ndef is_digit_frequency_valid(n):\n    return validate(n)\n\n# Test cases\nprint(is_digit_frequency_valid(1234)) # True\nprint(is_digit_frequency_valid(1023)) # False\nprint(is_digit_frequency_valid(1223)) # False\nprint(is_digit_frequency_valid(12223)) # True\nprint(is_digit_frequency_valid(111222)) # True\nprint(is_digit_frequency_valid(12345)) # True\nprint(is_digit_frequency_valid(123445)) # False\nprint(is_digit_frequency_valid(1213345)) # False\nprint(is_digit_frequency_valid(1122233344)) # False\nprint(is_digit_frequency_valid(122233344)) # True\nprint(is_digit_frequency_valid(11112222333444)) # True\nprint(is_digit_frequency_valid(111223344",
        "generated_testcode": "assert validate(12345) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for item in list:\n        if item != element:\n            return False\n    return True\n\n#Example usage:\nmy_list = [\"apple\",\"banana\",\"apple\",\"apple\",\"apple\"]\nelement = \"apple\"\nif check_element(my_list,element):\n    print(\"All items in the list are equal to \" + element)\nelse:\n    print(\"At least one item in the list is not equal to \" + element)\n\n#Output: All items in the list are equal to apple",
        "generated_testcode": "assert check_element([\"apple\", \"apple\", \"apple\", \"apple\"], \"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\n# Test the function with the following examples:\nprint(text_match_two_three('abbb')) # Output: None\nprint(text_match_two_three('abb')) # Output: abb\nprint(text_match_two_three('abbbb')) # Output: abbb\nprint(text_match_two_three('abbbbb')) # Output: abbb\nprint(text_match_two_three('abbbbbb')) # Output: abbb\nprint(text_match_two_three('abbcbbb')) # Output: None\nprint(text_match_two_three('abbbbbcc')) # Output: None\n\n# Add the following test cases:\nprint(text_match_two_three('abbbabbba')) # Output: abbb\nprint(text_match_two_three('abbbbabbba')) # Output: abbbb\nprint(text_match_two_three('a')) # Output: None\nprint(text_match_two_three('ab')) # Output: None\nprint(text_match_two_three('abbbbb')) # Output: abbb\nprint(text_match_two_three('abb')) # Output: None\nprint(text_match_two_three('abbc')) # Output: None\nprint(text_match_two_three('abbcc",
        "generated_testcode": "assert text_match_two_three(\"abab\" ) == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Modify the original array by repeating each element k times\n    modified_arr = [x for i in range(n) for x in [a[i]] * k]\n    # Sort the modified array\n    modified_arr.sort()\n    # Initialize two pointers, one at the end of the array and one at the beginning\n    max_sum = 0\n    i = len(modified_arr) - 1\n    j = 0\n    # Traverse the sorted array from end and beginning\n    while i >= 0 and j <= len(modified_arr) - 1:\n        # If the sum of the current subarray is positive, add it to max_sum\n        if modified_arr[i] + modified_arr[j] > 0:\n            max_sum += modified_arr[i] + modified_arr[j]\n            i -= 1\n            j += 1\n        # If the sum of the current subarray is negative, move the left pointer to the right\n        elif modified_arr[i] + modified_arr[j] < 0:\n            j += 1\n        # If the sum is zero, move both pointers\n        else:\n            max_sum += modified_arr[i]\n            i -= 1\n            j += 1\n    return max_sum\n\n# Test the function with the given test case\na = [-2, 3, -1, 5, -2, 4, -4, 5, -5, 1, -1]\nk = 2",
        "generated_testcode": "assert max_sub_array_sum_repeated(a=[1, 2, 3, -4, 5, -2, 6, 1, -1], n=3, k=2) == 17\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(1,n+1,2):  \n        sum += i**2  \n    return sum  \n  \n# Test the function  \nprint(square_Sum(5)) # Output: 55  ",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def modular_inverse_helper(a, p, x, n):\n        if n == 1:\n            return a if x % p == 0 else None\n        else:\n            a = (a * x) % p\n            return modular_inverse_helper(a, p, n // 2)\n\n    result = []\n    for i in arr:\n        if modular_inverse_helper(i, P, P - 2) is not None:\n            result.append(i)\n    return len(result)\n\n\n# Test cases\nprint(modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 17)) # Output: 6\nprint(modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 19)) # Output: 0\nprint(modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 3) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if N % 4 == 0 and N % 1000 != 0 or N % 4000 == 0:\n        print(\"Leap Year\")\n        return 1\n    else:\n        print(\"Not Leap Year\")\n        return 0\n\n# Using calendar module\nimport calendar\ndef odd_days(year):\n    if year % 4 == 0 and (year % 1000 != 0 or year % 4000 == 0):\n        print(\"Leap year\")\n        feb_days = 29\n    else:\n        print(\"Not Leap year\")\n        feb_days = 28\n    days = [31, feb_days, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31]\n    return sum(days) - calendar.weekday(year, 1, 1)\n\n# Test the function\nyear = int(input(\"Enter a year: \"))\nprint(\"Number of odd days in the year\", year, \"are\", odd_Days(year))\n",
        "generated_testcode": "assert odd_Days(2020) == 91\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    max_list = []\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n\n# Testing the function\nlist1 = [[1,2,3],[4,5],[6,7,8],[9],[]]\nprint(max_length(list1)) # Output: [6, 7, 8]\n\nlist2 = [[1,2,3],[4,5],[6,7],[8],[9,10,11,12],[13,14]]\nprint(max_length(list2)) # Output: [9, 10, 11, 12]\n\nlist3 = [[1,2],[3,4],[5,6,7,8],[9],[10],[]]\nprint(max_length(list3)) # Output: [5, 6, 7, 8]\n\nlist4 = [[],[],[],[],[]]\nprint(max_length(list4)) # Output: []\n\nlist5 = [[1],[2,3],[4,5,6,7,8],[9],[10,11,12],[13,14,15,16,17,18],[19,20],[21,22,23,24,25,26],[27,28,29] ]\nprint(max_length(",
        "generated_testcode": "assert max_length([[1,2,3],[4,5],[6,7,8,9],[10,11],[12,13,14,15,16],[17,18],[19,20,21,22,23,24]] ) == [1,2,3,4,1,1,1]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    if n == 2: \n        return k \n    if n == 3: \n        return k*k \n    dp = [0]*n \n    dp[0] = 1\n    dp[1] = k \n    dp[2] = k*k \n    for i in range(3, n): \n        dp[i] = (k*(k-1) + dp[i-1]*(k-1)) \n    return dp[n-1] ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 4\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n//m\n\n# Driver code\nn=5\nm=2\nprint(\"Quotient of\",n,\"and\",m,\"is\",find(n,m))\nn=10\nm=3\nprint(\"Quotient of\",n,\"and\",m,\"is\",find(n,m))\nn=10\nm=5\nprint(\"Quotient of\",n,\"and\",m,\"is\",find(n,m)) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two parameters w and h and returns the length of the third side\n    of a right angled triangle if it is given the length of the hypotenuse and the other two sides of the triangle\n    \"\"\"\n    return (w**2 + h**2)**0.5\n\n# Test the function\nprint(otherside_rightangle(3,4)) # Output: 5.0\nprint(otherside_rightangle(6,8)) # Output: 10.0\nprint(otherside_rightangle(10,12)) # Output: 13.866023415477755071826\n\n# If the hypotenuse is 5 and other two sides are 3 and 4 then the third side is 5\n# If the hypotenuse is 10 and other two sides are 6 and 8 then the third side is 10\n# If the hypotenuse is 12 and other two sides are 10 and 12 then the third side is 14.04169133310638895436",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int:\n            if val > max_val:\n                max_val = val\n        elif type(val) == str:\n            if val > max_val:\n                max_val = val\n        elif type(val) == float:\n            if val > max_val:\n                max_val = val\n        elif type(val) == bool:\n            if val:\n                max_val = True\n        elif type(val) == list:\n            max_val = max(val)\n        else:\n            pass\n    return max_val\n\n\n# Test cases\nprint(max_val([1, 2, 3, \"hello\", 4.5, [5, 6], False, \"world\", 7, 8.9, True])) # Output: 8.9\nprint(max_val([3, \"hello\", 5.6, [7, 8, 9], True, False])) # Output: True\nprint(max_val([1, 2, 3, 4, 5, 6])) # Output: 6\nprint(max_val([1, \"hello\", 2, 3.5, True])) # Output: True\nprint(max_val([1, \"hello\", 3.6, [7, 8, 9], False",
        "generated_testcode": "assert max_val([\"apple\", 10, 20, \"banana\", 5, 30, \"orange\", 15, 40, \"grape\"]) == 40\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize sum to 0\n    sum = 0\n    # Loop through range 1 to number\n    for i in range(1, number+1):\n        # Check if number is divisible by i\n        if number % i == 0:\n            # Add i to sum\n            sum += i\n    return sum\n\n# Test the function with an example\nprint(sum_div(10)) # Should return 1+2+5+10 = 18\nprint(sum_div(20)) # Should return 1+2+4+5+10+15+20 = 30\nprint(sum_div(25)) # Should return 1+5+10+25 = 31\n\n\n# Alternative solution using the built-in sum function\ndef sum_div_alt(number):\n    # Return the sum of all numbers from 1 to number that divide number evenly\n    return sum(x for x in range(1, number+1) if number % x == 0)\n\n# Test the function with the same examples\nprint(sum_div_alt(10)) # Should return 18\nprint(sum_div_alt(20)) # Should return 30\nprint(sum_div_alt(25)) # Should return 31\n",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count\n\n# Test the function \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are\", get_Inv_Count(arr, n)) ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9] , 6) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        result = []\n        for item in list1:\n            result.extend(flatten_list(item) if isinstance(item, list) else [item])\n        return result\n\n\n# Test cases\nprint(flatten_list([1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12]]]])]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(flatten_list([1, 2, [3, 4, [5, 6, [7, 8, [9, 10, [11, 12]], [13, 14, 15]]], [16, 17, 18, [19, 20]]]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(flatten_list(1))\n# Output: [1]\nprint(flatten_list([1, [2, [3, ",
        "generated_testcode": "assert flatten_list([\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\", [\"g\", \"h\"]], \"i\"], \"j\", \"k\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(l1, l2):\n        result = []\n        for i in l1:\n            if type(i) == list:\n                result.extend(helper(i))\n            else:\n                if i in l2:\n                    result.append(i)\n        return result\n    return list(set(helper(l1)) & set(helper(l2))\n\n\n# Test cases\nl1 = [1, 2, [3, 4], [5, [6, 7], 8], 9]\nl2 = [3, 4, [5, [6, 7], 10]\nprint(intersection_nested_lists(l1, l2))  # Output: [3, 4, 5, 6, 7]\n\nl1 = [1, 2, [3, 4], [5, [6, 7], 8], 9]\nl2 = [3, [5, [6, 7], 10]\nprint(intersection_nested_lists(l1, l2))  # Output: [3, 6, 7]\n\nl1 = [1, 2, [3, 4], [5, [6, 7], 8], 9]\nl2 = [3, 4, [5, [6, 8], 10]\nprint(intersection_nested_lists(l1, l2))  # Output: []\n\nl1 = [1, 2",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, [3, 4], [5, 6]], [7, 8, [9, [10, 11], 12], [13, [14, 15, [16, 17]]]], [18, 19, 20]], [[21, 22, 23], [24, 25, [26, 27, [28, 29]]]) == [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28]\n\n# The output should be a list containing the nested elements that are present in both lists. ",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = 0\n    for i in stdata:\n        if sum(i) > max_value:\n            max_value = sum(i)\n    return max_value\n\n# Test cases\nprint(max_aggregate([(3, 4, 5), (2, 6, 7), (8, 9, 10)])) # should return 23\nprint(max_aggregate([(1, 2, 3), (10, 20, 30), (5, 15, 25)])) # should return 60\nprint(max_aggregate([(2, 7, 8), (5, 3, 10), (8, 9, 12)])) # should return 30\n\n\n# Solution\ndef max_aggregate(stdata):\n    max_value = 0\n    for i in stdata:\n        if sum(i) > max_value:\n            max_value = sum(i)\n    return max_value\n\n# Test cases\nprint(max_aggregate([(3, 4, 5), (2, 6, 7), (8, 9, 10)])) # should return 23\nprint(max_aggregate([(1, 2, 3), (10, 20, 30), (5, 15, 25)])) # should return 60\nprint(max_aggregate([(2, 7,",
        "generated_testcode": "assert max_aggregate([(1,2,3), (4,5,6), (7,8,9)] ) == 23\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return count_binary_seq(n-1) * 2 + count_binary_seq(n-2) + count_binary_seq(n-3) * 2\n\n\n# Test cases\nprint(count_binary_seq(0)) # Output: 1\nprint(count_binary_seq(1)) # Output: 2\nprint(count_binary_seq(2)) # Output: 4\nprint(count_binary_seq(3)) # Output: 8\nprint(count_binary_seq(4)) # Output: 18\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    input: a dictionary\n    output: an integer representing the depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    else:\n        depths = []\n        for v in d.values():\n            if isinstance(v, dict):\n                depths.append(dict_depth(v) + 1)\n        return max(depths) if depths else 1\n\n\n# Test cases\nprint(dict_depth({})) # Output: 1\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": 1}, \"e\": 2}, \"f\": 3})) # Output: 3\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {\"h\": {\"i\": 1}}}}}, \"j\": {\"k\": {\"l\": 2}}}, \"m\": 3}, \"n\": 4})) # Output: 5\nprint(dict_depth({\"a\": {\"b\": [1, 2, 3], \"c\": 4, \"d\": 5} # Output: 2\nprint(dict_depth([1, 2, 3, [4, 5, 6]]) # Output: 0",
        "generated_testcode": "assert dict_depth(dict()) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n & 1 == 1: \n        return 0\n    else: \n        n >>= 1\n        return 1 + set_Bit_Number(n) \n\n# Test the function \nn = 12\nprint(set_Bit_Number(n)) # Output: 2 ",
        "generated_testcode": "assert set_Bit_Number(10) == 1\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        inv = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv += len(left) - i\n        result += left[i:]\n        result += right[j:]\n        return result, inv\n    \n    arr = merge_sort(a)\n    return inv\n\n#test the function\na = [2, 1, 5, 3, 4, 7, 6, 8]\nn = len(a)\nprint(solve(a, n))\n\na = [2, 3, 1, 5, 4, 7, 6, 8]\nn = len(a)\nprint(solve(a, n))\n\na = [1, 3, 2, 4, 5, 7, 6, 8]\nn = len(a)\n",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if rotations == 0 :  \n        return arr[index]  \n    else :  \n        if index < 0 or index >= len(arr) or rotations < 0 :  \n            return None  \n    else :  \n        for i in range(rotations) :  \n            arr = arr[-1:] + arr[:-1]  \n    return arr[index]  \n  \n#test the function  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  \nrotations = 2  \nindex = 3  \nprint(find_Element(arr,rotations,index))\n\nOutput: 5\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  \nrotations = 3  \nindex = 5  \nprint(find_Element(arr,rotations,index))\n\nOutput: 12\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  \nrotations = 4  \nindex = 1  \nprint(find_Element(arr,rotations,index))\n\nOutput: None ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7,8,9,10,11,12], 3, 4) == 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n# Test the function\nwords = ['python', 'java', 'ruby', 'perl', 'python', 'php', 'python']\nprint(start_withp(words)) # Output: ['python', 'python'] ",
        "generated_testcode": "assert start_withp([\"python\", \"java\", \"javascript\", \"php\", \"perl\", \"python\", \"ruby\", \"python3\"] == [\"python\", \"python3\"]\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if k >= n:\n        return 0\n    if index >= k:\n        return a[k]\n\n    incl = 0\n    excl = 0\n    incl_sum = float('-inf')\n    excl_sum = float('-inf')\n\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            incl = a[i] + incl\n            if incl > incl_sum:\n                incl_sum = incl\n        else:\n            excl = max(excl, excl_sum)\n            incl = 0\n\n        excl_sum = max(excl, excl_sum)\n\n    return max(incl_sum, excl_sum)\n\n\n\n# Test cases\na = [1, 101, 2, 3, 100, 4, 50, 6, 7, 8, 9]\nn = len(a)\nk = 5\nprint(max_sum_increasing_subseq(a, n, k))  # Output: 1109\n\na = [1, 10, 2, 3, 100, 4, 50, 6, 7, 8, 9]\nn = len(a)\nk = 4\nprint(max_sum_increasing_subseq(a, n, k))  # Output: 113\n\na = [1,",
        "generated_testcode": "assert max_sum_increasing_subseq(a=[1, 2, 3, 4, 5, 1, 2, 3, 7, 8, 9], n=7, index=3, k=5) == 25\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result=[]\n    for i in range(m):\n        for j in range(n):\n            result.append(tuplex[i][j])\n    return result\n\n#Example usage:\na = ((1,2,3),(4,5,6),(7,8,9)\nprint(colon_tuplex(a,3,2)) #Output: [1,2,4,5,7,8]\n\n#Explanation: The function takes a tuple 'a' of 3 tuples with 2 elements each and returns a new tuple containing the first 2 elements of each tuple. \n#So, for the example, it will return (1,4,7) and (2,5,8). ",
        "generated_testcode": "assert colon_tuplex(('hello', 'world', 1, 2, 3, 4, 5) == (('hello', 'world', 1, 2, 3, 4, 5)[:m:n])\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    return sorted(products, reverse=True)[:N]\n\n\n# Example usage:\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [6, 5, 4, 3, 2]\nprint(large_product(nums1, nums2, 2))  # Output: [12, 15]\nnums1 = [1, -2, -3, 4, 5]\nnums2 = [6, -5, -4, -3]\nprint(large_product(nums1, nums2, 2))  # Output: [15, 12]\nnums1 = [0, 0, 0, 0]\nnums2 = [0, 0, 0]\nprint(large_product(nums1, nums2, 2))  # Output: [0, 0]\nnums1 = [-1, 2, 3, 4]\nnums2 = [5, -6, 7]\nprint(large_product(nums1, nums2, 3))  # Output: [21, 14, -6]\n",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [72, 56]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function\nprint(maximum(5, 10))  # Output: 10\nprint(maximum(20, 15)) # Output: 20\nprint(maximum(7, 7))   # Output: 7\nprint(maximum(3, 3))   # Output: 3\n\n\n# Another way to write the same function using lambda function\n\nmax_num = lambda a, b: a if a > b else b\n\n# Test the lambda function\nprint(max_num(5, 10))  # Output: 10\nprint(max_num(20, 15)) # Output: 20\nprint(max_num(7, 7))   # Output: 7\nprint(max_num(3, 3))   # Output: 3",
        "generated_testcode": "assert maximum(5, 10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(str1.split())\n\n# Test the function with an example\nprint(string_to_tuple(\"hello world\")) # Output: ('hello', 'world')\nprint(string_to_tuple(\"Python is awesome\")) # Output: ('Python', 'is', 'awesome')\nprint(string_to_tuple(\"I am a string\")) # Output: ('I', 'am', 'a', 'string') ",
        "generated_testcode": "assert string_to_tuple((\"hello\") == ('h', 'e', 'l', 'l', 'o')\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return n | (n+1) \n\nprint(set_left_most_unset_bit(10)) # Output: 112\nprint(set_left_most_unset_bit(15)) # Output: 16\nprint(set_left_most_unset_bit(20)) # Output: 24\n\n\n# Function to get the left most set bit \ndef get_left_most_set_bit(n): \n    if n > 0: \n        return 1 << (n.bit_length() - 1) \n    else: \n        return 0\n\nprint(get_left_most_set_bit(12)) # Output: 8\nprint(get_left_most_set_bit(15)) # Output: 8\nprint(get_left_most_set_bit(24)) # Output: 16\n\n\n# Function to get the right most set bit \ndef get_right_most_set_bit(n): \n    m = 0\n    while (n & (1 << m) == 0): \n        m += 1\n    return 1 << m \n\nprint(get_right_most_set_bit(12)) # Output: 8\nprint(get_right_most_set_bit(15)) # Output: 8\nprint(get_right_most_set_bit(24)) # Output: 4\n\n\n# Function to clear the right most set",
        "generated_testcode": "assert set_left_most_unset_bit(0b1010101010) == 0b101010100\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the volume of a cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    :param r: the radius of the base of the cone\n    :param h: the height of the cone\n    :return: the volume of the cone\n    \"\"\"\n    pi = 3.14159\n    return (1/3) * pi * r**2 * h\n\nprint(volume_cone(5, 10)) # Output: 29.531563587052318431\n\n# Test the function with different values\nprint(volume_cone(2, 8)) # Output: 28.274331\nprint(volume_cone(7, 6)) # Output: 55.38591\nprint(volume_cone(4, 12)) # Output: 71.10769\nprint(volume_cone(10, 15)) # Output: 157.46785\n\n# Test the function with negative radius or height\nprint(volume_cone(-5, 10) # Output: ValueError: radius must be positive\nprint(volume_cone(5, -10) # Output: ValueError: height must be positive ",
        "generated_testcode": "assert volume_cone(5,10) == 151.08\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list1:\n        if i > 0:\n            print(i)\n\n#Example Usage:\nlist1 = [1, -2, 3, -4, 5, 6, -7, 8, -9, 10]\npos_nos(list1)\n#Output:\n#3\n#5\n#8\n#10\n\n#Explanation:\n#The function takes a list1 as an argument and iterates through the list. If an element is greater than 0, it is printed. ",
        "generated_testcode": "assert pos_nos([1, 2, 3, -4, 5, -6, 7, 8, -9, 10] ) == [1, 2, 3, 5, 7, 8, 10]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the variables \n    max_sum = 0\n    temp_sum = 0\n    total_sum = [0] * n\n\n    # Iterate through each element of the grid and calculate the sum up to that element \n    for i in range(n) : \n        for j in range(n) : \n            temp_sum += grid[i][j]\n            max_sum = max(max_sum, temp_sum)\n            if i > 0 : \n                temp_sum = max(temp_sum + grid[i][j], temp_sum - grid[i - 1][j])\n        temp_sum = 0\n    return max_sum\n\n# Testing the function with a sample input\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [4, 3, 2, 1]]\nn = 4\nprint(max_sum_rectangular_grid(grid, n))\n# Output: 18\n\n# Explanation:\n# The maximum sum that can be obtained without choosing adjacent elements is 18, which is the sum of the elements in the \n# first and third column. \n# The sub-rectangles formed by choosing these elements are: \n# 1. [1, 2, 3, 4] \n# 2. [5, 6, 7, 8] \n# 3. [4, 3, 2, 1] \n#",
        "generated_testcode": "assert max_sum_rectangular_grid(\n    [[1, 2, 3, 4],\n     [5, 6, 7, 8],\n     [9, 10, 11, 12],\n     [13, 14, 15, 16]], 3) == 42\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    for i in str.split():\n        if len(i) % 2 == 0:\n            if len(i) > max_len:\n                max_len = len(i)\n    return max_len\n\n# test the function\nprint(find_Max_Len_Even(\"Python is the best programming language\")) # Output: 6\nprint(find_Max_Len_Even(\"Learning Python is fun\")) # Output: 6\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\")) # Output: 6\nprint(find_Max_Len_Even(\"hello world\")) # Output: 0\n\n\n# Using List comprehension\ndef find_Max_Len_Even(str):\n    return max([len(i) for i in str.split() if len(i) % 2 == 0])\n\n# test the function\nprint(find_Max_Len_Even(\"Python is the best programming language\")) # Output: 6\nprint(find_Max_Len_Even(\"Learning Python is fun\")) # Output: 6\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\")) # Output: 6\nprint(find_Max_Len_Even(\"hello world\")) # Output: 0\n",
        "generated_testcode": "assert find_Max_Len_Even([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"] == 2)\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    l, r = 0, len(A) - 1\n    result = -1\n\n    while l <= r:\n        m = (l + r) // 2\n\n        if A[m] == x:\n            result = m\n            l = m + 1\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n\n    return result\n\n# Test the function\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 4\nprint(find_last_occurrence(A, x))  # Output: 4\n\nA = [1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 7\nprint(find_last_occurrence(A, x))  # Output: 6\n\nA = [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 10\nprint(find_last_occurrence(A, x))  # Output: -1\n\nA = [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 7\nprint(find_last_",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7], 4) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    count = 1\n    prev = alist[0]\n    for i in range(1, len(alist)):\n        if alist[i] == prev:\n            count += 1\n        else:\n            result.append(count)\n            result.append(prev)\n            prev = alist[i]\n            count = 1\n    result.append(count)\n    result.append(prev)\n    return result\n\n\n# Test the function with some sample inputs\nprint(modified_encode([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6]))\n# Output: [1, 2, 1, 2, 3, 3, 1, 4, 4, 2, 5, 5, 1, 6]\n\nprint(modified_encode([1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3]))\n# Output: [5, 1, 1, 4, 2, 2, 1, 3, 3]\n\nprint(modified_encode([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6]))\n#",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [(\"a\", 4), (\"b\", 1), (\"c\", 2), (\"a\", 2), (\"a\", 1)]\n\n# Test case 2\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_max_area(s):\n        for i in range(s):\n            for j in range(s):\n                for k in range(s):\n                    if i*i + j*j == k*k + s*s and i*i + j*j + k*k == s*s:\n                        return i*j*k\n        return -1\n    return find_max_area(s)\n\n# Test the function \ns = 5\nprint(max_volume(s)) ",
        "generated_testcode": "assert max_volume (10) == 10000\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w{5}\\b\"\n    return re.findall(pattern, text)\n\n# Test the function with the given test cases\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_long_word(\"This is a sample text with some example words\"))\nprint(find_long_word(\"Python is a high-level programming language\"))\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog, the quick brown dog jumps over the lazy cat\"))\nprint(find_long_word(\"Python is an interpreted, high-level programming language\"))\nprint(find_long_word(\"A quick brown fox jumps over the lazy dog.\"))\n\n\n# Output\n# ['quick', 'brown', 'jumps', 'over', 'lazy', 'dog']\n# ['sample', 'example', 'words']\n# ['Python', 'interpreted']\n# ['quick', 'brown', 'jumps', 'lazy', 'dog']\n# []",
        "generated_testcode": "assert find_long_word(text=\"This is a sample text with some words\") == ['sample', 'words']\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_squares = sum(i**2 for i in range(1, n+1))\n    squares_sum = sum(range(1, n+1))**2\n    return sum_squares - squares_sum\n\n# Test the function\nprint(sum_difference(5)) # Output: 225\nprint(sum_difference(10)) # Output: 3025\nprint(sum_difference(100)) # Output: 255502500",
        "generated_testcode": "assert sum_difference(5) == 225\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize a dictionary to store the values of digits in the given number\n    demlo_dict = {'1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    # Traverse the digits in the given number\n    for digit in str(s):\n        demlo_dict[digit] += 1\n    # Initialize a list to store the demlo number\n    demlo_list = []\n    # Traverse the demlo_dict and append the digits to the demlo_list\n    for key, value in demlo_dict.items():\n        for i in range(value):\n            demlo_list.append(int(key))\n    # Sort the demlo_list\n    demlo_list.sort()\n    # Convert the demlo_list to a string\n    demlo_string = ''.join(str(i) for i in demlo_list)\n    # Return the demlo number\n    return int(demlo_string)\n\n# Test the function\nprint(find_demlo(123456789)) # Output: 123456789\nprint(find_demlo(987654321)) # Output: 123456789\nprint(find_demlo(987)) # Output: 879",
        "generated_testcode": "assert find_demlo(12345) == 12345\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    index_list = []\n    min_val = min(list1)\n    for i in range(len(list1)):\n        if list1[i] == min_val:\n            index_list.append(i)\n    return index_list\n\n# Test the function\nlist1 = [2, 5, 3, 1, 8, 1, 4, 6, 2, 9, 3, 0, 7, 3, 8, 1]\nprint(position_min(list1)) # Output: [1, 4, 7]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(position_min(list2)) # Output: [0]\nlist3 = [1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(position_min(list3)) # Output: [0, 1, 2, 3, 4, 5]\n",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == [0]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pos_count = 0\n    neg_count = 0\n    for i in range(n):\n        if arr[i] > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if pos_count > neg_count:\n        for i in range(pos_count):\n            out_of_place[i] = arr[i]\n        for i in range(pos_count, n):\n            out_of_place[i] = arr[i]\n    else:\n        for i in range(n-neg_count):\n            out_of_place[i] = arr[i]\n        for i in range(n-neg_count, n):\n            out_of_place[i] = arr[i]\n\n    return out_of_place\n\n\n\ndef rearrange_alternating_positive_negative(arr):\n    n = len(arr)\n    out_of_place = [0]*n\n    return right_rotate(arr, n, out_of_place)\n\n\n\n# Test the function\narr = [1, 2, -3, -4, 5, 6, -7, 8, -9, 10]\nprint(rearrange_alternating_positive_negative(arr))\n",
        "generated_testcode": "assert right_rotate([1, 2, 3, -4, 5, -6, 7, -8, 9], 3, 0) == [-4, 1, 5, -8, 2, 7, 3, 9]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    total = 0\n    for i in range(0, len(test_tuple), 2):\n        total += test_tuple[i]\n    return total\n\n# Test the function with sample inputs\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(sum_of_alternates(test_tuple)) # Output: 12 (1 + 5 + 9)\n\ntest_tuple = (10, 20, 30, 40, 50, 60, 70, 80, 90)\nprint(sum_of_alternates(test_tuple)) # Output: 110 (10 + 50)\n\ntest_tuple = (100, 200, 30, 40, 50, 60, 70, 80, 90, 100)\nprint(sum_of_alternates(test_tuple)) # Output: 100 (100 + 50 + 90)\n\ntest_tuple = (1000, 200, 300, 400, 500, 600, 700, 800, 900)\nprint(sum_of_alternates(test_tuple)) # Output: 200 (100 + 700) ",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        if i ** 2 <= n:\n            dp[i] = 1\n        else:\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i - j * j] + 1, dp[i])\n                j += 1\n    return dp[n]\n\n\n# Test the function\nn = 13\nprint(get_Min_Squares(n))  # Output: 2\n\nn = 12\nprint(get_Min_Squares(n))  # Output: 3\n\nn = 5\nprint(get_Min_Squares(n))  # Output: 1\n\nn = 0\nprint(get_Min_Squares(n))  # Output: 0",
        "generated_testcode": "assert get_Min_Squares(13) == 3\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_list: list of strings\n    :return: string with the word with most occurrences\n    \"\"\"\n    # Create a dictionary to store the count of each word\n    word_count = {}\n    # Iterate through the list\n    for string in test_list:\n        # Split the string into words and iterate through the words\n        for word in string.split():\n            # If the word is not in the dictionary, add it with a count of 1\n            if word not in word_count:\n                word_count[word] = 1\n            else:\n                # If the word is already in the dictionary, increment its count\n                word_count[word] += 1\n    # Find the word with the highest count\n    max_count = 0\n    max_word = None\n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n\n\n# Test the function with the sample inputs\ntest_list = [\"hello world\", \"world\", \"hello\", \"world\", \"world\", \"world\", \"hello\", \"world\", \"goodbye\", \"goodbye\"]\nprint(most_occurrences(test_list))  # Output: \"world\"\ntest_list = [\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"banana\", \"apple\"]\nprint(most_occurrences(test_list))  # Output: \"banana\"\ntest_",
        "generated_testcode": "assert most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x == y or y == z or z == x:\n        print(\"Triangle is is isosceles\")\n    else:\n        print(\"Triangle is not isosceles\")\n\n# Test cases\ncheck_isosceles(5,5,5)\ncheck_isosceles(6,6,8\ncheck_isosceles(3,4,5)\n\n# Output: \n# Triangle is is isosceles\n# Triangle is not isosceles\n# Triangle is not isosceles\n\n\n# Explanation:\n# First test case, all sides are equal, so it is an isosceles triangle.\n# Second test case, sides are not equal, so it is not an isosceles triangle.\n# Third test case, sides are not equal, so it is not an isosceles triangle. ",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 0:\n        return list1\n    else:\n        return list1[n:]+list1[:n]\n\nprint(rotate_left([1,2,3,4,5,6,7,8],3))\n\n# Output: [5, 6, 7, 8, 1, 2, 3]\n\n\n# Write a function to remove duplicates from a list\ndef remove_duplicates(list1):\n    return list(set(list1))\n\nprint(remove_duplicates([1,2,3,4,2,4,5,3,6,7,8,1]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Write a function to swap first and last element of a list\ndef swap_first_last(list1):\n    list1[0],list1[-1] = list1[-1],list1[0]\n    return list1\n\nprint(swap_first_last([1,2,3,4,5,6,7,8]))\n# Output: [8, 2, 3, 4, 5, 6, 7]\n\n# Write a function to reverse a list in Python\ndef reverse_list(list1):\n    return list1[::-1]\n\nprint(reverse_list([1,2,3,4,5,6,7,8])\n# Output: [8, 7, 6, ",
        "generated_testcode": "assert rotate_left([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2) == [\"f\", \"g\", \"a\", \"b\", \"c\", \"d\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# Test the function with a sample list\nprint(neg_count([1, 2, -3, 4, -5, 6, -7, 8, -9])) # Output: 4\n\n# Test the function with another sample list\nprint(neg_count([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 0\n# Test the function with an empty list\nprint(neg_count([])) # Output: 0",
        "generated_testcode": "assert neg_count([1,2,3,-4,5,-6,-7,8,-9] ) == 4\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words\n\n# Test the function\ntext = \"The quick brown fox jumps over the lazy dog. Python is a programming language used for data analysis, machine learning and artificial intelligence.\"\nprint(find_char(text))\n# Output: ['The', 'uick', 'brown', 'jumps', 'ove', 'lazy', 'dog.', 'Python', 's a', 'ana', 'for', 'data', 'anal', 'used', 'and', 'artificial', 'intelligence']\n\n# The function should return a list of three, four, and five characters long words in the given string as a list. ",
        "generated_testcode": "assert find_char(text=\"This is a sample text with some words\") == ['This', 'is', 'a', 'sample', 'text', 'with', 'some', 'words']\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    while n: \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_unset_bits(0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n\n# Example usage:\nstr1 = \"hello world\"\nprint(char_frequency(str1))  # Output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'w': 1, 'r': 1, 'd': 1}\nstr2 = \"python\"\nprint(char_frequency(str2))  # Output: {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\n\n# Can you write a function that will count the frequency of each character in a string, but only for the first two characters of the string?\ndef char_frequency_first_two(str1):\n    freq = {}\n    for char in str1[:2]:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n# Example usage:\nstr1 = \"hello world\"\nprint(char_frequency_first_two(str1))  # Output: {'h': 1, 'e': 1}\nstr2 = \"python\"\nprint(char_frequency_first_two(str2",
        "generated_testcode": "assert char_frequency(str1=\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sub_li.sort(key=lambda x:x[1]) \n    return sub_li \n\n# Driver code \nif __name__ == \"__main__\": \n    # creating a list of lists \n    sub_li = [[1, 20], [4, 4], [3, 1], [2, 24], [9, 12], [5, 18], [8, 5]] \n    print(\"Original list:\") \n    print(sub_li) \n\n    # calling the sort function \n    Sort(sub_li) \n\n    # printing the sorted list \n    print(\"Sorted list:\") \n    print(sub_li) ",
        "generated_testcode": "assert Sort([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]] ) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:  \n        return True  \n    else:  \n        return False  \n\ndef check_Equilateral(a,b,c):  \n    if a==b and b==c:  \n        return True  \n    else:  \n        return False  \n\ndef check_Isosceles(a,b,c):  \n    if a==b or b==c or a==c:  \n        return True  \n    else:  \n        return False  \n\ndef check_Scalene(a,b,c):  \n    if a!=b and b!=c and a!=c:  \n        return True  \n    else:  \n        return False  \n\ndef classify_Triangle(a,b,c):  \n    if check_Validity(a,b,c):  \n        if check_Equilateral(a,b,c):  \n            return \"Equilateral\"  \n        elif check_Isosceles(a,b,c):  \n            return \"Isosceles\"  \n        else:  \n            return \"Scalene\"  \n    else:  \n        return \"Invalid\" ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n/2)*(2*a+(n-1)*d)\n\n\n#Testing the function\na = 5\nn = 10\nd = 3\nprint(ap_sum(a,n,d)) #Expected output 35\n\na = 10\nn = 10\nd = 2\nprint(ap_sum(a,n,d)) #Expected output 1000\na = 10\nn = 20\nd = 3\nprint(ap_sum(a,n,d)) #Expected output 2300\na = 10\nn = 100\nd = 1\nprint(ap_sum(a,n,d)) #Expected output 5550\na = 0\nn = 1\nd = 10\nprint(ap_sum(a,n,d)) #Expected output 0\na = -5\nn = 10\nd = 3\nprint(ap_sum(a,n,d)) #Expected output -25\n\n#Additional test cases\na = 10\nn = 20\nd = -3\nprint(ap_sum(a,n,d)) #Expected output -50\na = -10\nn = 10\nd = 2\nprint(ap_sum(a,n,d)) #Expected output -45\na = 5\nn = 10\nd = 0\n",
        "generated_testcode": "assert ap_sum(1,1,1) == 1\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthname1 == \"February\":\n        return 28\n    elif monthname1 == \"April\" or monthname1 == \"June\" or monthname1 == \"September\" or monthname1 == \"November\" or monthname1 == \"March\" or monthname1 == \"January\":\n        return 31\n    else:\n        return 30\n\n\ndef main():\n    monthname = input(\"Enter the month name: \")\n    num_days = check_monthnum(monthname)\n    print(f\"The number of days in {monthname} is {num_days}\")\n\nif __name__ == \"__main__\":\n    main()\n\n#test cases\n#Input 1:\n# Enter the month name: January\n# Output: The number of days in January is 31\n\n#Input 2:\n# Enter the month name: February\n# Output: The number of days in February is 28\n#Input 3:\n# Enter the month name: March\n# Output: The number of days in March is 31\n#Input 4:\n# Enter the month name: April\n# Output: The number of days in April is 30\n#Input 5:\n# Enter the month name: May\n# Output: The number of days in May is 31\n#Input 6:\n# Enter the month name: June\n# Output: The number of days in June is 30\n#Input 7:\n# Enter the month name: July\n#",
        "generated_testcode": "assert check_monthnum(1) == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'(?<![a-zA-Z0-9])([a-zA-Z]+)\\b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    return None\n\n# Test cases\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog.\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog.\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog. .\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog!\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog, the\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog (the\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog?\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog,\"))  # Output: \"dog\"\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog\"))  # Output: None\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog:\"))  # Output: None",
        "generated_testcode": "assert text_match_word(text=\"The quick brown fox jumps over the lazy dog.\") == \"dog.\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    n = len(s)\n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j] and s[0] == s[n-1]: \n                count += 1\n    return count \n  \n# Driver code \ns = \"abcdef\"\nprint(\"The number of substrings with same first and last characters are:\", check_Equality(s)) \n",
        "generated_testcode": "assert check_Equality(s) == 0\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_divisor = -1\n    for i in range(x,y+1):\n        for j in range(x,y+1):\n            if x % i == 0 and y % i == 0 and i > max_divisor:\n                max_divisor = i\n    return max_divisor\n\n#Test the function\nprint(find_Divisor(12,24)) # Output: 6\nprint(find_Divisor(13,24)) # Output: 8\nprint(find_Divisor(15,27)) # Output: 15\n\n\n#Alternate Solution\ndef find_Divisor(x,y):\n    max_divisor = -1\n    for i in range(x,y+1):\n        if x % i == 0 and y % i == 0:\n            count = 0\n            for j in range(x,y+1):\n                if j % i == 0:\n                    count += 1\n            if count > max_divisor:\n                max_divisor = i\n    return max_divisor\n#Test the function\nprint(find_Divisor(12,24)) # Output: 6\nprint(find_Divisor(13,24)) # Output: 8\nprint(find_Divisor(15,27)) # Output: 15",
        "generated_testcode": "assert find_Divisor(12, 30) == 6\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize a variable to store the sum of the three smallest numbers\n    total = 0\n    # create a list to store the three smallest numbers\n    three_smallest = []\n    # sort the list in ascending order\n    lst.sort()\n    # loop through the list and append the smallest three numbers to the three_smallest list\n    for i in range(3):\n        three_smallest.append(lst[i])\n    # loop through the three_smallest list and sum the numbers\n    for num in three_smallest:\n        total += num\n    return total\n\n# test the function\nprint(sum_three_smallest_nums([10, 2, 5, 6, 3, 9, 8, 4]))  # Output: 15\nprint(sum_three_smallest_nums([-1, -3, -2, -4, -5, -6]))  # Output: -6\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6]))  # Output: 6\nprint(sum_three_smallest_nums([4, 2, 1, 6, 3, 5]))  # Output: 9\n",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    t = tuple(sorted(s))\n    return t\n\n#Test the function\ns = {1, 3, 2, 4, 5, 6}\nprint(set_to_tuple(s)) # Output: (1, 2, 3, 4, 5, 6)\n\ns = {4, 2, 5, 3, 1}\nprint(set_to_tuple(s)) # Output: (1, 2, 3, 4, 5)\n\ns = {5, 3, 1, 7}\nprint(set_to_tuple(s)) # Output: (1, 3, 5, 7)\n\ns = {8, 2}\nprint(set_to_tuple(s)) # Output: (2, 8)",
        "generated_testcode": "assert set_to_tuple(set()) == ()\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def findSmallestRange(self):\n        # Sort the list_num based on the value at index\n        sorted_list = sorted(self.list_num, key=lambda x: x[self.index])\n        # Find the smallest range\n        smallest_range = float(\"inf\")\n        for i in range(len(self.list_num)):\n            for j in range(i + 1, len(self.list_num)):\n                # Calculate the range\n                range_val = abs(sorted_list[j][self.index] - sorted_list[i][self.index])\n                # Update the smallest range\n                if range_val < smallest_range:\n                    smallest_range = range_val\n        return smallest_range\n\n# Test the function\ntest = FindSmallestRange([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 0)\nprint(test.findSmallestRange()) # Output: 1\n\ntest = FindSmallestRange([[1, 5, 3], [2, 7, 4], [3, 8, 9]], 1)\nprint(test.findSmallestRange()) # Output: 6\n\ntest = FindSmallestRange([[1, 5, 3], [2, 7, 4], [3, 8, 9",
        "generated_testcode": "assert __init__(1, [1, 2, 3, 4, 5], 0) == (1, 5)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n\n# Test the function\nprint(dig_let(\"Hello123World456\")) # Output: (6, 5)\nprint(dig_let(\"Hello, World!\")) # Output: (0, 111)\nprint(dig_let(\"7apples345banana\")) # Output: (8, 4)\nprint(dig_let(\"12345\")) # Output: (4, 0)\nprint(dig_let(\"\")) # Output: (0, 0)\n",
        "generated_testcode": "assert dig_let(123abc) == (3, 3)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        for j in range(1,int(i/2)+1):\n            if i%j == 0 and i**(0.5) == int(i**0.5):\n                count += 1\n    return count\n    \n#Test the function\nprint(count_Odd_Squares(1,100)) # Should return 12\nprint(count_Odd_Squares(10,20)) # Should return 2\nprint(count_Odd_Squares(50,60)) # Should return 5\nprint(count_Odd_Squares(1000,2000)) # Should return 13\nprint(count_Odd_Squares(1,500)) # Should return 25\nprint(count_Odd_Squares(1,1)) # Should return 0\nprint(count_Odd_Squares(2,3)) # Should return 0\nprint(count_Odd_Squares(2,4)) # Should return 1\nprint(count_Odd_Squares(200,50)) # Should return 0\nprint(count_Odd_Squares(20,50)) # Should return 12\n",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 4\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return abs(nums[0] - nums[1])\n\n\n# Test the function with the given input\nnums = [1, 3, 5, 7, 9, 111, 13, 15]\nprint(diff_consecutivenums(nums)) # Output: 2\n\n\n# Test the function with the given input\nnums = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(diff_consecutivenums(nums)) # Output: 4\n\n\n# Test the function with the given input\nnums = [100, 20, 30, 40, 50, 60, 70]\nprint(diff_consecutivenums(nums)) # Output: 10 ",
        "generated_testcode": "assert diff_consecutivenums([1, 3, 5, 7, 9, 111, 13] ) == 2\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k > n:\n        return 0\n    if k % 2 == 0:\n        return n - (k//2)\n    else:\n        return (k//2 + 1)\n\n# Test the function\nprint(zigzag(5, 1)) # Output: 1\nprint(zigzag(5, 2)) # Output: 2\nprint(zigzag(5, 3)) # Output: 3\nprint(zigzag(5, 4)) # Output: 2\nprint(zigzag(5, 5)) # Output: 1\nprint(zigzag(5, 6)) # Output: 1\n",
        "generated_testcode": "assert zigzag(5, 2) == 14\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 0 or n == 0: \n        return 0\n    if m == 1 or n == 1: \n        return 1\n    if m == 1 and n == 1: \n        return 1\n    return m + n \n  \n# Driver code \n  \nm = 4\nn = 4\nprint(\"Number of squares in a rectangle of dimensions\", m, \"x\", n, \"are\", count_Squares(m, n)) ",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 0\n    for i in range(1, n+1): \n        res += comb(n, i) \n    return res \n\n\ndef generate_prefix_sums(arr, k): \n    n = len(arr)\n    dp = [0] * (n + 1) \n    for i in range(1, n + 1): \n        dp[i] = dp[i-1] + arr[i-1]\n    prefix_sum = [0] * (n+1) \n    for i in range(1, n + 1): \n        prefix_sum[i] = dp[i] \n\n    for i in range(1, n): \n        for j in range(i+1, n+1): \n            prefix_sum[j] = prefix_sum[i] + arr[i:j]\n\n    count = 0\n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if j - i <= k and prefix_sum[j] == prefix_sum[i] and bin_coff(j-i, k-1) != 0: \n                count += bin_coff(j-i, k-1)\n    return count \n\n\ndef count_sequences(arr, k):\n    return generate_prefix_sums(arr, k)\n\n\n# Test the function \narr = [1, 2",
        "generated_testcode": "assert bin_coff(3, 2) == 3\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in string :\n        if i not in ('0','1'):\n            return False\n    return True\n\n#function call\nprint(check('11010101')) #True\nprint(check('0101010101')) #True\nprint(check('1010101a')) #False\nprint(check('111111010')) #True\nprint(check('111111010101011110')) #False\nprint(check('11111101010111111')) #True\n",
        "generated_testcode": "assert check(1010101010) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    for i in s : \n        if i in d : \n            d[i] += 1\n        else : \n            d[i] = 1\n    max_count = max(d.values())\n    if max_count == 1 : \n        return len(s)\n    else : \n        for key, value in d.items() : \n            if value == max_count : \n                d[key] -= 1\n                break\n    s = \"\"\n    for i in d : \n        s += i * d[i]\n    return len(s)\n\n\n#Test the function \ns = \"aabbbccdde\"\nprint(minimum_Length(s))\n\ns = \"aaabbcdd\"\nprint(minimum_Length(s))\n\ns = \"aabbccdd\"\nprint(minimum_Length(s))\n\ns = \"abc\"\nprint(minimum_Length(s))",
        "generated_testcode": "assert minimum_Length(\"abccba\" ) == \"abcb\"\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a dictionary to store the frequency of each element \n    freq_dict = {} \n    # Traverse through the array \n    for i in range(n): \n        if arr[i] in freq_dict: \n            freq_dict[arr[i]] += 1\n        else: \n            freq_dict[arr[i]] = 1\n    # Find the element with the frequency equal to k \n    for key, value in freq_dict.items(): \n        if value == k: \n            return key \n    return None\n\n# Driver code \narr = [1, 2, 3, 4, 2, 5, 3, 1, 4, 6, 4, 3] \nk = 3\nn = len(arr) \nprint(first_Element(arr, n, k)) ",
        "generated_testcode": "assert first_Element([1,2,3,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,9,1,2,3,4,5,6,7,8,9,10], 2) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str) > 128:\n        return False\n\n    char_set = [0] * 128\n    for char in str:\n        if char_set[ord(char)] == 1:\n            return False\n        char_set[ord(char)] = 1\n    return True\n\n\n# Test the function\nprint(unique_Characters(\"hello\")) # Output: False\nprint(unique_Characters(\"world\")) # Output: True\nprint(unique_Characters(\"python\")) # Output: False\nprint(unique_Characters(\"abcdefg\")) # Output: True\nprint(unique_Characters(\"abcdefgh\")) # Output: False\n",
        "generated_testcode": "assert unique_Characters(str) == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for row in list1:\n        del row[n]\n    return list1\n\n# Test the function\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nn = 2\nprint(remove_column(list1, n))\n# Expected Output: [[1],[4],[7]]\n\nlist1 = [[1,2,3,4],[5,6,7],[8,9,10]]\nn = 1\nprint(remove_column(list1, n))\n# Expected Output: [[1,4],[3,7],[9]] ",
        "generated_testcode": "assert remove_column([[1,2,3],[4,5,6],[7,8,9]], 1) == [[1,3],[4,9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return a + (n-1)*d\n\n#Testing the function\na = 5\nn = 10\nd = 3\nprint(tn_ap(a,n,d)) # output should be 18\n\na = 10\nn = 7\nd = 4\nprint(tn_ap(a,n,d)) # output should be 16\n\na = 0\nn = 1\nd = 1\nprint(tn_ap(a,n,d)) # output should be 0\n\na = 1\nn = 2\nd = 10\nprint(tn_ap(a,n,d)) # output should be 10\n\n\n#Write a function to find the sum of first n terms of an arithemetic progression\ndef sum_ap(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += tn_ap(a,i+1,d)\n    return sum\n\n#Testing the function\na = 5\nn = 10\nd = 3\nprint(sum_ap(a,n,d)) # output should be 55\n\na = 10\nn = 7\nd = 4\nprint(sum_ap(a,n,d)) # output should be 56\na = 0\nn = 1\nd = 1\nprint(sum_ap(a,n,d)) # output should be 0\na =",
        "generated_testcode": "assert tn_ap(1,1,1) == 1\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a radius as input and returns the number of rectangles that can be inscribed in a circle of that radius.\n    \"\"\"\n    n = 0\n    for i in range(1, radius+1):\n        for j in range(i):\n            if i*(i+j) >= radius*radius:\n                n += 1\n    return n\n\n# Test the function with radius = 5\nprint(count_Rectangles(5)) ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    c = 180 - (a+b)\n    return c\n\n# Test the function\nprint(find_angle(30,60)) # Output: 90",
        "generated_testcode": "assert find_angle(30, 60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] > max_val:\n            max_val = test_list[i]\n    return max_val\n\n# test the function with an example\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # Output: 10\nprint(find_max((-1, -2, -3, -4, -5, -6, -7, -8, -9, -10) # Output: -1\nprint(find_max((10, 20, 30, 40, 50, 60, 70, 80, 90, 100) # Output: 100\nprint(find_max((0, 1, 2, 3, 4, 5, 6, 7, 8, 9) # Output: 9\n\nprint(find_max((100, 20, 30, 40, 50, 60, 70, 80, 90) # Output: 90",
        "generated_testcode": "assert find_max(()) == None\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x[0] % x[1], zip(nums1,nums2)))\n\n\nnums1 = [2,4,6,8,10]\nnums2 = [2,3,4,5,7]\nprint(moddiv_list(nums1,nums2)) # Output: [0, 2, 2, 0, 3]\n",
        "generated_testcode": "assert moddiv_list(range(1,10), [2,3,4]) == [1, 2, 1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if b**2-4*a*c < 0: \n        return False\n    else: \n        root1 = (-b+math.sqrt(b**2-4*a*c))/(2*a) \n        root2 = (-b-math.sqrt(b**2-4*a*c))/(2*a) \n        if root1 == 2*root2: \n            return True\n        else: \n            return False\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nif Check_Solution(a,b,c):\n    print(\"One root is twice of the other root\")\nelse:\n    print(\"One root is not twice of the other root\")\n\n#Example:\n#Enter the value of a: 2\n#Enter the value of b: 1\n#Enter the value of c: 2\n#One root is twice of the other root ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n - 1) + get_carol(n - 2) + get_carol(n - 3) + 1\n\nprint(get_carol(0)) # 0\nprint(get_carol(1)) # 1\nprint(get_carol(2)) # 2\nprint(get_carol(3)) # 4\nprint(get_carol(4)) # 8\nprint(get_carol(5)) # 15\nprint(get_carol(10)) # 143\n\n# Recursive approach is not efficient for large inputs as it creates a lot of overhead.\n# Let's try iterative approach\n\n# Create a dictionary to store the values of carol numbers\ncarol = {0: 0, 1: 1, 2: 1}\ndef get_carol_iterative(n):\n    for i in range(3, n + 1):\n        carol[i] = carol[i - 1] + carol[i - 2] + carol[i - 3] + 1\n    return carol[n]\n\nprint(get_carol_iterative(0)) # 0\nprint(get_carol_iterative(1)) # 1\nprint(get_carol_iterative(2)) # 2\nprint",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in list1:\n        if i:\n            result.append(i)\n    return result\n\n# Test the function with the example given\nlist1 = [[1,2,3],[],[],[],[4,5,6],[],[],[],[7,8,9]]\nprint(remove_empty(list1)) #[ [1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Test the function with an empty list\nlist2 = []\nprint(remove_empty(list2)) # []\n\n# Test the function with a list of non-empty lists\nlist3 = [[1,2],[3,4],[5,6],[],[],[7,8,9]]\nprint(remove_empty(list3)) #[ [1, 2], [3, 4], [7, 8, 9]\n# Test the function with a list of non-empty and empty lists\nlist4 = [[1,2],[],[3,4],[],[],[],[5,6],[7,8,9]]\nprint(remove_empty(list4)) #[ [1, 2], [3, 4], [5, 6], [7, 8, 9]]",
        "generated_testcode": "assert remove_empty([[1,2,3], [], [4,5], [6,7,8], [], [9,[]], [10], []] ) == [[1,2,3], [4,5], [6,7,8], [9], [10]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    nums_dict = {}\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n            if nums_dict[num] > max_count:\n                max_count = nums_dict[num]\n                max_item = num\n        else:\n            nums_dict[num] = 1\n    return max_item\n\n# Example usage:\nnums = [1, 2, 3, 4, 2, 3, 4, 5, 2, 3, 4, 4, 6, 7, 7, 8, 7, 9]\nprint(max_occurrences(nums)) # Output: 4\n\n# Explanation: The item with maximum occurrences is 4, which occurs 4 times in the list. ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 8, 3, 9] ) == 3\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_list: list of tuples\n    :param K: integer\n    :return: list of tuples with K added to each element in the tuple\n    \"\"\"\n    return [(i[0]+K, i[1]+K) for i in test_list]\n\n\n# Test the function\nprint(add_K_element([(1,2), (3,4), (5,6)], 1))\n# Output: [(2, 3), (4, 5), (6, 7)]\n\nprint(add_K_element([(10, 20), (30, 40), (50, 60)], 5)\n# Output: [(15, 25), (35, 45), (55, 65)]",
        "generated_testcode": "assert add_K_element((), 1) == ()\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    flips = 0\n    i = 0\n    j = 1\n    while j < len(ch):\n        if ch[i] == ch[j]:\n            flips += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 2\n    return flips\n\n# Test cases\nprint(make_flip(\"0101010101\")) # Output: 2\nprint(make_flip(\"0101010110\")) # Output: 1\nprint(make_flip(\"101010101\")) # Output: 1\nprint(make_flip(\"101010110\")) # Output: 0",
        "generated_testcode": "assert make_flip(bin(10101010101) == 3\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while n != 0:\n        count += 1\n        n //=10\n    return count\n\n# Test the function\nprint(count_Digit(123456)) # Output: 5\nprint(count_Digit(7)) # Output: 1\nprint(count_Digit(9876543210)) # Output: 7\nprint(count_Digit(0)) # Output: 1\n",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_product = -1\n    for i in range(len(list_nums)-1):\n        product = list_nums[i]*list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test cases\nprint(adjacent_num_product([1,2,3,4,5,6,7,8])) # Output: 56\nprint(adjacent_num_product([-10,2,3,5,-6,7,8])) # Output: 20\nprint(adjacent_num_product([-1,2,-3,4,-5,6,8])) # Output: 24\n",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8] ) == 56\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n\ndef is_balanced(root):\n\tdef get_height(root):\n\t\tif root is None:\n\t\t\treturn 0\n\t\telse:\n\t\t\tleft_height = get_height(root.left)\n\t\t\tright_height = get_height(root.right)\n\t\t\tif left_height == -1 or right_height == -1:\n\t\t\t\treturn -1\n\t\t\tdiff = abs(left_height - right_height)\n\t\t\tif diff <= 1:\n\t\t\t\treturn max(left_height, right_height) + 1\n\t\t\telse:\n\t\t\t\treturn -1\n\n\treturn get_height(root) != -1\n\n\n#Example usage:\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(4)\nroot.right.right = TreeNode(4)\nroot.right.left = TreeNode(4)\n\nprint(is_balanced(root)) #Output: True\n\nroot.right.left.left = TreeNode(5)\nprint(is_balanced(root)) #Output: False",
        "generated_testcode": "assert __init__(BinaryTree(1) is not None\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tup: tuple\n    :param N: integer\n    :return: new_tup: tuple\n    \"\"\"\n    # create an empty tuple to store the result\n    new_tup = ()\n    # loop through N times and append the tuple to the new_tup\n    for i in range(N):\n        new_tup += test_tup\n    return new_tup\n\n# test the function with (1, 2, 3) and 3\nprint(repeat_tuples((1, 2, 3), 3))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)",
        "generated_testcode": "assert repeat_tuples(('a', 'b', 'c', 'd', 'e'), 3) == ('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd')\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*(l*w + w*h + l*h)\n\n#Take input from user\nlength = float(input(\"Enter the length of the cuboid: \"))\nwidth = float(input(\"Enter the width of the cuboid: \"))\nheight = float(input(\"Enter the height of the cuboid: \"))\n\n#Call the function with input parameters\nsurface_area = lateralsurface_cuboid(length,width,height)\n\n#Display the result\nprint(\"The lateral surface area of the cuboid is: \",surface_area)\n\n#Example output:\n#Enter the length of the cuboid: 5\n#Enter the width of the cuboid: 7\n#Enter the height of the cuboid: 3\n#The lateral surface area of the cuboid is: 56.0\n\n\n#Explanation:\n#The formula to find the lateral surface area of a cuboid is 2(l*w + w*h + l*h) where l,w,h are the length, width and height of the cuboid respectively.\n#In this example, the length is 5, width is 7 and height is 3.\n#Substituting these values in the formula, we get 2(5*7 + 7*3 + 5*3) = 2(35 + 21 + 15) = 2(56) = 112 * 2 = 232. ",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 24\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_list = sorted(price, key=lambda x: float(x[1]))\n    return tuple(sorted_list)\n\n#Example usage:\nprint(float_sort((('apple', 1.999), ('banana', 2.50), ('orange', 0.99), ('grape', 1.30), ('kiwi', 1.20))) # returns (('kiwi', 1.2), ('apple', 1.99), ('banana', 2.5), ('orange', 2.5)\n\n#Explanation:\n#sorted() function is used to sort the tuple by its second element, which is a float value.\n#lambda function is used to convert string to float value and passed as a key argument to sorted() function.\n#Finally, sorted list is converted to tuple and returned. ",
        "generated_testcode": "assert float_sort(()) == ()\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if left_element > right_element:\n        return None\n\n    if A[left_element] == left_element:\n        return left_element\n\n    mid = (left_element + right_element) // 2\n    if A[mid] == mid:\n        return mid\n\n    if A[mid] == mid + 1:\n        return smallest_missing(A, mid + 1, right_element)\n\n    if A[mid] < mid + 1:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n\n\n\n# Test cases\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 9, 10], 10))  # Output: 8\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 10], 10))  # Output: 9\nprint(smallest_missing([1, 2, 3, 4, 6, 7, 8, 9, 10], 10))  # Output: 5\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 9, 10], 10))  # Output: 8\nprint(smallest_missing([1, ",
        "generated_testcode": "assert smallest_missing(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], left_element=1, right_element=9) == 10\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    return nums\n\n\n# Example usage:\nnums = [3, 4, 2, 1, 7, 6, 5, 8, 9]\nsorted_nums = heap_assending(nums)\nprint(sorted_nums)\n\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# time complexity: O(nlogn)\n# space complexity: O(1)\n\n# Heap sort is a comparison based sorting algorithm. The heap",
        "generated_testcode": "assert heap_assending([3, 1, 4, 2, 5, 7, 6, 8, 9, 0, 10] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return l*w*h\n\n# Test cases\nprint(volume_cuboid(2,3,4)) # Output: 24\nprint(volume_cuboid(4,5,6)) # Output: 60\nprint(volume_cuboid(10,10,10)) # Output: 10000",
        "generated_testcode": "assert volume_cuboid(2,3,4) == 24\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        first_char = str[i]\n        remaining_chars = str[:i] + str[i+1:]\n        sub_permutations = permute_string(remaining_chars)\n        for p in sub_permutations:\n            for j in range(len(p)+1):\n                result.append(p[:j] + first_char + p[j:])\n    return result\n\n\n# Test the function with an example string\nprint(permute_string(\"abc\"))\n# Output: ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'acb', 'cba']\n\n# Test the function with an example string with duplicates\nprint(permute_string(\"abb\"))\n# Output: ['abb', 'bab', 'aba', 'abb', 'bab', 'baa', 'aba']\n# Note that the function is returning all permutations including duplicates\n# as it is not handling duplicates correctly.\n",
        "generated_testcode": "assert permute_string(None) == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    return (m * round(n/m))\n\n#Test the function\nprint(round_num(4.3, 0.5))\nprint(round_num(3.7, 0.5))\nprint(round_num(6.1, 2))\nprint(round_num(2.5, 1.5))\nprint(round_num(2.4, 1.5))\nprint(round_num(11.23, 5))\nprint(round_num(5.87, 0.1))\nprint(round_num(10.23, 10))\nprint(round_num(10.97, 10))",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n        else:\n            new_tup.remove(i)\n            new_tup.append(\"replica\")\n    return tuple(new_tup)\n\n\n# Test the function\ntest_tuple = (1, 2, 3, 4, 5, 2, 4, 6, 3, 7)\nprint(remove_replica(test_tuple)) # Output: (1, 2, \"replica\", 3, 4, \"replica\", 5, 6, 7)\n\ntest_tuple2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(remove_replica(test_tuple2)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\ntest_tuple3 = (1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9)\nprint(remove_replica(test_tuple3)) # Output: (1, \"replica\", 2, \"replica\", 3, \"replica\", \"replica\", 4,",
        "generated_testcode": "assert remove_replica(()) == ()\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"  \n    for i in s :  \n        if i != c :  \n            result += i  \n    return result  \n  \n#Example:  \ns = \"hello, world\"  \nc = \"o\"  \nprint(remove_Char(s,c)) # Output: hl, wrld  ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(test_list) == 0:\n        return \"List is empty\"\n    elif len(test_list) == 1:\n        return test_list\n    else:\n        last_elem = test_list.pop()\n        test_list.insert(0, last_elem)\n        return test_list\n\n\n# Test cases\nprint(move_first([1, 2, 3, 4, 5]))\nprint(move_first([1]))\nprint(move_first([])) ",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]), [\"orange\", \"apple\", \"banana\", \"cherry\", \"grape\"]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2*(l*w + l*h + w*h)\n\n# Test the function with the given values\nprint(surfacearea_cuboid(2,4,3)) # Output: 24 ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    my_list = []\n    for i in range(rownum):\n        my_list.append([])\n        for j in range(colnum):\n            my_list[i].append(0)\n    return my_list\n\n# Initialize the array\narr = multi_list(3,3)\n# Add elements to the array\nfor i in range(3):\n    for j in range(3):\n        arr[i][j] = i+j\n# Print the array\nprint(arr)\n\n# Output: [[0, 0, 0], [1, 1, 2], [2, 3, 4]] ",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n# Example usage:\ndata = [['apple', 'banana', 'cherry'], [1, 3, 2], ['cat', 'dog', 'fish'], [4, 5, 6]]\nsorted_data = index_on_inner_list(data, 1)\nprint(sorted_data)\n\n# Output: [['apple', 'banana', 'cherry'], [1, 3, 2], ['cat', 'dog', 'fish'], [4, 5, 6]]\n\ndata = [['apple', 'banana', 'cherry'], [4, 3, 2], ['cat', 'dog', 'fish'], [1, 5, 6]]\nsorted_data = index_on_inner_list(data, 0)\nprint(sorted_data)\n\n# Output: [['apple', 'cat', 'dog'], [4, 5, 6], ['banana', 'fish'], [1, 3, 2]]\n\ndata = [['apple', 'banana', 'cherry'], [4, 3, 2], ['cat', 'dog', 'fish'], [1, 5, 6]]\nsorted_data = index_on_inner_list(data, 2)\nprint(sorted_data)\n\n# Output: [['cat', 'dog', 'fish'], [4, 5, 6], ['apple', 'banana', 'cherry'], [1,",
        "generated_testcode": "assert index_on_inner_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1) == [[1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    start = 0\n    end = n-1\n    while start <= end:\n        if A[start] < A[end]:\n            return end+1\n        mid = (start + end)//2\n        if A[mid] < A[start]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if start == n-1:\n        return 0\n    return start\n\n# Test case\nA = [4,5,6,7,1,2,3]\nprint(find_rotation_count(A)) # Output: 3\n\nA = [4,5,6,7,8,1,2,3]\nprint(find_rotation_count(A)) # Output: 0\nA = [6,7,8,1,2,3,4,5]\nprint(find_rotation_count(A)) # Output: 1\nA = [8,9,1,2,3,4,5,6]\nprint(find_rotation_count(A)) # Output: 2\n\n\n# Time Complexity: O(logN)\n# Space Complexity: O(1)\n# where N is the length of the array\n",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 1, 2, 3] ) == 3\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    binary_n = bin(n)\n    binary_n = list(binary_n)\n    for i in range(1, len(binary_n)) :\n        if binary_n[i] == '1' :\n            if i%2 == 0 :\n                binary_n[i] = '0'\n            else :\n                binary_n[i] = '1'\n        else :\n            if i%2 == 1 :\n                binary_n[i] = '0'\n            else :\n                binary_n[i] = '1'\n    binary_n = ''.join(binary_n)\n    decimal_n = int(binary_n, 2)\n    return decimal_n\n\n\n# Testing the function with some inputs\nprint(even_bit_toggle_number(10)) # Output : 10\nprint(even_bit_toggle_number(5)) # Output : 11\nprint(even_bit_toggle_number(7)) # Output : 6\nprint(even_bit_toggle_number(15)) # Output : 6\nprint(even_bit_toggle_number(32)) # Output : 31\nprint(even_bit_toggle_number(255)) # Output : 60\n\n\n# Note : The above function works by converting the given number to binary, toggling the odd bits and then converting it back to decimal. ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 9\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            break\n    return count+1\n\nn = int(input(\"Enter the length of the array: \"))\narr = []\nfor i in range(n):\n    arr.append(int(input(\"Enter the elements of the array: \")))\nprint(\"Frequency of the smallest value in the array:\", frequency_Of_Smallest(n, arr))",
        "generated_testcode": "assert frequency_Of_Smallest(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + 2*get_perrin(n-3)\n\n\n# Test the function\nprint(get_perrin(1)) # Output: 1\nprint(get_perrin(2)) # Output: 2\nprint(get_perrin(3)) # Output: 4\nprint(get_perrin(4)) # Output: 8\nprint(get_perrin(5)) # Output: 22\nprint(get_perrin(6)) # Output: 42\nprint(get_perrin(7)) # Output: 88\nprint(get_perrin(8)) # Output: 202\nprint(get_perrin(9)) # Output: 4402\nprint(get_perrin(10)) # Output: 8802",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    stack = []\n    count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack and stack[-1] == ')':\n                stack.pop()\n            else:\n                stack.append(i)\n                count += 1\n    return count // 2\n\n\n\n# Test the function\ns = \"((())\"\nprint(swap_count(s))\ns = \"()))(((((((()\"\nprint(swap_count(s))\ns = \"()))\"\nprint(swap_count(s))\ns = \"(()))\"\nprint(swap_count(s))\ns = \"())\"\nprint(swap_count(s))\ns = \"(((((((\"\nprint(swap_count(s))\ns = \"()()(\"\nprint(swap_count(s))",
        "generated_testcode": "assert swap_count(s=\"([])\") == 1\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = int(N,16)\n    if n%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \n# Test the function with some test cases\nprint(even_or_odd(\"10\")) # Output: Odd\nprint(even_or_odd(\"12345\")) # Output: Odd\nprint(even_or_odd(\"a1b2c3\")) # Output: Odd\nprint(even_or_odd(\"f4\")) # Output: Even\nprint(even_or_odd(\"d\")) # Output: Odd\nprint(even_or_odd(\"0\")) # Output: Even\nprint(even_or_odd(\"0000\")) # Output: Even\n",
        "generated_testcode": "assert even_or_odd(0x10) == \"Even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while(n>=2):\n        n>>=1\n        count += 1\n    return count ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\n# Test the function with different values of n\nprint(find_lucas(0))\nprint(find_lucas(1))\nprint(find_lucas(2))\nprint(find_lucas(3))\nprint(find_lucas(4))\nprint(find_lucas(5))\nprint(find_lucas(10))\nprint(find_lucas(20))\n\n\n# Write a function to find the n'th fibonacci number\ndef find_fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_fib(n-1) + find_fib(n-2)\n\n\n# Test the function with different values of n\nprint(find_fib(0))\nprint(find_fib(1))\nprint(find_fib(2))\nprint(find_fib(3))\nprint(find_fib(4))\nprint(find_fib(5))\nprint(find_fib(10))\nprint(find_fib(20))\n",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for item in list:\n        result.append(string+item)\n    return result\n\n# Test the function with the following inputs\nprint(add_string([\"apple\", \"banana\", \"cherry\", \"orange\"], \"fruit_\"))\n# Output: [\"fruit_apple\", \"fruit_banana\", \"fruit_cherry\", \"fruit_orange\"]\n\nprint(add_string([\"car\", \"bus\", \"train\"], \"vehicle_\")\n# Output: [\"vehicle_car\", \"vehicle_bus\", \"vehicle_train\"] ",
        "generated_testcode": "assert add_string([\"apple\", \"banana\", \"cherry\", \"date\"], \"fruit\") == [\"fruitapple\", \"fruitbanana\", \"fruitcherry\", \"fruitedate\"]\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict\n\n\n# Example usage:\nl1 = ['a', 'b', 'c', 'd']\nl2 = ['e', 'f', 'g', 'h']\nl3 = ['i', 'j', 'k', 'l']\nprint(convert_list_dictionary(l1, l2, l3))\n# Output: {'a': {'e': 'i'}, 'b': {'f': 'j'}, 'c': {'h': 'l'}}\n\n# Note: The number of elements in all the lists should be the same.\n",
        "generated_testcode": "assert convert_list_dictionary([\"apple\", \"banana\", \"orange\"], [1, 2, 3], [4, 5, 6]) == {\"apple\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}, \"banana\": {\"fruit\": 4, \"vegetable\": 5, \"dessert\": 6}, \"orange\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}}\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    memo = {}\n    def helper(n):\n        if n <= 1:\n            return n\n        if n not in memo:\n            memo[n] = max(helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5), n)\n        return memo[n]\n    return helper(n)\n\n\n# Test cases\nprint(get_max_sum(100)) # Output: 396\nprint(get_max_sum(20)) # Output: 129\nprint(get_max_sum(10)) # Output: 28\nprint(get_max_sum(5)) # Output: 15\nprint(get_max_sum(25)) # Output: 79\nprint(get_max_sum(1000)) # Output: 2396\nprint(get_max_sum(10000)) # Output: 1452\n",
        "generated_testcode": "assert get_max_sum (10) == 120\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n\n# Test the function with a sample input\nsample_list = [['apple', 'banana', 'cherry', 'banana', 'kiwi', 'apple', 'kiwi', 'mango', 'kiwi']\nprint(max_length_list(sample_list))\n\n# Output: ['banana', 'banana']\n\n# Explanation: The function returns the list with maximum length from the input list using lambda function. ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\", \"pear\", \"strawberry\"] == 6\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup) == len(set(test_tup):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_distinct((1,2,3,4,5,6,7,8)) # True\nprint(check_distinct((1,2,3,4,4,5,6,7) # False\n\n",
        "generated_testcode": "assert check_distinct(()) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string\n\n    :param str1: str\n    :return: str\n    \"\"\"\n    # creating a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # finding the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # if all characters are repeating, return None\n    return None\n\n# testing the function\nprint(first_non_repeating_character(\"abca\")) # Output: b\nprint(first_non_repeating_character(\"geeksforgeeks\")) # Output: o\nprint(first_non_repeating_character(\"hellohello\")) # Output: None\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n",
        "generated_testcode": "assert first_non_repeating_character(str1) == 'a'\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if re.match(r'^[a-zA-Z]', string):\n        return string[-1] == string[0]\n    else:\n        return False\n\n# Test the function with some test cases\nprint(check_char(\"hello\"))  # Should return True\nprint(check_char(\"Python\")) # Should return False\nprint(check_char(\"aaa\"))   # Should return False\nprint(check_char(\"aba\"))   # Should return True\nprint(check_char(\"xyzxyz\")) # Should return False\nprint(check_char(\"a\"))    # Should return False\nprint(check_char(\"B\"))    # Should return False\nprint(check_char(\"\"))    # Should return False\nprint(check_char(\"ab\"))   # Should return False\nprint(check_char(\"abba\"))  # Should return False\nprint(check_char(\"aaa\"))  # Should return False",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a>b:\n        if a>c:\n            if b>c:\n                return a\n            else:\n                return c\n        else:\n            return b\n    else:\n        if b>c:\n            return c\n        else:\n            return b\n\nprint(median_numbers(10,5,15)) # Output: 10\nprint(median_numbers(15,10,5)) # Output: 10\nprint(median_numbers(5,10,15)) # Output: 10\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(1,3,2)) # Output: 2\nprint(median_numbers(3,2,1)) # Output: 2\n\n\n#OR\n\n\ndef median_numbers(a,b,c):\n    sorted_list = sorted([a,b,c])\n    return sorted_list[1]\n\nprint(median_numbers(10,5,15)) # Output: 10\nprint(median_numbers(15,10,5)) # Output: 10\nprint(median_numbers(5,10,15)) # Output: 10\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(1,3,2)) # Output: 2\nprint(median_numbers(3,2,1)) # Output",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize a list to store the sums\n    sums = []\n    \n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # initialize a variable to store the sum\n        digit_sum = 0\n        # iterate over each digit in the number\n        for digit in num_str:\n            # convert the digit to an integer and add it to the sum\n            digit_sum += int(digit)\n        # append the sum to the sums list\n        sums.append(digit_sum)\n    \n    # return the list of sums\n    return sums\n\n\n# test the function with a sample list\nnums = [123, 456, 789, 10000]\nprint(sum_of_digits(nums))  # output: [6, 15, 27]\n\n\n# test the function with another sample list\nnums = [100, 200, 300]\nprint(sum_of_digits(nums))  # output: [1, 2, 3]\n\n\n# test the function with another sample list\nnums = [100000000000000, 9999999999999]\nprint(sum_of_digits(nums))  # output: [1, 9]\n\n\n# test the function with an empty",
        "generated_testcode": "assert sum_of_digits(12345) == 15\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Tuples must be of same length\"\n    else:\n        result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n        return result\n\n# Test cases\nprint(bitwise_xor((1, 3, 5, 7), (2, 4, 6))) # Output: (3, 7, 3)\nprint(bitwise_xor((10, 20, 30), (5, 15, 25))) # Output: (15, 7, 7)\nprint(bitwise_xor((0, 1023, 2555), (10, 2047, 254))) # Output: (1023, 2039, 253)\nprint(bitwise_xor((100, 20, 30, 40), (5, 15, 25, 35)) # Output: (105, 25, 55, 45)\nprint(bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))) # Output: Tuples must be of same length\n\n# Additional test case\nprint(bitwise_xor((10, 0, 15),",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5, 6, 7, 8) , (2, 4, 6, 8, 10, 12, 14) ) == (3, 6, 10, 14, 10, 14, 10)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function\nprint(extract_freq([(1,2,3), (1,2,3), (1,2,3), (2,3,4), (3,4,5), (1,2,3), (1,2,3), (2,3,4)]))\n# Output: {(1, 2, 3): 3, (2, 3, 4): 2, (3, 4, 5): 1}\n\n\n# Another approach\ndef extract_freq_2(test_list):\n    freq_dict = {}\n    for i in test_list:\n        key = tuple(sorted(i))\n        if key in freq_dict:\n            freq_dict[key] += 1\n        else:\n            freq_dict[key] = 1\n    return freq_dict\n\n# Test the function\nprint(extract_freq_2([(1,2,3), (1,2,3), (1,2,3), (2,3,4), (3,4,5), (1,2,3), (1,2,3), (2,3,4)]))\n# Output: {(1, 2, 3",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"] == {(\"apple\", 4), (\"banana\", 4), (\"orange\", 4)}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tuple = ()\n        for j in range(len(test_tup1[i])):\n            temp_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tuple,)\n    return result_tup\n\n# Test the function with sample inputs\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(add_nested_tuples(test_tup1, test_tup2))\n# Output: ((11, 13, 15), (14, 16, 18), (17, 19, 21))\n\ntest_tup1 = ((10, 20), (30, 40), (50, 60))\ntest_tup2 = ((1, 2), (3, 4), (5, 6))\nprint(add_nested_tuples(test_tup1, test_tup2))\n# Output: ((11, 22), (33, 44), (55, 66",
        "generated_testcode": "assert add_nested_tuples(((1, (2, 3), (4, 5)), (1, (2, 3)) ) == (2, (4, 6) )\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if r==0 or r==n: \n        return 1\n    num = 1\n    den = 1\n    for i in range(1, r+1): \n        num = (num * (n-i)%p)%p \n        den = (den * i%p)%p \n    return (num%p) ",
        "generated_testcode": "assert ncr_modp(5, 2, 100000000000007) == 10\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    )\n\n    if pattern.match(str):\n        return True\n    else:\n        return False\n\n\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google.com/\"))  # True\nprint(is_valid_URL(\"https://www.google.com/search\"))  # True\nprint(is_valid_URL(\"https://www.google.com/search/\"))  # True\nprint(is_valid_URL(\"http://www.google.com\"))  # True\nprint(is_valid_URL(\"ftp://www.google.com\"))  # True\nprint(",
        "generated_testcode": "assert is_valid_URL(https://www.google.com) == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\n# Test the function with some values\nprint(minimum(3,5)) # Output: 3\nprint(minimum(7,2)) # Output: 2\nprint(minimum(10,10)) # Output: 10\nprint(minimum(-2,7) # Output: -2\n\n\n# Write a python function to find the maximum of two numbers\ndef maximum(a,b):   \n    if a>b:\n        return a\n    else:\n        return b\n\n# Test the function with some values\nprint(maximum(3,5)) # Output: 5\nprint(maximum(7,2)) # Output: 7\nprint(maximum(10,10)) # Output: 10\nprint(maximum(-2,7) # Output: 7\n\n\n# Write a python function to find the absolute difference between two numbers\ndef abs_difference(a,b):\n    return abs(a-b)\n\n# Test the function with some values\nprint(abs_difference(3,5)) # Output: 2\nprint(abs_difference(7,2)) # Output: 5\nprint(abs_difference(10,10)) # Output: 0\nprint(abs_difference(-2,7) # Output: 9\n\n\n# Write a python function to find the sum of two numbers\ndef sum_numbers(a,b):\n    return a+",
        "generated_testcode": "assert minimum(5, 10) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in tuple1:\n        if i == tuplex:\n            return True\n    return False\n\n#example usage:\ntup = (1,2,3,4,5,6,7)\nprint(check_tuplex(4,tup))\n#output: True\n\ntup = (1,2,3,4,5,6,7)\nprint(check_tuplex(8,tup)\n#output: False\n\n#Note: The function checks if the element is present in the tuple and returns True if it is, otherwise it returns False\n\n#You can use this function to check if an element exists within a tuple by passing the element and the tuple as arguments to the function. ",
        "generated_testcode": "assert check_tuplex(2, (1,2,3,4,5,6,7,8,9) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x == 0:\n        return 0\n    while x:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return 1\n    return 0\n\n# Test the function\nprint(find_Parity(13)) # Output: 1\nprint(find_Parity(17)) # Output: 1\nprint(find_Parity(23)) # Output: 0\nprint(find_Parity(42)) # Output: 0\nprint(find_Parity(11)) # Output: 1\n",
        "generated_testcode": "assert find_Parity(10) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str_num = str(n)\n    num_list = list(str_num)\n    max_num = max(num_list)\n    max_index = num_list.index(max_num)\n    num_list.remove(max_num)\n    num_list.sort(reverse=True)\n    num_list.insert(max_index, max_num)\n    return int(''.join(num_list))\n\n# Test cases\nprint(rearrange_bigger(12345)) # Output: 54231\nprint(rearrange_bigger(5349)) # Output: 9534\nprint(rearrange_bigger(12334)) # Output: 3421\nprint(rearrange_bigger(123)) # Output: 321\nprint(rearrange_bigger(54321)) # Output: 54321\nprint(rearrange_bigger(54332)) # Output: 5432\nprint(rearrange_bigger(554321)) # Output: 54321\nprint(rearrange_bigger(5554321)) # Output: 554321\nprint(rearrange_bigger(543321)) # Output: 54332\nprint(rearrange_bigger(987654321)) # Output",
        "generated_testcode": "assert rearrange_bigger(12345) == 32451\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i = j = 0\n    n, m = len(nums1), len(nums2)\n    count = 0\n    while i < n and j < m and count < k:\n        pairs.append((nums1[i], nums2[j]))\n        count += 1\n        if i < n-1 and nums1[i] < nums1[i+1]:\n            i += 1\n        else:\n            i = 0\n        if j < m-1 and nums2[j] < nums2[j+1]:\n            j += 1\n        else:\n            j = 0\n    return pairs\n\n# Test the function with input\nnums1 = [1, 7, 11, 15]\nnums2 = [2, 5, 10]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))\n\n# Output: [(1, 2), (1, 5), (1, 10)]\n\n# Time complexity: O(nlogn + mlogm + k) where n and m are the lengths of nums1 and nums2 respectively.\n# Space complexity: O(k)\n",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 2, 3], nums2=[4, 5, 6], k=5) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (3, 4)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: x[1])\n    return min(list1[0][0] * list1[1][0], list1[-1][0] * list1[-2][0])\n\n# Example usage:\nlist1 = [(4, 5), (2, 6), (3, 8), (9, 10), (11, 2), (1, 7), (8, 4)]\nprint(min_product_tuple(list1))  # Output: 56 (4*6 or 8*7 is the minimum product)\n\nlist2 = [(1, 2), (3, 4), (2, 5), (6, 7), (4, 8), (5, 9)]\nprint(min_product_tuple(list2))  # Output: 16 (4*6 or 5*5 is the minimum product)\n\nlist3 = [(1, 10), (10, 2), (3, 5), (6, 1), (8, 7), (2, 3)]\nprint(min_product_tuple(list3))  # Output: 20 (2*3 or 1*10 is the minimum product) ",
        "generated_testcode": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)] ) == 32\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n\n# Testing the function\nlist1 = [3, 7, \"hello\", 9.5, \"world\", 2, 5.6, True, 10, \"Python\", 4]\nprint(min_val(list1)) # Output: 2\n\nlist2 = [2, 8, \"apple\", 4, 9, \"orange\", 5, 7, \"banana\", 6]\nprint(min_val(list2)) # Output: 2\nlist3 = [10, \"dog\", \"cat\", 5, 12, \"elephant\", False, 8]\nprint(min_val(list3)) # Output: False\nlist4 = [2.5, \"apple\", 8, 3.8, \"grape\", 12]\nprint(min_val(list4)) # Output: 2.5",
        "generated_testcode": "assert min_val([\"apple\", 5, 10, \"banana\", 3, \"orange\", 2, \"kiwi\", 15, 7, \"grape\", 8]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word\n\n# Test the function with sample input\nprint(snake_to_camel('this_is_a_test_string'))  # Output: thisIsATestString\nprint(snake_to_camel('a_test_string_to_convert'))  # Output: aTestStringToConvert\nprint(snake_to_camel('snake_case_string_converter'))  # Output: snakeCaseStringConverter\n\n# Write a function to convert the given camel case string to snake case string by using regex\ndef camel_to_snake(word):\n    words = []\n    for index, letter in enumerate(word):\n        if index > 0 and letter.isupper():\n            words.append('_')\n        words.append(letter)\n    return ''.join(words)\n\n# Test the function with sample input\nprint(camel_to_snake('thisIsATestString'))  # Output: this_is_a_test_string\nprint(camel_to_snake('aTestStringToConvert'))  # Output: a_test_string_to_convert\nprint(camel_to_snake('snakeCaseStringConverter'))  # Output: snake_case_string_converter\n\n# Write a function to convert",
        "generated_testcode": "assert snake_to_camel(\"hello_world\" ) == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param l: list of integers\n    :return: list with odd numbers removed\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n\n\n#Test the function\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n# Output: [2, 4, 6, 8, 10]\nprint(remove_odd([1, 3, 5, 7, 9, 11]))\n# Output: []\nprint(remove_odd([2, 4, 6, 8]))\n# Output: [2, 4, 6, 8]\n",
        "generated_testcode": "assert remove_odd([1,2,3,4,5,6,7,8,9,10] ) == [2,4,6,8,10]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for tup in list1:\n        new_list.append(tup[n-1])\n    return new_list\n\n# Test the function\nprint(extract_nth_element([(1,2,3,4,5), (6,7,8,9)], 2))\n# Output: [2, 8]\n\nprint(extract_nth_element([(10,20,30,40,50), (60,70,80), (90,100)], 3)\n# Output: [3, 80, 100]\n",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 2\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\n#Example:\nlist1=[1,2,3,4,5,6]\nlist2=[4,5,6,7,8]\nprint(overlapping(list1,list2)) # Output: True\nlist1=[1,2,3,4,5]\nlist2=[4,5,6,7,8]\nprint(overlapping(list1,list2)) # Output: False",
        "generated_testcode": "assert overlapping([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# Test cases\nprint(max_Product([-10, -10, 5, 6, 3])) # Output: 60 ",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 72\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 2: \n        return n \n    elif n == 3: \n        return n \n    elif n % 3 == 0: \n        return n \n    elif n % 3 == 1: \n        return 1 \n    else: \n        return breakSum(n-1) + breakSum(n-2) + breakSum(n-3) \n\nprint(breakSum(10))\nprint(breakSum(15))\nprint(breakSum(25))\nprint(breakSum(40)) ",
        "generated_testcode": "assert breakSum(10) == 33\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    first_elements = []\n    for i in Input:\n        first_elements.append(i[0])\n    common_element = set(first_elements)\n    return common_element\n\n# Example usage:\nInput = [(1, 'a'), (2, 'b'), (1, 'c'), (3, 'd'), (1, 'e')]\nprint(group_tuples(Input)) # Output: {1} ",
        "generated_testcode": "assert group_tuples([(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)] ) == (1,2,3)\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        current_len = 1\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                current_len += 1\n            else:\n                if current_len > max_len:\n                    max_len = current_len\n                    max_sublist = lst[i:i+max_len]\n                current_len = 1\n    return max_sublist\n\n# test the function\nlst = [1,2,2,3,3,4,4,4,5,5,5,6,6,7,7]\nprint(Find_Max(lst))\n\n\n# Output: [3,3,4,4]\n\n# Explanation: The maximum length sublist is [3,3,4,4] which occurs more than once in the given list. ",
        "generated_testcode": "assert Find_Max([1,2,3,4,5,6,7,8,9] ) == 6\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for num in list1:\n        sum += round(num)\n    return sum * len(list1)\n\n# Test the function with some sample inputs\nprint(round_and_sum([1.23, 4.56, 7.89, 10.11111, 12.123456])) # Expected output: 78\nprint(round_and_sum([3.141592, 2.71828, 3.14159, 2.23606, 3.14159, 3.14159, 2.71828, 3.14159])) # Expected output: 10\n\n# Write a function to check if a string contains only vowels\ndef contains_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    for char in string:\n        if char not in vowels:\n            return False\n    return True\n\n# Test the function with some sample inputs\nprint(contains_vowels(\"hello\")) # Expected output: False\nprint(contains_vowels(\"aeiou\")) # Expected output: True\nprint(contains_vowels(\"AEIOU\")) # Expected output: True\nprint(contains_vowels(\"Python\")) # Expected output: False\nprint(contains_vowels(\"Aeiou\")) # Expected output:",
        "generated_testcode": "assert round_and_sum([1.2345, 2.5678, 3.9999, 4.0001] ) == 10\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Cube sum of first\",n,\"even numbers is\",cube_Sum(n))\n\n#Example: \n#If n is 4, then function will return the cube sum of first 2 even numbers, which are 2 and 4. 2^3 + 4^3 = 32. So output will be 32. ",
        "generated_testcode": "assert cube_Sum(5) == 2255\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result\n\n#Test the function with sample input\nprint(concatenate_tuple((\"hello\", \"world\", \"!\")) #Output: \"helloworld!\"\nprint(concatenate_tuple((\"hello\", \" \", \"world\", \"!\", \"How\", \"are\", \"you\")) #Output: \"hello world!Howareyou\" ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"Python\") == \"Hello,World,Python\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n\n#Test the function with n=10\nprint(find_Average_Of_Cube(10))\n\n#Test the function with n=5\nprint(find_Average_Of_Cube(5))",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 35.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 0 or n == 0: \n        return 0\n    dp = [[0 for j in range(n)] for i in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0: \n                dp[i][j] = gold[i][j] \n            elif j == 0: \n                dp[i][j] = gold[i][j] \n            elif i == 1: \n                dp[i][j] = max(dp[i-1][j], gold[i][j]) \n            elif j == 1: \n                dp[i][j] = max(dp[i][j-1], gold[i][j]) \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], gold[i][j]) \n    for i in range(1, m): \n        for j in range(1, n): \n            if dp[i][j] < gold[i][j] + min(dp[i-1][j], dp[i][j-1]): \n                dp[i][j] = gold[i][j] + min(dp[i-1][j], dp[i][j-1]) \n    return dp[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold(gold = [\n    [1, 3, 1, 1, 5, 1, 0, 1, 0, 1],\n    [2, 2, 2, 2, 2, 2, 2, 2, 2],\n    [0, 0, 3, 0, 3, 0, 0, 0],\n    [0, 4, 0, 0, 5, 0, 0, 4],\n    [1, 3, 0, 0, 3, 0, 2, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 1]\n], m = 5, n = 6) == 12\n\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return tuple(result)\n\n#Test the function with some sample inputs\nprint(extract_rear((\"apple\", \"banana\", \"cherry\", \"grape\")) # Output: ('e', 'a', 'e')\nprint(extract_rear(\"hello\", \"world\", \"python\", \"programming\")) # Output: ('o', 'd', 'g')\nprint(extract_rear(\"foo\", \"bar\", \"baz\")) # Output: ('o', 'r', 'z')\n\n\n#Alternative solution\ndef extract_rear(test_tuple):\n    return tuple(i[-1] for i in test_tuple)\n#Test the function with some sample inputs\nprint(extract_rear(\"apple\", \"banana\", \"cherry\", \"grape\")) # Output: ('e', 'a', 'e')\nprint(extract_rear(\"hello\", \"world\", \"python\", \"programming\") # Output: ('o', 'd', 'g')\nprint(extract_rear(\"foo\", \"bar\", \"baz\")) # Output: ('o', 'r', 'z') ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"e\", \"a\", \"r\", \"e\", \"y\")\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n\nlist1 = [[1,2,3,4],[5,6,7],[8,9,10],[1,2,3],[4,5,6]]\nx = 2\nprint(count_element_in_list(list1, x)) # Output: 3\n\nlist2 = [[1,2,3,4],[5,6,7],[8,9,10],[1,2,3],[4,5,6],[2,4,6]]\nx = 4\nprint(count_element_in_list(list2, x)) # Output: 2\nlist3 = [[1,2,3,4],[5,6,7],[8,9,10],[1,2,3],[4,5,6],[2,4,6],[4,4,4]]\nx = 4\nprint(count_element_in_list(list3, x)) # Output: 2\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n\n# Improved solution\n\ndef count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\nlist1 = [[1,2,3,4],[5,6,7],[8,9,10],[",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 1, nums))\n\n#Example Usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums))\n# Output: [1, 3, 5, 7, 9]\n\n\nnums = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(filter_oddnumbers(nums))\n# Output: []\n\nnums = [1, 3, 5, 7, 9]\nprint(filter_oddnumbers(nums))\n# Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers(range(1, 10)) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not re.match(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', dt):\n        return \"Invalid date format\"\n    return re.sub(r'^([0-9]{4})-([0-9]{2})-([0-9]{2})$', r'\\3-\\2-\\1', dt)\n\n# Test cases\nprint(change_date_format('2021-12-31')) # Output: 31-12-2021\nprint(change_date_format('2021-01-31')) # Output: 31-01-2021\nprint(change_date_format('2022-13-31')) # Output: Invalid date format\nprint(change_date_format('2021-12-31T12:34:56')) # Output: Invalid date format\n\n# Explanation:\n# The function first checks if the input string matches the regex pattern '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'. If it does, then it uses the re.sub() method to swap the first two groups of digits with the last two and the last two groups of digits with the first two.\n# If the input doesn't match the regex pattern, it returns \"Invalid date format\". ",
        "generated_testcode": "assert change_date_format(2021-12-31) == 31-12-2021\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n\n# Example usage:\nmy_list = [12, 34, 5, 23, 8, 7, 1, 29, 4, 10, 5, 3]\nprint(\"Original List: \", my_list)\nsorted_list = shell_sort(my_list)\nprint(\"Sorted List: \", sorted_list)\n\n\n# Output:\n# Original List:  [12, 34, 5, 23, 8, 7, 1, 29, 4, 10, 5, 3]\n# Sorted List:  [1, 3, 4, 5, 5, 7, 8, 10, 12, 23, 29] ",
        "generated_testcode": "assert shell_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 3, 4, 5] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            result.append(tuple(test_tup1[i]) + test_tup2[i])\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n\n# test cases\nprint(and_tuples(((1, 2, (3, 4)), (5, 6, 7)))  # should return (1, 2, 3, 4, 5, 6, 7)\nprint(and_tuples((1, 2, 3), (4, 5, (6, 7, 8))  # should return (1, 2, 3, 4, 5, (6, 7, 8)\nprint(and_tuples((\"a\", \"b\"), (\"c\", \"d\", \"e\", \"f\"))  # should return (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\nprint(and_tuples((\"a\", 1), (True, 3, [4, 5]))  # should return (\"a\", 1, True, 3, 4, 5)\nprint(and_tuples((), (1, 2, 3, (4, 5, 6)))  # should return (1, 2, 3, 4,",
        "generated_testcode": "assert and_tuples((), ()) == ()\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0:\n        return None\n    return -b/2*a\n\n# Test cases\nprint(parabola_directrix(0, 0, 1))  # None\nprint(parabola_directrix(1, 0, 1))  # None\nprint(parabola_directrix(1, 1, 2))  # -1.0\nprint(parabola_directrix(1, -1, 3))  # 0.5\nprint(parabola_directrix(-1, 0, -2))  # -1.0\n",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Takes two lists and returns True if they have at least one common element, False otherwise.\n    \"\"\"\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n# Test cases\nprint(common_element([1, 2, 3, 4], [5, 6, 7])) # False\nprint(common_element([1, 2, 3, 4], [3, 6, 7])) # True\nprint(common_element([1, 2, 3, 4], [4, 6, 7])) # True\nprint(common_element([1, 2, 3], [4, 5, 6])) # False\n\n# Can you think of a way to optimize the function using sets? ",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"grape\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 0.5*(base1+base2)*(height/2)\n\n# Test the function with sample inputs\nprint(median_trapezium(4,6,7)) # Output: 15.0\nprint(median_trapezium(10,15,12)) # Output: 13.5\nprint(median_trapezium(10,20,16)) # Output: 15.0",
        "generated_testcode": "assert median_trapezium(3,4,5) == 4.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return True\n    return False\n\n# Testing the function\nprint(check_greater([1, 2, 3, 4, 5], 4))  # True\nprint(check_greater([1, 2, 3, 4, 5], 6))  # False",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r'a[b]+'\n    return re.search(pattern, text) is not None\n\n# Test cases\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"bbbba\")) # True\nprint(text_match_one(\"abbbbbc\")) # True\nprint(text_match_one(\"abbcc\")) # False\nprint(text_match_one(\"acb\")) # False\nprint(text_match_one(\"b\")) # False\nprint(text_match_one(\"\")) # False\n\n# Explanation:\n# The function first creates a regular expression pattern that matches 'a' followed by one or more 'b's. ",
        "generated_testcode": "assert text_match_one(\"abbbc\" ) == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 10\n\n#test the function\nprint(last_Digit(12345)) # Output: 5\nprint(last_Digit(123)) # Output: 3\nprint(last_Digit(56789)) # Output: 9\n",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    negative_numbers = []\n    for i in list1:\n        if i < 0:\n            negative_numbers.append(i)\n    return negative_numbers\n\n#Test the function\nlist1 = [-4, 5, 2, -6, -9, 8, -3, 0, 7, -10]\nprint(neg_nos(list1)) # Output: [-4, -6, -9, -3, -10]\n\nlist2 = [1, 3, 4, 6, 8, 9, 0]\nprint(neg_nos(list2)) # Output: []\nlist3 = []\nprint(neg_nos(list3)) # Output: []\nlist4 = [0, 0, 0, 0, 0, 0]\nprint(neg_nos(list4)) # Output: []\nlist5 = [-6, -2, -4, 5, -9, -8, -7]\nprint(neg_nos(list5)) # Output: [-6, -2, -4, -9, -8, -7]\n\n# Note: The function should work for any given list of integers, not just the ones given in the example. ",
        "generated_testcode": "assert neg_nos([1,2,3,-4,5,-6,7,-8,9] ) == [-4,-6,-8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n\n# Test the function\nprint(remove_odd(\"Hello World\")) # \"HloWrld\"\nprint(remove_odd(\"Python\")) # \"Pytn\"\nprint(remove_odd(\"Java\")) # \"Jv\"\nprint(remove_odd(\"\")) # \"\"",
        "generated_testcode": "assert remove_odd(None) == \"\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n\n#Example usage:\ntest_list = [(1,2), (2,3), (3,4), (4,1), (5,6), (6,5)]\nprint(count_bidirectional(test_list)) # Output: 3\n\ntest_list = [(1,2), (2,3), (3,4), (4,5), (5,6)]\nprint(count_bidirectional(test_list)) # Output: 0\ntest_list = [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,1)]\nprint(count_bidirectional(test_list)) # Output: 2\n",
        "generated_testcode": "assert count_bidirectional([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\"]) == 4\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result\n\n# Test the function with some examples\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9])) # should return 123456789\nprint(multiple_to_single([10, 20, 30])) # should return 12030\nprint(multiple_to_single([98, 76, 54, 32, 10])) # should return 9876543210",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 123456789\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    adverbs = ['very', 'so', 'really', 'very', 'sometimes', 'never', 'often', 'frequently', 'seldom', 'occasionally', 'always', 'never', 'hardly', 'seldom', 'rarely', 'rarely', 'usually', 'frequently', 'quite', 'sometimes', 'frequent', 'occasionally', 'rare', 'usually', 'often', 'extremely', 'rarely', 'almost', 'seldom', 'sometimes', 'often', 'frequently', 'occasionally', 'never', 'rarely', 'only', 'mostly', 'rarely', 'frequently', 'seldom', 'usually', 'rarely', 'seldom', 'usually', 'usually', 'never', 'occasionally', 'frequently', 'seldom', 'rarely', 'often', 'frequently', 'occasionally', 'rarely', 'always', 'rarely', 'usually', 'frequently', 'sometimes', 'occasionally', 'rarely', 'never', 'rarely', 'often', 'sometimes', 'rarely', 'seldom', 'often', 'frequently', 'occasionally', 'never', 'never', 'rarely', 'rarely', 'occasionally', 'usually', 'rarely', 'rarely', 'occasionally', 'seldom', 'very', 'never",
        "generated_testcode": "assert find_adverb_position(\n    \"The dog is running quickly, but the cat is running slowly.\") == [(\"running\", 10, 11), (\"running\", 19)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Calculates the surface area of a cube with side length l\n    \"\"\"\n    surface_area = 6 * l**2\n    return surface_area\n\n# Test the function with an example\nprint(surfacearea_cube(4)) # Output: 96\n\n\n# Test the function with a different example\nprint(surfacearea_cube(2)) # Output: 32\n",
        "generated_testcode": "assert surfacearea_cube(2) == 6*4\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n\n# Test the function\nnums = [1, 2, -3, 4, -2, 6, 7, 8, -1, -5, 3]\nprint(positive_count(nums))\n",
        "generated_testcode": "assert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5/9\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    largest_neg = None\n    for num in list1:\n        if num < 0 and (not largest_neg or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n\n# Test the function\nprint(largest_neg([1, 2, -3, 4, -6, -7, 8, -5, -10])) # Output: -6\nprint(largest_neg([1, 2, 3, 4, -5, -1, -10, -3])) # Output: -1\nprint(largest_neg([-1, 2, -3, 4, -6, 5, -4, -2])) # Output: -6\nprint(largest_neg([-1, -3, -5, -7, -9, -2, -4])) # Output: -1\nprint(largest_neg([1, -2, 3, 4, 5, 6, 7])) # Output: None",
        "generated_testcode": "assert largest_neg([1, 2, 3, -5, 4, -3, -7, 0, -10, 8, -2] ) == -3\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        new_tup = tuple(x[:-K] for x in tup)\n        result.append(new_tup)\n    return result\n\n# Example usage:\ntest_list = [(123, 456, 789), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5), (1, 2, 3)]\nK = 2\nprint(trim_tuple(test_list, K)) # Output: [(12,), (1, 2), (1, 2, 3)]\n\ntest_list = [(123, 456, 789), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)]\nK = 3\nprint(trim_tuple(test_list, K)) # Output: [(123,), (1, 2, 3), (1, 2, 3), (1, 2)]\n\ntest_list = [(123, 456, 789), (1, 2, 3), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4)]\nK =",
        "generated_testcode": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (11,12,13,14,15,16,17,18,19,20), (21,22,23,24,25,26,27,28,29,30)], 3) == [(1,2,3),(11,12,13),(21,22,23)]\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] * test_tup2[i],)\n    return result_tuple\n\n# Test the function\nt1 = (2, 3, 4, 5)\nt2 = (5, 4, 3)\nprint(index_multiplication(t1, t2))\n\n# Output: (10, 12, 15) ",
        "generated_testcode": "assert index_multiplication((1,2,3,4,5), (5,4,3,2) ) == (5,8,6,10)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {} \n    for i in lst: \n        count_dict[i] = 0\n    for i in tup: \n        if i in lst: \n            count_dict[i] += 1\n    return count_dict ",
        "generated_testcode": "assert count_Occurrence(('abc', ['a', 'b', 'c', 'd']) == {'a': 1, 'b': 1, 'c': 1, 'd': 0}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n#Example usage:\nnums = [1,2,3,4,5,6]\nprint(cube_nums(nums)) #[1, 8, 27, 64, 125]\n\n#Explanation:\n#The lambda function takes each element of the list and raises it to the power of 3 using the ** operator. Then it returns the result as a list using the map() function.\n\n#We can also use the lambda function as an argument to the map() function. Here, we pass it as the second argument along with the list of numbers. ",
        "generated_testcode": "assert cube_nums(range(1, 5)) == [1, 8, 27, 27, 64, 125]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def is_perrin_number(num):\n        if num == 1 or num == 2:\n            return True\n        if num % 2 == 0 or num == 3:\n            return False\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            return False\n        for i in range(3, int(root)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    def perrin_numbers(n):\n        result = []\n        for i in range(n):\n            if is_perrin_number(i):\n                result.append(i)\n        return result\n    \n    perrin_list = perrin_numbers(n)\n    total = sum(perrin_list)\n    return total\n\n\n# Test the function\nprint(cal_sum(10)) # Output: 28\nprint(cal_sum(20)) # Output: 100\nprint(cal_sum(30)) # Output: 76",
        "generated_testcode": "assert cal_sum(5) == 15\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # calculate the length of the sides of the triangle\n    a = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    b = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    c = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    # check if the sum of any two sides is greater than the third side\n    if a+b>c and a+c>b and b+c>a: \n        print(\"This is a valid triangle\")\n    else:\n        print(\"This is not a valid triangle\")\n\n\n# test the function\ncheck_Triangle(0,0,3,4,0)\ncheck_Triangle(0,0,4,0,3)\ncheck_Triangle(4,0,0,3)\ncheck_Triangle(2,2,2,2)\ncheck_Triangle(3,0,0,4,0)\ncheck_Triangle(0,0,0,0)\ncheck_Triangle(1,1,3,5)\n",
        "generated_testcode": "assert check_Triangle(0,0,3,0,4,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    extracted_strings = []\n    for i in range(len(l)):\n        if len(str) <= len(l[i]):\n            extracted_strings.append(l[i][:str])\n        else:\n            extracted_strings.append(l[i])\n    return extracted_strings\n\n\n# Test the function\nprint(extract_string(3, [\"hello\", \"world\", \"python\", \"programming\"]))\nprint(extract_string(5, [\"hello\", \"world\", \"python\", \"programming\"])",
        "generated_testcode": "assert extract_string([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"], 3) == [\"hel\", \"wor\", \"pro\", \"is\", \"fun\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)\n\n# Test the function\ntext1 = \"  This is a sample string with whitespaces.  \"\nprint(remove_whitespaces(text1))\n\n# Output: \"Thisisasamplestringwithwhitespaces.\"\n\ntext2 = \"  Hello world!  \"\nprint(remove_whitespaces(text2))\n# Output: \"Helloworld!\" ",
        "generated_testcode": "assert remove_whitespaces(\"Hello, World!  \" ) == \"Hello,World!\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return None\n\n#test the function \nprint(loss_amount(1000,80)) # output: 20\nprint(loss_amount(200,50)) # output: None\nprint(loss_amount(120,110)) # output: None\nprint(loss_amount(130,100)) # output: None\nprint(loss_amount(120,120)) # output: 0\n\n\n# write a function that takes two arguments, a string and a number, and returns a string with that many asterisks\ndef repeat_string(string, number):\n    if number <= 0:\n        return \"Please enter a positive number\"\n    else:\n        return string * number\n\n#test the function\nprint(repeat_string(\"*\",10)) # output: ***********\nprint(repeat_string(\"*\",-5) # output: Please enter a positive number\nprint(repeat_string(\"abc\",3) # output: abcabcabc\n\n# write a function that takes a list of strings and returns the length of the longest string in the list\ndef longest_string(strings_list):\n    longest = max(strings_list, key=len)\n    return len(longest)\n\n# test the function\nprint(longest_string([\"apple\", \"banana\", \"cherry\", \"grape\", \"",
        "generated_testcode": "assert loss_amount(1000, 80) == 20\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum\n\n# Test the function\nprint(sumofFactors(12)) # Output: 12 (12 is the sum of its even factors, 2 + 6)\nprint(sumofFactors(24)) # Output: 12 (24 is the sum of its even factors, 2 + 4 + 6 + 8 + 12)\nprint(sumofFactors(15)) # Output: 0 (15 does not have any even factors)\nprint(sumofFactors(8)) # Output: 8 (8 is the sum of its even factors, 2 + 4 + 8) ",
        "generated_testcode": "assert sumofFactors(12) == 6, \"Test case 1 failed\"\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'\\bz\\w+\\b'\n    return re.findall(pattern, text)\n\n#Test the function with a sample text\ntext = \"The quick brown fox jumps over the lazy dog. Overzilla is a mythical creature with superpowers. The dog is very zen.\"\nprint(text_match_wordz(text)) # Output: ['overzilla', 'zen']\n\n#Write a function that matches a word containing 'z' and 'i'.\ndef text_match_zi(text):\n    pattern = r'\\bzi\\w*\\b'\n    return re.findall(pattern, text)\n\n#Test the function with a sample text\ntext = \"The quick brown fox jumps over the lazy dog. Overzilla is a mythical creature with superpowers. The dog is very zen.\"\nprint(text_match_zi(text)) # Output: ['Overzilla']\n\n#Write a function that matches a word containing 'z' and 'o'.\ndef text_match_zo(text):\n    pattern = r'\\bz[a-zA-Z]*o\\b'\n    return re.findall(pattern, text)\n\n#Test the function with a sample text\ntext = \"The quick brown fox jumps over the lazy dog. Overzilla is a mythical creature with superpowers. The dog is very zen.\"\nprint(text_match_zo(text)) # Output: ['Overzilla', 'zen']\n\n#Write a function that matches a word containing '",
        "generated_testcode": "assert text_match_wordz([\"hello\", \"world\", \"python\", \"programming\", \"zebra\", \"apple\", \"banana\", \"orange\"] == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True\n\n# Example usage:\nprint(check_monthnumb_number(12)) # True\nprint(check_monthnumb_number(5)) # True\nprint(check_monthnumb_number(2)) # False\nprint(check_monthnumb_number(8)) # True\nprint(check_monthnumb_number(13)) # False\nprint(check_monthnumb_number(4)) # False",
        "generated_testcode": "assert check_monthnumb_number(2) == False\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings as input and returns a new list with the strings reversed\n    \"\"\"\n    # Create an empty list to store the reversed strings\n    reversed_strings = []\n\n    # Iterate through each string in the input list\n    for string in stringlist:\n        # Reverse the string using slicing and add it to the new list\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\n\n# Test the function\nprint(reverse_string_list([\"hello\", \"world\", \"python\", \"codechallenge\"])\n# Output: ['olleh', 'dlrow', 'gninhtoc']\n",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"] == [\"olleh\", \"dnorw\", \"gnimmargorp\"]\n\n# Test case 2\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(lst) \n    if n == 0: \n        return [] \n    elif n == 1: \n        return lst \n    else: \n        min_len = float('inf') \n        min_lst = lst[0] \n        for i in range(n): \n            temp_len = len(lst[i]) \n            if temp_len < min_len: \n                min_len = temp_len \n                min_lst = lst[i] \n        return min_lst ",
        "generated_testcode": "assert Find_Min([1,2,3,4,5,6,7,8,9] ) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    area = l * b\n    return area\n\n#Test the function\nprint(rectangle_area(5,10)) # Output: 50\nprint(rectangle_area(10,5)) # Output: 50\n\n\n# Write a function to find the area of a triangle\ndef triangle_area(base,height):\n    area = 0.5 * base * height\n    return area\n\n#Test the function\nprint(triangle_area(10,10)) # Output: 50\nprint(triangle_area(5,10)) # Output: 25\n\n\n# Write a function to find the area of a circle\ndef circle_area(radius):\n    area = 3.14 * radius ** 2\n    return area\n\n#Test the function\nprint(circle_area(5)) # Output: 78.5\nprint(circle_area(10)) # Output: 314.1592653589793\n\n# Write a function to find the area of a trapezoid\ndef trapezoid_area(base1,base2,height):\n    area = 0.5 * (base1 + base2) * height\n    return area\n\n#Test the function\nprint(trapezoid_area(10,20,15)) # Output: 1250.0\nprint(trapezoid_area(10,20,25)) # Output: 2250.0",
        "generated_testcode": "assert rectangle_area(5,10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param str1: str1 - given string\n    :return: new_str - modified string with uppercase substrings removed\n    \"\"\"\n    import re\n    new_str = re.sub('[A-Z]', '', str1)\n    return new_str\n\n\n# Test the function with an example\nprint(remove_uppercase(\"Hello World\"))\n# Output: \"hld wrld\"\n\nprint(remove_uppercase(\"This is a Test String 123\"))\n# Output: \"ths  s  strng 123\"\nprint(remove_uppercase(\"Python is Awesome!\"))\n# Output: \"pythn sme!\"\n\n\n# Additional test cases\nprint(remove_uppercase(\"The quick brown fox jumps over the lazy dog\"))\n# Output: \"th qck brwn fx jmps vr th lzy dg\"\nprint(remove_uppercase(\"ABC 123XYZ 456 Def\"))\n# Output: \"  123456  Def\"\nprint(remove_uppercase(\"\"))\n# Output: \"\"",
        "generated_testcode": "assert remove_uppercase(\"Hello World\" ) == \"hll wrld\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_lst = [] \n    for i in lst: \n        new_lst.append(i[0]) \n    return new_lst \n\n#Test the function with an example list \nlst = [[1,2,3],[4,5,6],[7,8,9],[10,11,12] ] \nprint(Extract(lst)) ",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function with an example string\nprint(upper_ctr(\"Hello, World!\")) # should print 2\nprint(upper_ctr(\"HELLO, WORLD!\")) # should print 4\nprint(upper_ctr(\"HeLLo, WoRlD!\")) # should print 3\n\n",
        "generated_testcode": "assert upper_ctr(None) == 0\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    def backtrack(start, current_combination):\n        if len(current_combination) == len(list1):\n            result.append(current_combination[:])\n            return\n        for i in range(start, len(list1)):\n            current_combination.append(list1[i])\n            backtrack(i+1, current_combination)\n            current_combination.pop()\n    backtrack(0, [])\n    return result\n\n\n# Test the function with the following list\nlist1 = [1,2,3,4,5]\nprint(combinations_list(list1))",
        "generated_testcode": "assert combinations_list([\"a\", \"b\", \"c\", \"d\"] == [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"cd\", \"abc\", \"abd\", \"acd\", \"bcd\", \"abcd\"])\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    max_ending = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max(max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        max_ending = max(max_ending * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending)\n    return max_so_far\n\n\n# Test cases\narr1 = [2, -3, -2, 4, -1]\narr2 = [-2, 0, -1, -3, -4, -1]\narr3 = [-1, -2, -3, 1, 5, -4]\n\nprint(max_subarray_product(arr1)) # Output: 8\nprint(max_subarray_product(arr2)) # Output: 0\nprint(max_subarray_product(arr3)) # Output: 12",
        "generated_testcode": "assert max_subarray_product([2, -3, 0, -2, 4, -1, -1, 6, -5, 4] ) == 24\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    value = list(dict.values())[0]\n    for i in range(1,n):\n        if list(dict.values())[i] != value:\n            return False\n    return True\n\n# Testing the function\nmy_dict = {\"apple\": 1, \"banana\": 1, \"orange\": 1, \"grape\": 1}\nprint(check_value(my_dict,3))\nmy_dict = {\"apple\": 1, \"banana\": 2, \"orange\": 3, \"grape\": 4}\nprint(check_value(my_dict,3))\n",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1} , 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return {k: v for k, v in dict1.items() if v}\n\n\n# Test the function\nd = {'a': 1, 'b': None, 'c': 0, 'd': '', 'e': [], 'f': {}, 'g': [1, 2, 3]}\nprint(drop_empty(d)) # {'a': 1, 'g': [1, 2, 3]}\n\n\nd = {'a': '', 'b': [], 'c': {}, 'd': None, 'e': 0, 'f': 'hello', 'g': {}}\nprint(drop_empty(d)) # {'f': 'hello'}\n\nd = {'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'dates'}\nprint(drop_empty(d)) # {'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'dates'}",
        "generated_testcode": "assert drop_empty(dict(a=1, b='', c=None, d=[], e='hello', f=dict(g=5)) == {'e': 'hello', 'f': {'g': 5})\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if high == low: \n        return arr[low] \n    if high == n-1: \n        return arr[high] \n  \n    mid = (low + high) // 2\n    if (mid > 0 and arr[mid-1] > arr[mid]) and (mid < n-1 and arr[mid] < arr[mid+1]): \n        return arr[mid] \n    elif (mid > 0 and arr[mid-1] > arr[mid]): \n        return find_peak_util(arr, low, mid-1, n) \n    else: \n        return find_peak_util(arr, mid+1, high, n) \n  \n  \ndef find_peak(arr): \n    n = len(arr) \n    return find_peak_util(arr, 0, n-1, n) \n\n\n# Test the function \narr = [1, 3, 2, 5, 6, 7, 4, 8, 9, 10] \nprint(\"Peak element is at index:\", find_peak(arr)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 1], 0, 3) == 2\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    octalNum = 0\n    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum = deciNum // 8\n    return octal\n\n# Test the function\ndecimal_to_Octal(42) # Should return '52'\ndecimal_to_Octal(7) # Should return '7'\ndecimal_to_Octal(14) # Should return '12'\ndecimal_to_Octal(33) # Should return '45'\ndecimal_to_Octal(100) # Should return '14'\ndecimal_to_Octal(8) # Should return '10'\ndecimal_to_Octal(0) # Should return '0' ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 2: \n        return -1\n    max1 = max2 = max3 = float('-inf') \n    min1 = min2 = float('inf') \n    \n    for i in range(n): \n        if arr[i] > max1: \n            max1, max2, max3 = arr[i], max1, max2 \n        elif arr[i] > max2: \n            max2, max3 = arr[i], max2 \n        elif arr[i] > max3: \n            max3 = arr[i] \n            \n        if arr[i] < min1: \n            min1, min2 = arr[i], min1 \n        elif arr[i] < min2: \n            min2 = arr[i] \n            \n    return max(max1*max2*max3, max1*min1*min2) ",
        "generated_testcode": "assert max_product([1, 10, 2, 3, 4, 5, 6, 7, 8, 9] ) == 90\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(price)\n    if k >= n/2:\n        return max_profit_k_transactions(price)\n    else:\n        return max_profit_2_transactions(price)\n\ndef max_profit_k_transactions(price):\n    n = len(price)\n    dp = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        max_diff = float('-inf')\n        for j in range(i):\n            max_diff = max(max_diff, dp[j] - price[i])\n        dp[i] = max(dp[i-1], max_diff + price[i])\n    return dp[n-1]\n\ndef max_profit_2_transactions(price):\n    buy1, sell1, buy2, sell2 = -price[0], 0, 0, 0\n    for i in range(1, len(price)):\n        buy1 = max(buy1, -price[i])\n        sell1 = max(sell1, buy1 + price[i])\n        buy2 = max(buy2, sell1 - price[i])\n        sell2 = max(sell2, buy2 + price[i])\n    return sell2\n\n# Test cases\nprint(max_profit([10, 22, 5, 75, 65, 30], 2)) # Output",
        "generated_testcode": "assert max_profit(prices=[10, 22, 5, 75, 65, 30, 50, 60, 80], k=2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    Add the pairwise elements of a tuple\n    :param test_tup: tuple of integers\n    :return: tuple of tuples with pairwise sums\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i != j:\n                result.append((test_tup[i], test_tup[j], test_tup[i] + test_tup[j]))\n    return tuple(result)\n\n# Test the function\ntup = (1, 2, 3, 4, 5, 6)\nprint(add_pairwise(tup))  # Output: ((1, 2, 3), (1, 3, 4), (1, 4, 5), (1, 5, 6), (2, 3, 5), (2, 4, 6), (3, 4, 7), (3, 5, 8), (4, 5, 9), (4, 6, 10), (5, 6, 11))\ntup = (10, 20, 30, 40, 50)\nprint(add_pairwise(tup))  # Output: ((10, 20, 30), (10, 30, 40), (10, 40, 50), (20, 30, ",
        "generated_testcode": "assert add_pairwise(()) == ()\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param arr: list of integers\n    :param lens: length of the array\n    :param n: integer\n    :return: remainder of array multiplication divided by n\n    \"\"\"\n    # Create a variable to store the remainder\n    remainder = 0\n    # Calculate the product of the array elements\n    product = 1\n    for i in range(lens):\n        product *= arr[i]\n    # Calculate the remainder by dividing the product by n\n    remainder = product % n\n    return remainder\n\n# Test the function with an example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 5\nlens = len(arr)\nprint(find_remainder(arr, lens, n))\n\n# Output: 4\n\n",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 5, 3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(l)-1): \n        if l[i+1]-l[i] == 1: \n            continue\n        else: \n            return False\n    return True\n\n#Example:\nl = [1,2,3,4,5,6,7,8,9] #return True\nl = [1,2,3,5,6,8,9] #return False\nl = [1,2,3,5,6,8,10] #return False\n\ndef check_Consecutive(l): \n    for i in range(len(l)-1): \n        if l[i+1]-l[i] == 1: \n            continue\n        else: \n            return False\n    return True\n\nl = [1,2,3,4,5,6,7,8,9] #return True\nl = [1,2,3,5,6,8,9] #return False\nl = [1,2,3,5,6,8,10] #return False\nprint(check_Consecutive(l)) # True\nprint(check_Consecutive(l)) # False\nprint(check_Consecutive(l)) # False",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8,9] == True)\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    intersection_tuple = tuple(intersection_set)\n    return intersection_tuple\n\n# Testing the function with sample inputs\nprint(tuple_intersection([(1,2,3,4,5),(6,7,8,9,10),(1,3,5,7)]) # Output: (1, 3, 5)\nprint(tuple_intersection([(1,2,3,4),(5,6,7,8),(9,10,11,12)]) # Output: ()\nprint(tuple_intersection((1,2,3),(2,3,4)) # Output: (2, 3)\nprint(tuple_intersection((1,2,3,3),(2,3,4,4,5)) # Output: (2, 3)\nprint(tuple_intersection((1,2,3,4),(2,4,3,5)) # Output: (2, 3, 4)\nprint(tuple_intersection((1,2,2,3),(2,3,4,5)) # Output: (2, 3)\nprint(tuple_intersection((1,2,3),(3,2,4)) # Output: (2, 3)\nprint(tuple_intersection((1,2,3,3,3),(2,3,4,5)) # Output:",
        "generated_testcode": "assert tuple_intersection((), ()) == ()\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\n# Test the function\nprint(replace_char(\"hello\",\"l\",\"x\")) # Output: hxexo\nprint(replace_char(\"python\",\"o\",\"i\")) # Output: phython\nprint(replace_char(\"h\",\"e\")) # Output: eh\n\n\n# Using lambda function\nreplace_char = lambda str1,ch,newch: ''.join(newch if i == ch else i for i in str1)\nprint(replace_char(\"hello\",\"l\",\"x\")) # Output: hxexo\nprint(replace_char(\"python\",\"o\",\"i\")) # Output: phython\nprint(replace_char(\"h\",\"e\")) # Output: eh",
        "generated_testcode": "assert replace_char(str1=\"hello world\",ch=\"l\",newch=\"L\") == \"heLLo worlD\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n\n# Test the function\nmy_dict = {'apple': 5, 'banana': 8, 'orange': 2, 'pear': 3, 'peach': 9, 'grape': 7}\nprint(sort_counter(my_dict))\n",
        "generated_testcode": "assert sort_counter(Counter({\"a\": 3, \"b\": 1, \"c\": 2, \"d\": 2}) == {\"c\": 2, \"b\": 1, \"a\": 3, \"d\": 2}\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_val = max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val = nums[i]\n            elif nums[i] > max_val:\n                max_val = nums[i]\n        return max_val + min_val\n\n# Test cases\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 19\nprint(big_sum([1, 2, 3])) # Output: 6\nprint(big_sum([-1, -2, -3])) # Output: -1\nprint(big_sum([5])) # Output: 5\nprint(big_sum([])) # Output: 0\n\n\n# Explanation:\n# The function first checks if the length of the array is zero or one. If it is, then it simply returns the value at the index 0 or 0 respectively.\n# If the length of the array is greater than 1, it initializes the min_val and max_val variables to the first element of the array. Then, it iterates through the array starting from the second element.\n# For each element, it checks if the current element is",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 17\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += chr(ord(char) + 32)\n        else:\n            result += char\n    return result\n\n# Test the function\nprint(is_lower(\"HELLO WORLD\"))\nprint(is_lower(\"Python\"))\nprint(is_lower(\"Python\"))\nprint(is_lower(\"python\"))",
        "generated_testcode": "assert is_lower(None) == False\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += str1[i]\n    return result\n    \n# Test cases\nprint(remove_lowercase(\"Hello World\")) # should return \"HW\"\nprint(remove_lowercase(\"Python is Awesome\")) # should return \"PYhnsm\"\nprint(remove_lowercase(\"Remove Lowercase Substrings\")) # should return \"Rmv LwrCse\"",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return int(str(n)[:1])\n\n#Test the function\nprint(first_Digit(12345)) # Output: 1\nprint(first_Digit(6789)) # Output: 6\nprint(first_Digit(123456789) # Output: 1\n\n\n#Another way to do this using string slicing\ndef first_Digit(n):\n    return int(str(n)[0] if n > 0 else -1)\nprint(first_Digit(12345)) # Output: 1\nprint(first_Digit(6789) # Output: 6\nprint(first_Digit(123456789) # Output: 1\n\n\n#Using math library\nimport math\ndef first_Digit(n):\n    return math.floor(math.log10(abs(n))\n",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {}\n    max_char = ''\n    max_count = 0\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char\n\n# Test the function\nstr1 = 'hello world'\nprint(get_max_occuring_char(str1))  # Output: 'l'\n\nstr2 = 'aabbcc'\nprint(get_max_occuring_char(str2))  # Output: 'a'\n\nstr3 = 'abcdefg'\nprint(get_max_occuring_char(str3))  # Output: 'a'\n\nstr4 = 'aabbbccc'\nprint(get_max_occuring_char(str4))  # Output: 'b'",
        "generated_testcode": "assert get_max_occuring_char(str1) == 'a'\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param set: list of integers\n    :param sum: integer\n    :return: boolean True if there is a subset with sum equal to sum, else False\n    \"\"\"\n    def helper(set, n, sum, index, curr_sum):\n        if curr_sum == sum:\n            return True\n        elif index == n or curr_sum > sum:\n            return False\n        elif curr_sum < sum:\n            return helper(set, n, index + 1, curr_sum + set[index]) or helper(set, n, index + 1, curr_sum)\n        else:\n            return helper(set, n, index + 1, 0) or helper(set, n, index + 1, curr_sum - set[index])\n\n    return helper(set, 0, 0, 0)\n\n\n\n# Test cases\nprint(is_subset_sum([1, 3, 5, 7, 9], 9))  # True\nprint(is_subset_sum([1, 3, 5, 7, 9], 10))  # False\nprint(is_subset_sum([1, 3, 5, 7, 9], 6))  # True\nprint(is_subset_sum([1, 3, 5, 7, 9], 21))  # False\nprint(is_subset_sum([1, 3, 5, 7, 9], 100))  # False\n",
        "generated_testcode": "assert is_subset_sum(set([1, 2, 3, 4, 5, 6, 7, 8, 9], 15) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r\"[A-Z][a-z]+\"\n    result = re.findall(pattern, text)\n    return result\n\n#test the function \ntext = \"Hello, welcome to the world. This is Python programming language. We are learning regex now.\"\nprint(match(text)) # Output: ['Hello', 'Python'] ",
        "generated_testcode": "assert match(text=\"HelloWorld\") == \"HW\"\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while True:\n        factorial = 1\n        for j in range(1,i+1):\n            factorial *= j\n        if factorial % x == 0:\n            return i\n        i += 1\n\nprint(first_Factorial_Divisible_Number(5))\nprint(first_Factorial_Divisible_Number(10))\nprint(first_Factorial_Divisible_Number(20))\nprint(first_Factorial_Divisible_Number(30))\nprint(first_Factorial_Divisible_Number(100))\nprint(first_Factorial_Divisible_Number(10000))\nprint(first_Factorial_Divisible_Number(100000))\n\n#Output: 6\n#       40\n#       28\n#       144\n#       144063555848885209470386425\n#       13404347686267576950\n#       1703546077553122634607754130",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5 # 5! = 120, 120 is the first number whose factorial is divisible by 10\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1[0] == tup2[0] and tup1[1] == tup2[1]:\n                break\n        else:\n            result.append(tup1)\n    return result\n\n\n# Test the function with the given example\ntest_list1 = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\ntest_list2 = [(1, 'a'), (6, 'f'), (7, 'g'), (8, 'h')]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\n\n# Test the function with a different example\ntest_list1 = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\ntest_list2 = [(1, 'a'), (3, 'c'), (6, 'f'), (7, 'g')]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(2, 'b'), (4, 'd'), (5, 'e')]\n\n# Test the function with an empty tuple\ntest_list1 = []\ntest_list2 = [(",
        "generated_testcode": "assert remove_matching_tuple([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(4,5,6),(7,8,9])] == [(10,11,12)], \"Test case 1 failed\"\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1] \n\ndef largest_palindrome(arr):\n    largest = 0\n    for num in arr: \n        if is_palindrome(num) and num > largest : \n            largest = num\n    return largest\n\n# Testing the function \narr = [123, 345, 543, 234, 7888, 88, 675]\nprint(largest_palindrome(arr)) # Output: 88\n",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    if r == 0 or r == n: \n        return 1\n    res = 1\n    for i in range(1, r+1): \n        res = res * (n - i + 1) // i \n    return res \n\n# Function to calculate the probability of successes in k trials of r independent trials \ndef binomial_probability(n, p, k): \n    return nCr(n, k) * (p ** k) * (1-p) ** (n-k) \n\n# Function to calculate the probability of successes in k trials of r independent trials \ndef binomial_distribution(n, p, r, k): \n    return binomial_probability(n, p, k) / (2 ** r) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[1])\n\n# Test the function with a sample input\ninput_list = [(3, 5), (1, 2), (4, 6), (2, 1), (5, 3), (7, 8), (8, 9)]\nsorted_list = sort_tuple(input_list)\nprint(sorted_list) # Output: [(1, 2), (2, 1), (3, 5), (4, 6), (5, 3), (7, 8)]\n\n# Test the function with a list of tuples with varying length\ninput_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)]\nsorted_list = sort_tuple(input_list)\nprint(sorted_list) # Output: [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8)] ",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 1), (6, 2, 4), (3, 1, 2)] ) == [(3, 1, 2), (1, 2, 3), (4, 5, 1), (6, 2, 4)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (5 * a ** 2) / (4 * (3 ** 0.5) * (1 + (3 ** 0.5))\n\n\n# Test the function with a=5\nprint(area_pentagon(5)) ",
        "generated_testcode": "assert area_pentagon(5) == 50.625\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_num = max(arr) \n    count = 0\n    for i in range(n): \n        if arr[i] == max_num: \n            count += 1\n    return count ",
        "generated_testcode": "assert frequency_Of_Largest(5, [1,2,3,4,5,5,5,5,5,5,6,7,8,9]) == 4\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][::-1] == test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result\n\n#Example usage:\ntest_list = [(1,2,3),(2,1,3),(3,2,1),(1,2,4),(2,1,4),(2,3,1),(3,2,4),(1,3,4),(4,3,2),(4,2,1),(1,3,2),(4,2,3)],\nprint(extract_symmetric(test_list)) #[(1, 2, 3), (1, 2, 3), (2, 3, 1), (3, 2, 4), (2, 3, 1)] ",
        "generated_testcode": "assert extract_symmetric([(1,2,3), (2,1), (3,4), (4,3), (5,6), (6,5)] ) == [(1,2), (3,4)]\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    s=0\n    for i in range(n):\n        s+=a\n        a*=r\n    return s\n\n#a=float(input(\"Enter first term of the GP series: \")\n#n=int(input(\"Enter number of terms: \")\n#r=float(input(\"Enter the common ratio: \")\n#print(\"The sum of GP series is:\",sum_gp(a,n,r))\n\na=1\nn=5\nr=2\nprint(\"The sum of GP series is:\",sum_gp(a,n,r))\n",
        "generated_testcode": "assert sum_gp(2,3,2) == 112\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    item_list.sort() #Sorting the list\n    low = 0\n    high = len(item_list)-1\n    mid = 0\n    while low <= high:\n        mid = (low + high)//2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nitem_list = [4,5,6,7,8,9,10,12,15,20,30,45,55,70,80]\nprint(binary_search(item_list,55))\nprint(binary_search(item_list,12))\nprint(binary_search(item_list,100))\n\n\n# This function takes two arguments, the list and the element to be searched. If the element is present in the list, it returns the index of the element, else it returns -1. ",
        "generated_testcode": "assert binary_search([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\"], \"cherry\") == 2\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    points = []\n    for i in range(startx, endx + 1):\n        y = starty + radius * np.sqrt(3) * i\n        if i % 2 == 0:\n            points.append((i, y))\n        else:\n            points.append((i, y - radius * 2))\n    return points\n\n#Test the function\nprint(calculate_polygons(0, 0, 5, 10, 5))\n\n# Output should be: [(0, 5), (1, 10), (3, 7), (5, 5), (4, 0), (3, -3), (1, -7), (0, -5)]\n\n\n# Calculate the grid of hexagon coordinates\ndef calculate_grid(startx, starty, endx, endy, radius):\n    grid = []\n    for i in range(startx, endx + 1):\n        row = []\n        points = calculate_polygons(i, starty, i, endy, radius)\n        for point in points:\n            row.append((point[0], point[1]))\n        grid.append(row)\n    return grid\n\n#Test the function\nprint(calculate_grid(0, 0, 5, 10, 5))\n\n# Output should be: [(0, 5), (1, 10), (3, 7), (5, 5), (4, 0), (3, -3), (1, -7), (0, -5)]\n# Output should be: [(0, 0), (0, 5), (0, 10), (0, 15), (0, 20), (0, 25), (1, 0), (1, 5), (1, 10), (1, 15), (1, 20), (1, 25), (2, 0), (2, 5), (2, 10), (2, 15), (2, 20), (2, 25), (3, 0), (3, 5), (3, 10), (3, 15), (3, 20), (3, 25), (4, 0), (4, 5), (4, 10",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [[(0, 0), (5, 0), (10, 5), (10, 10), (5, 15), (0, 10), (0, 5), (5, 0)], (5, 5), (10, 10), (10, 5), (5, 0)]\n\n# Test case 2\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tup: tuple of binary strings\n    :return: integer value of binary tuple\n    \"\"\"\n    # initialize result variable\n    result = 0\n    # initialize counter variable\n    count = 0\n    # iterate over each binary string in the tuple\n    for binary in test_tup:\n        # multiply the result by 2 and add the value of the binary string\n        result += int(binary) * (2 ** count)\n        # increment the counter\n        count += 1\n    # return the result\n    return result\n\n\n\n# Test the function\nprint(binary_to_integer((\"11011\", \"00110\"))  # Output: 11\nprint(binary_to_integer(\"10010\", \"10110\", \"11100\", \"11111\"))  # Output: 34\nprint(binary_to_integer(\"111111\", \"111111\"))  # Output: 31\nprint(binary_to_integer(\"01110\", \"1010\", \"11110\"))  # Output: 23\n",
        "generated_testcode": "assert binary_to_integer(('10101') == 5\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile('[a-z]+')\n    return re.sub(pattern, '', str1)\n\n\n# Test cases\nprint(remove_lowercase(\"Hello World\")) # Output: \"H W\"\nprint(remove_lowercase(\"Python is awesome\")) # Output: \"Pythn s wsm\"\nprint(remove_lowercase(\"The quick brown fox jumps over the lazy dog\")) # Output: \"Th qck brwn fx jmps vr th lzy dg\"\nprint(remove_lowercase(\"I am a string with no lowercase letters\")) # Output: \"\"\n\n# Time complexity: O(n) where n is the length of the string\n# Space complexity: O(n)",
        "generated_testcode": "assert remove_lowercase(\"Hello World\" ) == \"Hll Wrld\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n\n# Test cases\nprint(heap_queue_smallest([10, 23, 2, 8, 9, 4, 7, 1, 20], 5)) # Output: 1\nprint(heap_queue_smallest([5, 3, 8, 6, 1, 4, 2, 7], 3)) # Output: 1\nprint(heap_queue_smallest([1, 2, 3, 4, 5, 6, 7, 8], 4)) # Output: 1\n",
        "generated_testcode": "assert heap_queue_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    surfacearea = (r * r) * 3.14\n    surfacearea += 3.14 * r * (r + h) * h\n    return surfacearea\n\n# Test the function\nprint(surfacearea_cone(2,3)) # Output: 38.5702\nprint(surfacearea_cone(5,6)) # Output: 147.4993\n\n\n# Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    volume = (1.0/3) * (3.14 * r * r * h)\n    return volume\n\n# Test the function\nprint(volume_cone(2,3)) # Output: 21.915\nprint(volume_cone(5,6)) # Output: 85.398\n\n\n# Write a function to find the surface area of a sphere\ndef surfacearea_sphere(r):\n    surfacearea = 4 * 3.14 * r * r\n    return surfacearea\n\n# Test the function\nprint(surfacearea_sphere(3)) # Output: 1136.16999\nprint(surfacearea_sphere(5)) # Output: 523.5988\n\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    volume = (4.0/3) * 3.14 * r * r * r\n",
        "generated_testcode": "assert surfacearea_cone(3,4) == 145.08\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n\n# Test the function with sample inputs\nprint(gcd(24, 36))  # Output: 12\nprint(gcd(16, 24))  # Output: 8\nprint(gcd(17, 25))  # Output: 1\nprint(gcd(12, 8))  # Output: 4\nprint(gcd(56, 64))  # Output: 8\nprint(gcd(100, 25)) # Output: 5\nprint(gcd(123, 45)) # Output: 13\n",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    diameter = 2 * r\n    return diameter\n\n# Test the function\nprint(diameter_circle(5))  # Output: 10",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Concatenates all elements of the given list into a string\n\n    :param list: list\n    :return: string\n    \"\"\"\n    # initialize empty string\n    result = \"\"\n    # iterate over each element in the list\n    for i in list:\n        # concatenate the element with the result string\n        result += str(i)\n    # return the concatenated string\n    return result\n\n# test the function with some examples\nprint(concatenate_elements([1, 2, 3, 4, 5, 6]))  # Output: \"123456\"\nprint(concatenate_elements([\"hello\", \" \", \"world\", \"!\"]))  # Output: \"helloworld!\"\nprint(concatenate_elements([\"apple\", \"banana\", \"orange\"]))  # Output: \"applebananaorange\"\n\n# add your own test cases\nprint(concatenate_elements([10, \"2\", \"3\", 4.5, True, \"hi\"]))  # Output: \"1023hi\"\nprint(concatenate_elements([]))  # Output: \"\"\n",
        "generated_testcode": "assert concatenate_elements([\"hello\", \"world\", \"!\"] == \"helloworld!\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y):\n        x,y = y,x%y\n    return x\n\ndef common_divisor(a,b):\n    return ngcd(a,b)\n\n#test case\nprint(common_divisor(12,8)) #output: 4\nprint(common_divisor(15,25)) #output: 5\nprint(common_divisor(20,25)) #output: 5\nprint(common_divisor(30,45)) #output: 15\n",
        "generated_testcode": "assert ngcd(12, 18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n%m\n\n#Call the function and pass two numbers as arguments\nprint(find(12,3)) #Output: 0\nprint(find(15,7)) #Output: 5\nprint(find(7,9)) #Output: 7\nprint(find(10,5)) #Output: 0\nprint(find(3,4)) #Output: 1\n\n",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i] - nums[i-1])\n    return result\n\n#Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(add_consecutive_nums(nums)) # Output: [1, 1, 1, 1, 1, 1]\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80]\nprint(add_consecutive_nums(nums)) # Output: [10, 10, 10, 10, 10, 10]\n\nnums = [1, 2, 4, 6, 8, 10, 12]\nprint(add_consecutive_nums(nums)) # Output: [1, 2, 2, 2, 2, 2]\n\nnums = [0, 2, 4, 6, 8, 10]\nprint(add_consecutive_nums(nums)) # Output: [2, 2, 2, 2, 2]\n\nnums = [1]\nprint(add_consecutive_nums(nums)) # Output: []\n\nnums = []\nprint(add_con",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 25\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\nprint(sum_Of_Series(5)) # Output: 225\nprint(sum_Of_Series(10)) # Output: 2225\nprint(sum_Of_Series(15)) # Output: 1285\n",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    zeros = []\n    non_zeros = []\n    for i in A:\n        if i == 0:\n            zeros.append(i)\n        else:\n            non_zeros.append(i)\n    A = zeros + non_zeros\n    return A\n\n#Testing\nA = [0,0,1,2,0,1,3,0,4,0,5,0]\nprint(re_order(A))\n#Output: [1, 2, 1, 3, 4, 5, 0, 0, 0, 0, 0]\n\nA = [9,0,0,0,1,2,0,0,0,3,4,0,0,5,0,0]\nprint(re_order(A))\n#Output: [9, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "generated_testcode": "assert re_order([0, 1, 0, 2, 3, 0, 4, 0, 5, 0] ) == [1, 2, 3, 4, 5, 0, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize a list to store the factorials of integers from 0 to n \n    factorial_list = [1] * (n+1) \n    # calculate the factorials of integers from 0 to n and store them in the list \n    for i in range(1, n+1): \n        factorial_list[i] = factorial_list[i-1] * i \n    # calculate the coefficient \n    coefficient = factorial_list[n] / (factorial_list[n-k] * factorial_list[k]) \n    # return the coefficient \n    return coefficient \n\n# test the function \nprint(permutation_coefficient(5, 3)) # Output: 60 ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 60\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for word in list1:\n        if word not in removewords:\n            result.append(word)\n    return result\n\n# Test the function with an example\nmylist = ['apple', 'banana', 'cherry', 'apple', 'banana', 'banana', 'orange']\nremovewords = ['apple', 'banana']\nprint(remove_words(mylist, removewords)) # Output: ['cherry', 'orange']\n",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"apple\", \"banana\", \"grape\"], [\"apple\", \"banana\"]) == [\"grape\", \"grape\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] not in l2 or l2[i] != l1[i]:\n            return False\n    return True\n\n# Test cases\nprint(same_order([1, 2, 3, 4], [4, 3, 2, 1])) # True\nprint(same_order([1, 2, 3], [4, 3, 2])) # False\nprint(same_order([1, 2, 3, 4], [4, 3, 2, 1])) # True\nprint(same_order([1, 2, 3], [2, 3, 4])) # False\nprint(same_order([1, 2, 3], [1, 2, 3, 4])) # False\nprint(same_order([1, 2, 3], [4, 3, 2, 1])) # False\nprint(same_order([1, 2, 3], [3, 2, 1])) # False\n\n\n# Edge cases\nprint(same_order([], [])) # True\nprint(same_order([1], [1])) # True\nprint(same_order([1, 2], [2, 1])) # True\nprint(same_order([1, 2, 3], [3, 2, 1])) # True",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"cherry\", \"orange\"], [\"cherry\", \"apple\", \"banana\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    num = 1\n    while num <= n : \n        if num % 2 != 0 : \n            sum += num \n            count += 1\n        num += 2 \n    return sum / count \n\n# Test the function with some values \nprint(average_Odd(15)) \nprint(average_Odd(20)) \nprint(average_Odd(50)) \n\n\n# Output:\n# 3.0\n# 5.0\n# 17.0\n\n",
        "generated_testcode": "assert average_Odd(5) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    dp = [1] * n\n    mod = 10**9 + 7\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = (dp[i] + dp[j]) % mod\n    res = 0\n    for i in range(n):\n        res += dp[i]\n    res = (res * (res - 1)) // 2\n    return res\n\n\ndef count_subsequences(arr, k):\n    n = len(arr)\n    dp = [1] * n\n    mod = 10**9 + 7\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = (dp[i] + dp[j]) % mod\n    res = 0\n    for i in range(n):\n        res += dp[i]\n    res = (res * (res - 1)) // 2\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i] * arr[j] < k:\n                count += dp[j]\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nk = 24\nprint(count_",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 24) == 5\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # function to find minimum sum of factors of a given number\n    def sum_of_factors(n):\n        sum_of_factors = 0\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                sum_of_factors += i\n                if i != n//i:\n                    sum_of_factors += n//i\n        return sum_of_factors\n    \n    return min(sum_of_factors(num), sum_of_factors(num-1) + 1)\n\n\n# Test the function\nprint(find_Min_Sum(10)) # Output: 11 (5)\nprint(find_Min_Sum(30)) # Output: 21 (15)\nprint(find_Min_Sum(40)) # Output: 23 (21)\nprint(find_Min_Sum(1000)) # Output: 29 (55)\nprint(find_Min_Sum(15)) # Output: 15 (15)\nprint(find_Min_Sum(32)) # Output: 26 (21)\n",
        "generated_testcode": "assert find_Min_Sum(12) == 2, \"Test case 1 failed\"\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    flatten_list = [] \n    for item in test_tuple: \n        if isinstance(item, tuple): \n            flatten_list.extend(flatten(item) \n        else: \n            flatten_list.append(item) \n    return flatten_list \n\ndef count_frequency(flatten_list): \n    frequency = {} \n    for item in flatten_list: \n        if item in frequency: \n            frequency[item] += 1 \n        else: \n            frequency[item] = 1 \n    return frequency \n\ndef count_element_frequency(test_tuple): \n    flatten_list = flatten(test_tuple) \n    return count_frequency(flatten_list) \n\n# Test the function with an example \ntest_tuple = (1, (2, 3, (4, 2), (3, 4, 5), 6, (4, 5)) \nprint(count_element_frequency(test_tuple)) # Output: {1: 1, 2: 2, 3: 2, 4: 3, 5: 2, 6: 1} ",
        "generated_testcode": "assert flatten(((1,2,3), (4,5,6, (7,8,9), (10,11, (12,13,14, (15,16))) ) ) ) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1, 10:1, 11:1, 12:1, 13:1, 14:1, 15:1, 16:1}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup:\n        result.append(str(i) + K)\n    return result\n\n# Test the function with an example\nprint(add_str((1, 2, 3, 4, 5), \"hello\"))  # Output: ['1hello', '2hello', '3hello', '4hello', '5hello']\n",
        "generated_testcode": "assert add_str((), \"hello\") == []\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in test_tup:\n        sum += i\n    return sum\n\n# Test case\nt = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_elements(t)) # Output: 45\n\nt = (10, 20, 30, 40, 50)\nprint(sum_elements(t)) # Output: 1100\n\nt = (100, 200, 300, 400)\nprint(sum_elements(t)) # Output: 1000\n\nt = (-1, -2, -3, -4, -5, -6, -7, -8)\nprint(sum_elements(t)) # Output: -32\n\nt = (0, 0, 0, 0, 0, 0, 0, 0)\nprint(sum_elements(t)) # Output: 0",
        "generated_testcode": "assert sum_elements(()) == 0\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if sum(arr) % m == 0: \n        return True\n    return False\n\n# Testing the function \narr = [1, 3, 5, 7, 8, 12, 5, 3] \nn = len(arr) \nm = 4\nprint(modular_sum(arr, n, m)) ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Find the maximum number in the list\n    max_num = max(nums)\n    # Determine the number of digits in the maximum number\n    num_digits = len(str(max_num))\n    # Sort the list based on each digit\n    for digit in range(num_digits):\n        # Create a list for each digit\n        buckets = [[] for i in range(10)]\n        # Iterate through the list of numbers\n        for num in nums:\n            # Determine the digit for the current number\n            digit_value = (num // 10 ** digit) % 10\n            # Add the number to the appropriate bucket\n            buckets[digit_value].append(num)\n        # Flatten the list of buckets\n        sorted_nums = [num for bucket in buckets for num in bucket]\n    return sorted_nums\n\n\n# Test the function with an example\nnums = [342, 456, 123, 678, 234, 789, 1234, 987, 564, 123, 890]\nsorted_nums = radix_sort(nums)\nprint(sorted_nums)  # Output: [123, 123, 342, 456, 678, 789, 890, 987, 234]\n",
        "generated_testcode": "assert radix_sort([37, 45, 6, 12, 89, 4, 5, 11, 9, 3, 0, 100, 7] ) == [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 37, 45, 89]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max = list1[0] \n    for num in list1: \n        if num > max and num > 0: \n            max = num \n    return max \n \n#Example Usage:\nlist1 = [3, -5, 2, 7, -12, 9, 4, 6, -3, 0, 8] \nprint(largest_pos(list1)) #Output: 9 ",
        "generated_testcode": "assert largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    factors = {}\n    root = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors[i] = 0\n    for i in range(1, num):\n        if num % i == 0:\n            factors[i] += 1\n            if i != num // i:\n                factors[num // i] += 1\n    for key, value in factors.items():\n        if value % 2 == 0 and value > 1:\n            root += key ** (value // 2)\n    return root\n\n\ndef perfect_number(num):\n    if sqrt_root(num) ** 2 == num:\n        return True\n    else:\n        return False\n\ndef find_perfect_numbers(start, end):\n    perfect_nums = []\n    for i in range(start, end+1):\n        if perfect_number(i):\n            perfect_nums.append(i)\n    return perfect_nums\n\nprint(find_perfect_numbers(1, 50))\n\n\n# Output: [6, 28]",
        "generated_testcode": "assert sqrt_root(6) == 2\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the volume of a tetrahedron with edge length num.\n    \"\"\"\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (num * (num ** 2 + num ** 3) / (4 * num * (num + 1))\n    # calculate the volume using Heron's formula\n    volume = (num ** 2 * semi_perimeter) / (8 * math.sqrt(2))\n    return volume\n\n\n# test the function\nprint(volume_tetrahedron(3))\nprint(volume_tetrahedron(4))\nprint(volume_tetrahedron(5))\nprint(volume_tetrahedron(6))\n\n",
        "generated_testcode": "assert volume_tetrahedron(3) == 3.0\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def gcd(a, b): \n        if(b == 0): \n            return a \n        else: \n            return gcd(b, a % b) \n          \n    return (num1 * num2) // gcd(num1, num2) \n\n  \ndef find_lcm_array(arr): \n    lcm = arr[0] \n    for i in range(1, len(arr)): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n  \n# Sample input \narr = [12, 15, 18, 21, 27] \n  \n# Output: 420 \nprint(\"LCM of the given array is :\", find_lcm_array(arr)) ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x == y == z:\n        return \"Equilateral Triangle\"\n    elif x != y and y != z and x != z:\n        return \"Scalene Triangle\"\n    else:\n        return \"Isoceles Triangle\"\n\n\n# Testing the function\nprint(check_isosceles(5,5,5)) # Equilateral Triangle\nprint(check_isosceles(5,6,6)) # Equilateral Triangle\nprint(check_isosceles(3,4,5)) # Isoceles Triangle\nprint(check_isosceles(5,6,7)) # Scalene Triangle",
        "generated_testcode": "assert check_isosceles(3,4,5) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return arr\n    dp = [1]*n\n    for i in range(1,n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    max_len = max(dp)\n    index = dp.index(max_len)\n    lis = [arr[index]]\n    while index > 0:\n        if arr[index] > arr[index-1]:\n            lis.append(arr[index-1])\n            index = dp.index(max_len, 0, index-1)\n        else:\n            break\n    return lis[::-1]\n    # Reverse the list to get the longest increasing subsequence\n    # and return the result\n    return lis[::-1]\n\n# Test the function\narr = [10, 22, 5, 75, 1, 3, 8, 12, 24, 76, 89, 34, 65, 55, 88, 99]\nprint(lbs(arr))\n",
        "generated_testcode": "assert lbs([1, 11, 2, 3, 2, 4, 5, 3, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return lambda x: (len(x) >= 6 and any(char.isdigit() for char in x) and any(char.islower() for char in x) and any(char.isupper() for char in x))\n\n\n# Test the function\nprint(check_string(\"Abc123\"))\nprint(check_string(\"abc123\"))\nprint(check_string(\"ABC123\"))\nprint(check_string(\"12345\"))\nprint(check_string(\"ABC12345\"))\nprint(check_string(\"ABC12\"))\nprint(check_string(\"abcdefg\"))\n\n\n# Output:\n# True\n# True\n# False\n# True\n# False\n# False\n# False\n# False ",
        "generated_testcode": "assert check_string(lambda x: any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x) and len(x) == 10)(\"Hello1234\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return arr[0]\n    \n    if n == 2:\n        return max(arr[0], arr[1])\n    \n    dp = [1] * n\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n                \n    max_sum = max(dp)\n    max_index = dp.index(max_sum)\n    if max_sum == 1:\n        max_sum = arr[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, arr[i])\n    else:\n        max_sum += arr[max_index]\n        max_sum += max_sum_increasing_subsequence(arr[max_index+1:], n-max_index-1)\n    \n    return max_sum\n\n# Driver code\narr = [1, 101, 2, 3, 100, 4, 5, 6, 1000]\nn = len(arr)\nprint(max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10, 11] ) == 31\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param line1: tuple of two points representing a line in the form (x1, y1, x2, y2)\n    :param line2: tuple of two points representing a line in the form (x1, y1, x2, y2)\n    :return: True if the two lines are parallel, False otherwise\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\n# Test cases\nprint(parallel_lines((0, 0, 1, 1), (0, 1, 2, 2))) # True\nprint(parallel_lines((0, 0, 1, 2, 1), (0, 2, 1, 2))) # True\nprint(parallel_lines((0, 0, 1, 2, 1), (1, 0, 2, 2))) # False\nprint(parallel_lines((0, 0, 1, 2, 2), (1, 0, 2, 1))) # False\nprint(parallel_lines((0, 0, 1, 1, 0), (1, 1, 2, 2))) # True\nprint(parallel_lines((1, 0, 2, 1, 1), (0, 0, 2, 2))) # True\nprint(parallel_lines((0, 0, 1, 1, 1), (1, 1, 2, 3))) # False\nprint(parallel_lines((0, ",
        "generated_testcode": "assert parallel_lines((1, 2, 3, 4, 5, 6, 7, 8, 9) == False\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str1.split(\" \")\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:].lower()\n    words[-1] = words[-1].upper()\n    return \" \".join(words)\n\n#Test the function with some test cases\nprint(capitalize_first_last_letters(\"hello world\"))  # Output: \"Hello World\"\nprint(capitalize_first_last_letters(\"python programming\")) # Output: \"Python Programming\"\nprint(capitalize_first_last_letters(\"data science\")) # Output: \"Data Science\"\nprint(capitalize_first_last_letters(\"open source\")) # Output: \"Open Source\"\nprint(capitalize_first_last_letters(\"computer science\")) # Output: \"Computer Science\"\n\n# Test the function with empty string\nprint(capitalize_first_last_letters(\"\")) # Output: \"\"",
        "generated_testcode": "assert capitalize_first_last_letters(None) == None\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store the count of elements and their occurrences\n    freq = {}\n    count = 0\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n\n    for i in arr:\n        complement = sum - i\n        if complement in freq:\n            if complement != i:\n                count += freq[complement]\n            elif complement == i and freq[complement] > 1:\n                count += 1\n    return count // 2\n\n# Test the function\narr = [1, 5, 3, 3, 4, 2, 2]\nn = 5\nsum = 8\nprint(get_pairs_count(arr, n, sum))  # Output: 2\n\narr = [1, 3, 4, 2]\nn = 5\nsum = 6\nprint(get_pairs_count(arr, n, sum))  # Output: 2\n\narr = [1, 5, 3, 3, 4, 2, 2]\nn = 6\nsum = 5\nprint(get_pairs_count(arr, n, sum))  # Output: 1\n\narr = [1, 5, 3, 3, 4, 2, 2]\nn = 6\nsum = 8\nprint(get_pairs_count(",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not list1:\n        return []\n    min_length = float('inf')\n    result = []\n    for i in list1:\n        if len(i) < min_length:\n            min_length = len(i)\n            result = [i]\n        elif len(i) == min_length:\n            result.append(i)\n    return result\n\n# Test cases\nprint(min_length([[1,2,3],[4,5],[6,7,8,9,10],[11,12],[13,14,15,16],[17],[18],[19,20,21,22,23,24,25,26,27,28,29,30])) #[[17]]\nprint(min_length([])) # []\nprint(min_length([[1,2,3,4,5,6,7,8,9,10])) # []\nprint(min_length([[1],[2,3,4],[5,6],[7,8,9,10,11])) # [[1],[5,6],[7,8,9,10,11]\nprint(min_length([[1,2,3],[4,5],[6,7,8,9,10],[11,12],[13,14,15,16],[17],[18],[19,20,21,22,23,24,",
        "generated_testcode": "assert min_length([[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15,16],[17,18],[19,20,21,22,23,24,25,26]] ) == [1,[10]\n\n# Test case 2:\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (jacobsthal_lucas(n//2)**2) - (jacobsthal_lacas(n//2 - 1)**2)\n    elif n % 2 == 1:\n        return (jacobsthal_lucas(n//2)**2) + (jacobsthal_lucas(n//2) * jacobsthal_lucas(n//2 - 1))\n\n#Example Usage:\nprint(jacobsthal_lucas(5)) # Output: 7\nprint(jacobsthal_lucas(6)) # Output: 14\nprint(jacobsthal_lucas(7)) # Output: 37\nprint(jacobsthal_lucas(8)) # Output: 92\nprint(jacobsthal_lucas(9)) # Output: 267\n\n#The function takes an integer n as input and returns the nth jacobsthal-lucas number. ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count/len(nums)\n\n\n#Test the function with the following code\nprint(negative_count([-4, 2, -3, 8, 1, -9, 0, -2])) # 0.4\nprint(negative_count([1, 2, 3, 4, 5, 6, 7])) # 0\nprint(negative_count([-1, -2, -3, -4, -5, -6])) # 1\nprint(negative_count([1, 2, 3, -1, 4, -2])) # 0.5\nprint(negative_count([-1])) # 1\n",
        "generated_testcode": "assert negative_count([1, 2, 3, -4, -5, 6, -7, 8, -9] ) == 4/6\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (V + 1) \n    dp[0] = 0\n    for i in range(1, V+1): \n        dp[i] = float('inf') \n        for j in range(len(coins)): \n            if coins[j] <= i: \n                dp[i] = min(dp[i], dp[i-coins[j]] + 1) \n    return dp[V]\n\n# Test case\ncoins = [1, 2, 5, 10, 25] \nm = len(coins) \nV = 63\nprint(\"Minimum number of coins required is\", min_coins(coins, m, V)) ",
        "generated_testcode": "assert min_coins([1, 2, 5, 10, 25, 50], 63, 4) == 3 # Expected output: 3 (10 + 10 + 10)\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    str1_dict = {}\n    str2_dict = {}\n    for char in str1:\n        str1_dict[char] = str1_dict.get(char, 0) + 1\n    for char in str2:\n        str2_dict[char] = str2_dict.get(char, 0) + 1\n    return str1_dict == str2_dict\n\n\nprint(check_permutation(\"cat\", \"tac\")) # True\nprint(check_permutation(\"hello\", \"llohe\")) # True\nprint(check_permutation(\"hello\", \"llohe1\")) # False\n\n\n# Another solution\ndef check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)\n\nprint(check_permutation(\"cat\", \"tac\")) # True\nprint(check_permutation(\"hello\", \"llohe\")) # True\nprint(check_permutation(\"hello\", \"llohe1\")) # False\n",
        "generated_testcode": "assert check_permutation(None, None) == False\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tuple = ()\n    for i in test_tuple:\n        if type(i) != data_type:\n            new_tuple += (i,)\n    return new_tuple\n\n#Testing the function\ntest_tuple = (1, 2, \"Hello\", 3.5, \"World\", \"Bye\", 5.0)\nprint(remove_datatype(test_tuple, str)) # Output: (1, 2, 3.5, 5.0)\n\ntest_tuple = (\"Hello\", \"World\", 1, 2, \"Bye\", \"Python\", 3.5, 4)\nprint(remove_datatype(test_tuple, int)) # Output: ('Hello', 'World', 'Bye', 3.5, 4)\n\ntest_tuple = (1, 2, 3, 4, 5, 6)\nprint(remove_datatype(test_tuple, float)) # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert remove_datatype((\"hello\", 123, 45.67, \"world\", True, 78, 90, \"python\", 34) == (123, 45.67, 78, 34)\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty list to store all the indices of the pattern occurrences\n    indices = []\n    # Loop through the text string\n    for i in range(len(text)-len(pattern)+1):\n        # Check if the pattern matches the text starting from the current index\n        if text[i:i+len(pattern)] == pattern:\n            # If it does, append the index to the list\n            indices.append(i)\n    return indices\n\n# Test the function with some sample inputs\nprint(search_literal(\"abc\", \"abcdefgabc\")) # Output: [0, 6]\nprint(search_literal(\"abcd\", \"abcdefgabc\")) # Output: []\nprint(search_literal(\"def\", \"abcdefgabc\")) # Output: [3]\nprint(search_literal(\"abcd\", \"abcdefgabcdef\")) # Output: [3]\nprint(search_literal(\"abc\", \"abcdefgabcdefgabc\")) # Output: [0, 7]\nprint(search_literal(\"defg\", \"abcdefgabcdefg\")) # Output: [6]\n\n# Function to search for a regular expression in a string\ndef search_regex(pattern, text):\n    # Initialize an empty list to store all the indices of the pattern occurrences\n    indices = []\n    # Loop through the text string\n    for match in re.finditer(pattern, text):\n        # Append the index of the match to the list\n        indices.append(match.start())\n    return indices",
        "generated_testcode": "assert search_literal(r'hello', 'hello world') == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the surface area of the top or bottom of a cylinder.\n    :param r: radius of the cylinder\n    :return: surface area\n    \"\"\"\n    surface_area = 2 * 3.14 * r ** 2\n    return surface_area\n\n\n\n# Test the function with a radius of 3\nprint(topbottom_surfacearea(3))  # Output: 212.56\n\n\n# Test the function with a radius of 5\nprint(topbottom_surfacearea(5))  # Output: 78.54\n\n\n# Test the function with a radius of 10\nprint(topbottom_surfacearea(10))  # Output: 314.16\n\n\n\n# Test the function with a radius of 0\nprint(topbottom_surfacearea(0)  # Output: 0\n",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.159875\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list[n-1::n]\n\n# Test the function\nlst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nprint(nth_items(lst,4))\nprint(nth_items(lst,6))\nprint(nth_items(lst,8))\nprint(nth_items(lst,10))\n\n# Output:\n# [4, 12, 18]\n# [7, 15]\n# [16]\n# []\n",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"], 2) == [\"banana\", \"date\"]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.lower().split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    for word in word_count:\n        if word_count[word] > 1:\n            return word\n    return None\n\n#Test the function\nstring = \"Hello world world world\"\nprint(first_repeated_word(string))\n# Output: \"world\"\n\n\nstring = \"the quick brown fox jumps over the lazy dog\"\nprint(first_repeated_word(string))\n# Output: \"the\" ",
        "generated_testcode": "assert first_repeated_word(str1=\"This is a test string with some repeated words like test\") == \"test\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize an empty list\n    str_list = []\n    # Iterate through the string and append each element to the list\n    for i in str1:\n        str_list.append(i)\n    # Convert the list to a tuple\n    tuple1 = tuple(str_list)\n    # Return the tuple\n    return tuple1\n\n# Test the function\nprint(string_list_to_tuple(['apple', 'banana', 'cherry', 'orange'])) # Output: ('apple', 'banana', 'cherry', 'orange') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: bases_num**x,index))\n\n#Example\nbases_num = [2,3,4]\nindex = [1,2,3]\n\nprint(basesnum_coresspondingnum(bases_num,index)) #[2, 8, 64]\n\n#Testing the function with other inputs\nprint(basesnum_coresspondingnum([5,6,7], [1,2,3])) #[5, 36, 2187]\nprint(basesnum_coresspondingnum([10,11,12], [4,5,6])) #[10**4, 11**5, 12**6]",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [0,1,2]) == [1,8,1024]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {} \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    highest_freq = max(freq.values()) \n    lowest_freq = min(freq.values()) \n    return highest_freq - lowest_freq \n\n#Example:\narr = [1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9]\nn = len(arr) \nprint(find_Diff(arr, n)) # Output: 2\n\narr = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]\nn = len(arr) \nprint(find_Diff(arr, n)) # Output: 2\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr) \nprint(find_Diff(arr, n)) # Output: 8\n\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 12) == 8\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum\n\ndef is_abundant(n):\n    if n < 12:\n        return False\n    return get_sum(n) > n\n\n\n# Testing the function\nn = 12\nprint(is_abundant(n)) # Output: False\nn = 18\nprint(is_abundant(n)) # Output: True\nn = 20\nprint(is_abundant(n)) # Output: True\nn = 22\nprint(is_abundant(n)) # Output: False\nn = 24\nprint(is_abundant(n)) # Output: True\nn = 28\nprint(is_abundant(n)) # Output: True\nn = 30\nprint(is_abundant(n)) # Output: False\nn = 36\nprint(is_abundant(n)) # Output: True\nn = 40\nprint(is_abundant(n)) # Output: True\nn = 42\nprint(is_abundant(n)) # Output: False\nn = 44\nprint(is_abundant(n)) # Output: True\nn = 46\nprint(is_abundant(n)) # Output: False\nn = 48\nprint(is_abundant(n)) # Output:",
        "generated_testcode": "assert get_sum(12) == True\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    return re.sub(r\"[ ,.]\", \":\", text)\n\n# Test cases\nprint(fill_spaces(\"This is a test, string. Replace spaces, commas, and dots with a colon\"))\nprint(fill_spaces(\"Replace spaces with colons: here, and dots too.\"))\nprint(fill_spaces(\"The quick brown fox jumps over the lazy dog.\"))\nprint(fill_spaces(\"Replace spaces, commas and dots with a colon\"))\nprint(fill_spaces(\"Replace spaces, commas with colons and dots with colons too.\"))",
        "generated_testcode": "assert fill_spaces(\"Hello, world\" ) == \"Hello:world\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def sum(num1, num2):\n        return num1 + num2\n    num = sum(num1,num2)\n    count = 0\n    while num!=0:\n        count += 1\n        num//=10\n    return count\n\nprint(count_digits(20,30))\nprint(count_digits(123,45))\nprint(count_digits(7,12))\n\n\n# Output:\n# 2\n# 5\n# 3\n# 2 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Define a string variable to store the result\n    result = \"\"\n    \n    # Loop through the tuple list\n    for tup in test_list:\n        # Check if the element is a tuple\n        if isinstance(tup, tuple):\n            # Flatten the tuple using recursion\n            result += flatten_tuple(tup)\n        else:\n            # If not, add the element to the result string\n            result += str(tup)\n            \n    return result\n\n\n# Test the function with a sample input\ntest_list = [(\"Hello\", (\"world\",), ((\"foo\", (\"bar\",), \"baz\"), \"qux\", (\"quux\", (\"quuux\", (\"corge\")))]\nprint(flatten_tuple(test_list))\n# Output: \"Hello worldfoo barbaz qux quux corge\" ",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # take the binary representation of n\n    binary = bin(n)\n    # take the length of the binary representation\n    length = len(binary)\n    # initialize the first and last bits as 0\n    first_bit = 0\n    last_bit = 0\n    # initialize the new binary representation as empty\n    new_binary = \"\"\n    # loop through the bits of binary representation\n    for i in range(length) : \n        # if it is the first bit, toggle it and add to new binary\n        if i == 0 : \n            first_bit = int(not(int(binary[i]))\n            new_binary += str(first_bit)\n        # if it is the last bit, toggle it and add to new binary\n        elif i == length-1 : \n            last_bit = int(not(int(binary[i]))\n            new_binary += str(last_bit)\n        # otherwise, just add the current bit as is to new binary\n        else : \n            new_binary += binary[i]\n    # convert the new binary representation back to decimal and return\n    return int(new_binary, 2)\n\n\n# Test the function with an example\nprint(take_L_and_F_set_bits(10)) # expected output : 9 (1010 -> 11001)\nprint(take_L_and_F_set_bits(11)) # expected output : 10 (1101 -> 1010)\nprint",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 5\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function finds the last occurrence of a character in a string\n    \"\"\"\n    last_index = -1\n    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            last_index = i\n            break\n    return last_index\n\n# Test the function\nprint(last_occurence_char(\"hello world\",\"o\")) # Output: 6\nprint(last_occurence_char(\"hello world\",\"z\")) # Output: -1\nprint(last_occurence_char(\"hello world\",\" \")) # Output: -1\nprint(last_occurence_char(\"\",\" \")) # Output: -1\n",
        "generated_testcode": "assert last_occurence_char(string=\"hello world\", char=\"o\") == 7\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def hamming_distance(x, y):\n        xor = x ^ y\n        count = 0\n        while xor:\n            count += xor & 1\n            xor >>= 1\n        return count\n\n    sum_hamming_dist = 0\n    for i in range(1, n+1):\n        sum_hamming_dist += hamming_distance(i, i+1)\n    return sum_hamming_dist\n\nn = int(input())\nprint(Total_Hamming_Distance(n))\n\n# Test Case\n# Input: 5\n# Output: 10\n# Explanation:\n# Hamming distance between 1 and 2 is 1, between 2 and 3 is 2, between 3 and 4 is 2, between 4 and 5 is 3, \n# so the sum of hamming distances is 1 + 2 + 2 + 3 + 2 + 1 = 8.\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n\n# Input: 10\n# Output: 31\n# Explanation:\n# Hamming distance between 1 and 2 is 1, between 2 and 3 is 2, between 3 and 4 is 2, between 4 and 5 is 3, \n# between 5 and 6 is 2, between 6 and 7 is 2, between 7 and 8 is 2, between",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 10, \"Test case 1 failed\"\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    # Initialize an array of size n+1 with all elements as 1\n    dp = [1] * (n+1)\n    # Initialize a variable to store the length of the longest increasing subsequence\n    max_length = 1\n    # Iterate over the array\n    for i in range(1, n):\n        # Iterate over all the previous elements of the array\n        for j in range(i):\n            # If the current element is greater than the previous element and the difference is 1, then it is part of the increasing subsequence\n            if arr[i] > arr[j] and arr[i] - arr[j] == 1:\n                # Update the length of the subsequence if necessary\n                dp[i] = max(dp[i], dp[j] + 1)\n                # Update the maximum length if necessary\n                max_length = max(max_length, dp[i])\n    # Return the length of the longest increasing subsequence\n    return max_length\n\n# Test the function\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\nprint(\"Length of the longest increasing subsequence:\", longest_increasing_subsequence(arr))  # Output: 4 (10, 22, 33, 50, 60)\n\narr = [0, 8, 4, 11, 3,",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n<=0 : \n        return 0\n    else : \n        sum=0\n        for i in range(1,n+1,2) : \n            sum+=i**5\n        return sum\n\n# Testing the function \nprint(odd_Num_Sum(5)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": " \n    # If there is only one element \n    if low == high: \n        return arr[low] \n  \n    # If there are only two elements and the second element is greater \n    if high == low + 1 and arr[low] < arr[high]: \n        return arr[high] \n  \n    # Find the mid-point and the maximum element \n    if high == low + 1: \n        return max(arr[low], arr[high]) \n  \n  \n    mid = (low + high) // 2\n    if arr[mid] > arr[high]: \n        return find_Max(arr, low, mid) \n    else: \n        return find_Max(arr, mid, high) \n  \n   \n# Driver function \narr = [1,2,3,4,5,6,7,8,9,10,11,1,2,3,4] \nn = len(arr) \nprint(\"The maximum element is:\", find_Max(arr, 0, n-1)) ",
        "generated_testcode": "assert find_Max([4,5,6,7,8,9,10,1,2,3], 0, 5) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        result.append(sublist[n-1])\n    return result\n\n#Test the function\nlist1 = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['apple', 'dog', 'zebra']]\nprint(extract_column(list1, 2))\n# Output: ['banana', 'cat', 'zebra'] ",
        "generated_testcode": "assert extract_column([[1,2,3], [4,5,6], [7,8,9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(seq_nums) == 1:\n        return True\n    elif len(seq_nums) == 2:\n        return True if seq_nums[0] + 1 == seq_nums[1] else False\n    else:\n        diff = seq_nums[1] - seq_nums[0]\n        for i in range(2, len(seq_nums)):\n            if seq_nums[i] - seq_nums[i-1] != diff:\n                return False\n        return True\n\n\n# Testing the function\nseq1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nseq2 = [1, 3, 5, 7, 9]\nseq3 = [1, 4, 7, 10, 13, 16, 20]\nseq4 = [1, 2, 4, 6, 8, 10, 12, 14, 16]\nseq5 = [1, 4, 6, 11, 10, 14, 17]\n\nprint(Seq_Linear(seq1))  # True\nprint(Seq_Linear(seq2))  # True\nprint(Seq_Linear(seq3))  # True\nprint(Seq_Linear(seq4))  # False\nprint(Seq_Linear(seq5))  # False\n\n",
        "generated_testcode": "assert Seq_Linear([1,2,3,4,5,6,7,8,9] ) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return float(\"\".join(str(test_tup))\n\n\n# Test cases\nprint(tuple_to_float((1, 2, 3, 4, 5)) # Should return 12.345\nprint(tuple_to_float((1, 2, 3, 5, 6, 7, 8)) # Should return 123.45678\nprint(tuple_to_float((1, 2)) # Should return 12.0\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # Should return 123.4567891\nprint(tuple_to_float((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # Should return 123.4567891\n",
        "generated_testcode": "assert tuple_to_float(()) == 0.0\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    odd = []\n    even = []\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd\n\n# Test the function\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nodd_list = Split(mixed_list)\nprint(odd_list)\n# Output: [1, 3, 5, 7, 9, 11, 13, 15]\n\n\n# Another test case\nmixed_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\nodd_list = Split(mixed_list)\nprint(odd_list)\n# Output: []\n\n# Another test case\nmixed_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\nodd_list = Split(mixed_list)\nprint(odd_list)\n# Output: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == [1,3,5,7,9,11,13,15,17,19]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_cubes = 0\n    sum_of_n = 0\n    for i in range(1, n+1) :\n        sum_of_cubes += i**3\n        sum_of_n += i\n    return sum_of_n**3 - sum_of_cubes\n\nn = int(input(\"Enter a positive integer: \"))\nprint(difference(n))\n\n#Test Cases\nprint(difference(5)) # Output: 1280\nprint(difference(10)) # Output: 6930\nprint(difference(15)) # Output: 365120\nprint(difference(20)) # Output: 14133756\nprint(difference(25)) # Output: 314494800",
        "generated_testcode": "assert difference(5) == 125 - 5*5 = 120\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N): \n        for j in range(i+1, N): \n            if (A[i]^A[j]) % 2 != 0 : \n                count += 1\n    return count ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 3) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n# Test cases\nprint(toggle_string(\"Hello World\")) # hELLO wORLD\nprint(toggle_string(\"Python\")) # pYTHON\nprint(toggle_string(\"aBcDe\")) # AbCdE\nprint(toggle_string(\"12345\")) # 12345\nprint(toggle_string(\"\")) # ",
        "generated_testcode": "assert toggle_string(None) == None\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num1 = str(n1)\n    num2 = str(n2)\n    min_len = min(len(num1), len(num2))\n    distance = 0\n    for i in range(min_len):\n        if num1[i] != num2[i]:\n            distance += 1\n    for i in range(min_len, len(num1)):\n        distance += 1\n    for i in range(min_len, len(num2)):\n        distance += 1\n    return distance\n\n\n# Test cases\nprint(digit_distance_nums(13, 24))  # Output: 3\nprint(digit_distance_nums(123, 245))  # Output: 4\nprint(digit_distance_nums(567, 123))  # Output: 2\nprint(digit_distance_nums(10000, 234))  # Output: 4\nprint(digit_distance_nums(1234, 2345))  # Output: 3\n\nprint(digit_distance_nums(12345, 2345))  # Output: 0\nprint(digit_distance_nums(1234, 12345))  # Output: 1\nprint(digit_distance_nums(123, 123))  # Output: 0\n",
        "generated_testcode": "assert digit_distance_nums(1234, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n# test the function\na = [1, -2, 3, 4, -5, 7, 8, -6]\nprint(max_sub_array_sum(a, len(a)))\n# Output: 15 (8 + 7)\n\na = [-1, -2, -3, -4, -5, -7, -8, -6]\nprint(max_sub_array_sum(a, len(a))\n# Output: -1 (which is the largest sum of a contiguous subarray in the array)\n\na = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(max_sub_array_sum(a, len(a))\n# Output: 25 (which is the largest sum of a contiguous subarray in the array) ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 10, -5, 6, -2, 7, 8, -1], 6) == 18\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    union_lst = []\n    for i in test_tup1:\n        if i not in union_lst:\n            union_lst.append(i)\n    for j in test_tup2:\n        if j not in union_lst:\n            union_lst.append(j)\n    return union_lst\n\n# Test the function\nprint(union_elements((1,2,3,4,5,6), (3,4,5,6,7,8,9))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(union_elements((1,2,2,3,3,4,5), (3,4,5,5,6,7,8))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(union_elements((1,2,3,4,5), (6,7,8,9,10))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(union_elements((1,2,3,4), ())  # Output: [1, 2, 3, 4]\nprint(union_elements((), (5,6,7,8))  # Output: [5, 6, 7, 8]\nprint(union_elements())  # Output:",
        "generated_testcode": "assert union_elements((), ()) == ()\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result[(test_list[i], test_list[j])] = (test_list[j], test_list[i])\n    return result\n\nprint(assign_elements([1, 2, 3, 4, 5, 6]))\nprint(assign_elements((\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"))\n\n# Expected output:\n# {(1, 2): (2, 1), (2, 3): (3, 2), (3, 4): (4, 3), (4, 5): (5, 4), (5, 6): (6, 5)}\n# {('apple', 'banana'): ('banana', 'apple'), ('banana', 'orange'): ('orange', 'banana'), ('orange', 'grape'): ('grape', 'orange'), ('grape', 'kiwi'): ('kiwi', 'grape')}\n",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g') == {'a': ['b', 'c', 'e', 'f'], 'b': ['a', 'c', 'd'], 'c': ['a', 'b', 'd', 'e'], 'd': ['b', 'c', 'e', 'f'], 'e': ['a', 'c', 'd', 'f'], 'f': ['a', 'd', 'g']}\n\n# Test case 2\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize two variables to keep track of the current maximum length of sublist and the current length of sublist\n    max_length = 0\n    current_length = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    # Add the last sublist to the maximum length\n    max_length = max(max_length, current_length)\n    return max_length\n\n\n# Test the function with an example list\nlst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1]\nprint(Find_Max_Length(lst)) # Output: 6\n\n\n# Test the function with another example list\nlst = [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(Find_Max_Length(lst)) # Output",
        "generated_testcode": "assert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    values = []\n    in_quotes = False\n    current_value = \"\"\n    for char in text:\n        if char == \"\\\"\":\n            if in_quotes:\n                values.append(current_value)\n                in_quotes = False\n                current_value = \"\"\n            else:\n                in_quotes = True\n        elif in_quotes:\n            current_value += char\n    return values\n\n\n# Test cases\nprint(extract_values(\"hello \\\"world\\\" \\\"python\\\" \\\"is\\\" \\\"awesome\\\"\"))\nprint(extract_values(\"this \\\"is\\\" not \\\"a\\\" test \\\"string\\\"\"))\nprint(extract_values(\"\\\"this\\\" \\\"is\\\" \\\"a\\\" test\"))\nprint(extract_values(\"no \\\"quotes\\\" here\"))",
        "generated_testcode": "assert extract_values(r'\"hello\" \"world\" \"python\" \"code\"') == ['hello', 'world', 'python']\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count +=1\n    return count\n\n#Test the function\narr = [1,2,2,3,3,4,4,5,5,6,6,7,8]\nn = len(arr)\nprint(count_Pairs(arr,n))\n\n\n#Output: 3\n\n\n#Explanation: \n#The unequal element pairs in the given array are (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,1) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) and (8,1) \n#Therefore, the output will be 7.\n#We have considered the case when the first element is equal to the last element.\n\n\n#Input: [1,2,3,4,5,6,7,8]\n#Output: 0\n#There are no unequal element pairs in the given array as all the elements are unique.\n\n#Explanation: ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9], 6) == 21\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(word) \n\n# Test the function with an example \nprint(split(\"hello\")) ",
        "generated_testcode": "assert split(None) == []\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test the function\nprint(sum_digits(42))  # Output: 6\nprint(sum_digits(13337))  # Output: 10\nprint(sum_digits(9876543210))  # Output: 28\nprint(sum_digits(0))  # Output: 0\n\n\n# Another way to implement the same function using recursion\ndef sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test the function\nprint(sum_digits(42))  # Output: 6\nprint(sum_digits(13337))  # Output: 10\nprint(sum_digits(9876543210))  # Output: 28\nprint(sum_digits(0))  # Output: 0\n\n\n# Another way to implement the same function using a loop\ndef sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Test the function\nprint(sum_digits(42))  # Output: 6",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n\n#Test the function\nprint(issort_list([1,2,3,4,5,6,7,8,9])) #True\nprint(issort_list([1,3,4,2,5,6,7,8,9])) #False\nprint(issort_list([1,2,3,4,5,5,6,7,8,9])) #False\nprint(issort_list([1,2,3,4,5,6,7,8,9])) #True\n\n\n#Alternative solution\ndef issort_list(lst):\n    return lst == sorted(lst)\n\n#Test the function\nprint(issort_list([1,2,3,4,5,6,7,8,9])) #True\nprint(issort_list([1,3,4,2,5,6,7,8,9])) #False\nprint(issort_list([1,2,3,4,5,6,7,8,9])) #True",
        "generated_testcode": "assert issort_list(sorted([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return [{} for _ in range(length)]\n\ndef create_list(length):\n    return [{'name': None, 'age': None, 'gender': None, 'email': None} for _ in range(length)]\n\n#Example usage:\nmy_list = create_list(3)\nprint(my_list)\n#Output:\n#[{'name': None, 'age': None, 'gender': None, 'email': None}, {'name': None, 'age': None, 'gender': None, 'email': None}, {'name': None, 'age': None, 'gender': None}]\n\n#Alternative:\n#my_list = empty_list(3)\n#print(my_list)\n#Output:\n#[{}, {}, {}]\n\n#Both will create a list of length 3 with dictionaries that are empty. ",
        "generated_testcode": "assert empty_list(5) == [{} for i in range(5)]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for sublist in list1:\n        sublist.sort()\n    return list1\n\n\n#Test the function\nmy_list = [['cat', 'dog', 'apple', 'banana', 'cherry'], ['zebra', 'giraffe', 'elephant', 'hippopotamus'], ['orange', 'apple', 'banana']]\nprint(sort_sublists(my_list))\n\n# Expected output: [['apple', 'banana', 'cat', 'cherry'], ['elephant', 'giraffe', 'hippopotamus'], ['apple', 'banana', 'orange']] ",
        "generated_testcode": "assert sort_sublists([\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"grapefruit\", \"peach\", \"pear\", \"apple\", \"kiwi\", \"peach\", \"orange\"] == [\"apple\", \"apple\", \"banana\", \"grape\", \"grapefruit\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"peach\", \"pear\", \"pear\", \"pear\", \"peach\"]\n\n# Test case 2\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create a new list to store the result\n    new_list = []\n    # Loop through each string in the list\n    for word in list1:\n        # Loop through each character in the character list\n        for char in charlist:\n            # If the character is found in the word, remove it\n            if char in word:\n                word = word.replace(char, \"\")\n        # Add the modified word to the new list\n        new_list.append(word)\n    # Return the new list\n    return new_list\n\n# Example usage:\nprint(remove_words([\"hello world\", \"python\", \"programming\", \"java\"], [\"l\", \"o\", \"a\"]))\n# Output: [\"hld wrd\", \"pythn\", \"prgrmmng\", \"j\"]\n\n# Explanation:\n# \"hello world\" contains the character \"l\" and \"o\", so \"lo\" is removed\n# \"java\" contains the character \"a\", so \"a\" is removed\n# \"programming\" does not contain \"l\" or \"o\", so it remains the same\n# \"java\" does not contain \"l\" or \"o\", so it remains the same\n# The new list is [\"hld wrd\", \"pythn\", \"prgrmmng\", \"j\"]\n",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\"], [\"a\", \"e\"]) == [\"ppl\", \"nana\", \"rry\", \"t\", \"grp\", \"w\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    max_sum = 0\n    i = 0\n    j = N-1\n    while i < j:\n        if arr[i] + arr[j] > K:\n            max_sum += arr[j] - arr[i]\n            j -= 1\n        else:\n            i += 1\n    return max_sum\n\n# Test the function with the given testcase\narr = [1, 6, 3, 11, 4, 2, 4]\nK = 11\nprint(max_sum_pair_diff_lessthan_K(arr, len(arr), K))\n\n\n# Output: 9 (11-1 + 3-1 = 10) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 24\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums_set = set()\n    for i in nums:\n        nums_set.add(i)\n    return len(nums_set) == len(nums)\n\n# Test the function\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6, 7, 8, 9])) # False\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(two_unique_nums([1, 2, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(two_unique_nums([1, 2, 3, 4, 4, 5, 6, 7, 8])) # False\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8])) # True\n\n\n# or \n\n\ndef two_unique_nums(nums):\n    return len(set(nums)) == len(nums)\n# Test the function\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6, 7, 8, 9])) # False\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7",
        "generated_testcode": "assert two_unique_nums([1,2,3,4,5,6,7,8,9,1,2] ) == [3,4,5,6,7,8,9]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nprint(unique_product([1, 2, 3, 2, 1, 4, 5, 3])) # Should return 60 (2 * 4 * 5 = 80)\nprint(unique_product([1, 2, 3, 4, 5])) # Should return 60 (2 * 3 * 4 * 5 = 120)\nprint(unique_product([1, 1, 1, 2, 2, 3])) # Should return 6 (2 * 3 = 6)\nprint(unique_product([1, 2, 3, 4, 5, 6])) # Should return 120 (2 * 3 * 4 * 5 * 6 = 120)\n\n# Test the function with an empty list\nprint(unique_product([])) # Should return 1\n\n# Test the function with a list with one number\nprint(unique_product([1])) # Should return 1",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 945\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 2*3.14*r*r+2*3.14*r*h\n    return area\n\n#Test the function with some values\nprint(surfacearea_cylinder(2,3)) #Output: 258.274333388823071748\nprint(surfacearea_cylinder(4,6)) #Output: 85.39838700468749488\n\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    volume = 3.14*r*r*h\n    return volume\n\n#Test the function with some values\nprint(volume_cylinder(2,3)) #Output: 19.634954075\nprint(volume_cylinder(4,6)) #Output: 50.265480269\n\n\n#Write a function to find the lateral surface area of a cylinder\ndef lateralsurfacearea_cylinder(r,h):\n    lateralarea = 2*3.14*r*r\n    return lateralarea\n\n#Test the function with some values\nprint(lateralsurfacearea_cylinder(2,3)) #Output: 38.27433388823071748\nprint(lateralsurfacearea_cy",
        "generated_testcode": "assert surfacearea_cylinder(5,10) == 314.159894590513838162\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    pass\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(A,N,L,R,i,j,count):\n        if i>R or j<L:\n            return -1\n        if i==N:\n            return L\n        if i%A==0:\n            return helper(A,N,L,i+1,j,count)\n        else:\n            return helper(A,N,j,i-1,i+1,count+1)\n    return helper(A,N,1,R,1)\n    \n#Testing the function\nprint(count_no(3,1,100))  #Output: 13\nprint(count_no(5,1,100))  #Output: 6\nprint(count_no(7,1,100))  #Output: 15\nprint(count_no(2,1,10))  #Output: 0\nprint(count_no(7,1,1000)) #Output: 114 ",
        "generated_testcode": "assert count_no (2, 1, 10) == 1\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    # initialize a set for array B\n    set_B = set(B)\n    for i in range(n):\n        if A[i] in set_B:\n            return True\n    return False\n\n#main\nA = [1,2,3,4,5,6,7,8]\nB = [3,4,5,6,7,8,9,10]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n    print(\"Subarray exists\")\nelse:\n    print(\"Subarray does not exist\")\n\n#output: Subarray exists\n\nA = [1,2,3,4,5,6,7,8]\nB = [3,4,5,6,7,8,9,10]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n    print(\"Subarray exists\")\nelse:\n    print(\"Subarray does not exist\")\n\n#output: Subarray does not exist\n\n\n#Time Complexity: O(n)\n#Space Complexity: O(m)",
        "generated_testcode": "assert is_Sub_Array(A=[1,2,3,4,5,6,7,8,9], B=[4,5,6], n=6, m=3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==0:\n        return 1\n    else:\n        return (last_Digit_Factorial(n-1)%10 * (n)) % 10\n\n# Test the function with some inputs\nprint(last_Digit_Factorial(5))  # Output: 5\nprint(last_Digit_Factorial(10)) # Output: 0\nprint(last_Digit_Factorial(20)) # Output: 2\nprint(last_Digit_Factorial(30)) # Output: 0\nprint(last_Digit_Factorial(100)) # Output: 6\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 1\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(list1) != len(list2) or len(list2) != len(list3):\n        return \"Lists must be of the same length\"\n    else:\n        interleaved = []\n        for i in range(len(list1)):\n            interleaved.append(list1[i])\n            interleaved.append(list2[i])\n            interleaved.append(list3[i])\n        return interleaved\n\n# Testing the function\nlist1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = [7,8,9]\nprint(interleave_lists(list1,list2,list3)) # Output: [1,4,7,2,5,8,3,6,9]\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nlist3 = [9,10,11,12]\nprint(interleave_lists(list1,list2,list3)) # Output: [1,5,9,2,6,10,3,7,11,4,8]\n\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\nlist3 = [11,12,13,14,15]\nprint(interleave_lists(list1,list2,list3)) # Output: [1",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[True,False,True]) == [\"a\",1,True,\"b\",2,False,\"c\",3]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in two tuples as input and returns a list of all the elements in test_tup1 that are not present in test_tup2.\n    \"\"\"\n    result = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            result.append(elem)\n    return result\n\n\n# Testing the function\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8))\n# Output: [1, 2]\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2))\n# Output: [1]\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7, 8, 9))\n# Output: [6]",
        "generated_testcode": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == (\"apple\", \"cherry\")\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tuple: a nested tuple of integers, strings and lists\n    :return: a tuple with only the even elements of the given tuple\n    \"\"\"\n    even_list = []\n    for i in test_tuple:\n        if type(i) == int and i % 2 == 0:\n            even_list.append(i)\n        elif type(i) == list:\n            for j in i:\n                if type(j) == int and j % 2 == 0:\n                    even_list.append(j)\n    return tuple(even_list)\n    \n# Test cases\nprint(even_ele(((1, 2, 3, (4, 5, 6), (\"a\", \"b\", 7, 8, (\"c\", \"d\", 9, 10, [11, 12, 13], 14), 15)))    # Output: (2, 4, 6, 8, 10, 12, 14)\nprint(even_ele((1, \"2\", 3, [4, 5, [6, \"7\", 8, 9, [10, 11, 12], 13], 14, 15, [16, \"17\"]))    # Output: (4, 10, 14, 16)\nprint(even_ele((\"a\", \"b\", [1, 2, 3, [4",
        "generated_testcode": "assert even_ele((), lambda x: x % 2 == 0) == ()\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return (b*s) * 4\n\n#Test the function\nb = 5\ns = 1\nprint(\"The surface area of the square pyramid is\", surface_Area(b,s)) # Output: The surface area of the square pyramid is 20 ",
        "generated_testcode": "assert surface_Area(4, 2) == 32\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if dict1 == {}:\n        return True\n    else:\n        return False\n\n# Test the function with an empty dictionary\nprint(my_dict({})) # Output: True\n# Test the function with a non-empty dictionary\nprint(my_dict({'a':1, 'b':2, 'c':3})) # Output: False\n\n\n# Better implementation using the len() function\ndef my_dict(dict1):\n    return len(dict1) == 0\n\n# Test the function with an empty dictionary\nprint(my_dict({})) # Output: True\n# Test the function with a non-empty dictionary\nprint(my_dict({'a':1, 'b':2, 'c':3})) # Output: False\n",
        "generated_testcode": "assert my_dict(dict()) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n    return (2*num) * catalan_number(num - 1) // (num + 1)\n\n# test the function\nprint(catalan_number(5))  # Output: 14\n\n\n# write a function to find the nth fibonacci number\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# test the function\nprint(fibonacci(10))  # Output: 55\n\n\n# Write a function to find the nth element of the pascal's triangle\ndef pascal(row, col):\n    if col == 0 or col == row:\n        return 1\n    else:\n        return (pascal(row - 1, col - 1) + pascal(row - 1, col))\n\n# test the function\nprint(pascal(5, 2))  # Output: 5\n\n\n# Write a function to find the nth element of the binomial coefficient\ndef binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a list to store adverbs and their positions\n    adverbs = []\n    \n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(rarely|seldom|never|often|usually|sometimes|always|occasionally|generally|frequently|commonly|rarely|sometimes|often|usually|normally|regularly|now|then|already|especially|never|fortunately|unfortunately|fortunately|fortunately|fortunately|unfortunately|fortunately|fortunately|unfortunately)\\b'\n    \n    # Find all matches in the text and append them to the list with their positions\n    for match in re.finditer(pattern, text):\n        adverbs.append((match.group(), match.start()))\n        \n    # Return the list of adverbs and their positions\n    return adverbs\n\n# Test the function with a sample sentence\ntext = \"The book read regularly, I read it rarely.\"\nprint(find_adverbs(text)) ",
        "generated_testcode": "assert find_adverbs(\n    \"The dog is quickly running after the cat.\"\n) == [(\"quickly\", 10), (\"quickly\", 17)]\n\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]) ) \n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]\n\n\nitems = [(10, 50), (20, 30), (15, 40), (30, 15), (35, 30), (40, 20)]\nn = 2\nprint(expensive_items(items, n))\n\n# Output: [20, 15]\n\n\nitems = [(10, 50), (20, 30), (15, 40), (30, 15), (35, 30), (40, 20), (25, 25)]\nn = 3\nprint(expensive_items(items, n))\n\n# Output: [10, 20, 25]\n\nitems = [(10, 50), (20, 30), (15, 40), (30, 15), (35, 30), (40, 20), (25, 25)]\nn = 4",
        "generated_testcode": "assert expensive_items(\n    [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 30}, {\"name\": \"item4\", \"price\": 40}, {\"name\": \"item5\", \"price\": 50}, {\"name\": \"item6\", \"price\": 60}, {\"name\": \"item7\", \"price\": 70}, {\"name\": \"item8\", \"price\": 80}, {\"name\": \"item9\", \"price\": 90}, {\"name\": \"item10\", \"price\": 100}], 3) == [{\"name\": \"item9\", \"price\": 90}, {\"name\": \"item8\", \"price\": 80}, {\"name\": \"item7\", \"price\": 70}]\n\n# Test case 2\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==1:\n        return [a[0:k] + a[k:]]\n    else:\n        return [a[k:]+a[0:k]]\n    \n# Testing the function  \na = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = 3\nk = 2\nprint(split_Arr(a, n, k)) ",
        "generated_testcode": "assert split_Arr([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\"], 2, 3) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\", \"grape\"]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    tup = tuple(listx)\n    return tup\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list_tuple(my_list)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n# Write a function to multiply two numbers without using the * operator\ndef multiply(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n\n# Test the function\nprint(multiply(3, 5)) # Output: 15\n\n# Write a function to reverse a string\ndef reverse_string(string):\n    reversed_string = string[::-1]\n    return reversed_string\n\n# Test the function\nmy_string = \"hello\"\nprint(reverse_string(my_string)) # Output: \"olleh\"\n\n# Write a function to remove duplicates from a list\ndef remove_duplicates(lst):\n    return list(set(lst))\n\n# Test the function\nmy_list = [1, 2, 3, 4, 3, 4, 5, 2, 6, 7, 8, 2, 9, 1]\nprint(remove_duplicates(my_list)) # Output: [1, 2, 3, 4, 5, 6,",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n\n# Test the function with the following input:\nnums = [5, 2, 8, 1, 3, 10, 6]\nprint(big_diff(nums)) # Output: 8 (8 - 1)\n\nnums = [10, 2, 1, 8, 5, 6]\nprint(big_diff(nums)) # Output: 8 (10 - 1)\n\nnums = [7, 10, 4, 12, 9, 3]\nprint(big_diff(nums)) # Output: 9 (12 - 3)\n\nnums = [100, 23, 65, 12, 80, 34, 68]\nprint(big_diff(nums)) # Output: 88 (88)\n\nnums = [123, 456, 789, 345, 678, 987]\nprint(big_diff(nums)) # Output: 976 (987 - 456) ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(int(a), int(b) + 1):\n        if int(i ** 0.5) ** 2 == i:\n            result.append(i)\n    return result\n\n# Test the function\nprint(perfect_squares(1, 25))  # [1, 4, 9, 16, 25]\nprint(perfect_squares(17, 24))  # [16, 25, 36]\nprint(perfect_squares(100, 1100))  # [100]\nprint(perfect_squares(20, 29))  # [4, 9, 16, 25, 36]\nprint(perfect_squares(1, 1000))  # [1, 4, 9, 16, 25, 36, 49, 64, 7, 81, 1000]\n",
        "generated_testcode": "assert perfect_squares(1, 10) == [1, 4, 9]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Takes two arguments x and y, which represent a point in polar coordinates, and returns the\n    corresponding point in rectangular coordinates (x,y)\n    \"\"\"\n    r = x\n    theta = y * 2 * np.pi / 360\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x,y)\n\n\n# Test cases\nprint(polar_rect(1, 45)) # Output: (0.7071067811186547558, 0.707106781118654758)\nprint(polar_rect(2, 90)) # Output: (0, 2)\nprint(polar_rect(3, 180)) # Output: (-2, 0)\n\n\n# Solution\nimport math\n\ndef polar_rect(r, theta):\n    theta = math.radians(theta)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\n# Test cases\nprint(polar_rect(1, 45)) # Output: (0.707106781118654758, 0.707106781118654758)\nprint(polar_rect(2, ",
        "generated_testcode": "assert polar_rect(1, 45) == (1, 0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(newList) > 1: \n        newList[0], newList[-1] = newList[-1], newList[0] \n    else: \n        print(\"List should have at least two elements.\") \n    return newList \n\n  \n# example usage: \nnewList = [1,2,3,4,5] \nprint(\"Original list: \", newList) \nprint(\"Swapped list: \", swap_List(newList)) \n  \nnewList = [1] \nprint(\"Original list: \", newList) \nprint(\"Swapped list: \", swap_List(newList)) \nnewList = [] \nprint(\"Original list: \", newList) \nprint(\"Swapped list: \", swap_List(newList) ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"] == [\"orange\", \"banana\", \"apple\", \"grape\"])\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    else: \n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)) \n\ndef sum_of_binomial_product(n):\n    result = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            result += binomial_Coeff(n, i) * binomial_Coeff(n, j) * i * j\n    return result\n\nn = 10\nprint(\"Sum of product of binomial co-efficients:\", sum_of_binomial_product(n))\n\n# Output: 4189\n# Explanation: \n# The sum of product of binomial co-efficients of (10,0) to (10,10) is 4189. \n# We can check it by computing each product separately. \n# 10C0 * 10C0 + 10C1 * 0 * 1 + 10C2 * 0 * 2 + ... + 10C10 * 0 * 10 = 1 * 1 + 10 * 10 + 45 * 20 + 120 * 30 + 105 * 40 + 10 * 50 + 5 * 60 + 10 * 7",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while ip[i] == \"0\" and i < len(ip) - 1:\n        i += 1\n    return ip[i:]\n\n# Test cases\nprint(removezero_ip(\"0001.0002.003.004\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"0001.2.003.4\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"1.02.3.4\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"001.02.3.004\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"1.02.003.04\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"0.001.02.3.4\"))  # Output: \"0.1.2.4\"\nprint(removezero_ip(\"1.2.3.4\"))  # Output: \"1.2.3.4\"\nprint(removezero_ip(\"0.0.0.0\"))  # Output: \"0.0.0\"\nprint(removezero_ip(\"0.000.00.00\"))  # Output: \"0.0.0\"\nprint(removezero_ip(\"00.0.0",
        "generated_testcode": "assert removezero_ip(\"010.001.0002.003\") == \"10.1.2.3\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    if len(even_num) == 0:\n        return 0\n    else:\n        return abs(min(even_num) - max(odd_num))\n\n# Test the function with an example list\nlist1 = [3, 2, 5, 1, 6, 4, 7, 8, 9, 10]\nprint(diff_even_odd(list1))  # Output: 4\n\n\n# Test the function with another example list\nlist2 = [1, 3, 5, 7, 9, 11, 13]\nprint(diff_even_odd(list2))  # Output: 0\n\n\n# Test the function with an empty list\nlist3 = []\nprint(diff_even_odd(list3))  # Output: 0\n\n\n# Test the function with a list containing only even numbers\nlist4 = [10, 8, 6, 4, 2]\nprint(diff_even_odd(list4))  # Output: 0\n\n\n# Test the function with a list containing only odd numbers\nlist5 = [1, 3, 5, 7, 9]\nprint(diff_even_odd(list5))  # Output:",
        "generated_testcode": "assert diff_even_odd([1,2,3,4,5,6,7,8,9] ) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            j = str2.index(str1[i])\n            str2[i], str2[j] = str2[j], str2[i]\n            count += 1\n    return count\n\n# Test the function with examples\nstr1 = \"101101\"\nstr2 = \"111100\"\nprint(min_Swaps(str1,str2))\n\nstr1 = \"00111\"\nstr2 = \"01110\"\nprint(min_Swaps(str1,str2))\n\nstr1 = \"0011101101\"\nstr2 = \"1101110001\"\nprint(min_Swaps(str1,str2))\n\nstr1 = \"010110\"\nstr2 = \"101100\"\nprint(min_Swaps(str1,str2))\n\n#Output: \n#1\n#1\n#3\n#1\n#0\n",
        "generated_testcode": "assert min_Swaps(str1=\"1011\",str2=\"0111\") == 1\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(tuple_list)\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(tuple_size(my_tuple))  # Output: 6\n\nmy_tuple = (4, 5, 6, 7, 8, \"apple\", \"banana\", \"orange\")\nprint(tuple_size(my_tuple))  # Output: 5\n\nmy_tuple = (23, \"python\", True, 3.14, [1, 2, 3], (4, 5, 6))\nprint(tuple_size(my_tuple))  # Output: 4\n\n# Note that the size of the tuple is calculated based on the number of elements in the tuple, not the number of characters in the elements. ",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, n, m, k)\n\n    i, j, count = 0, 0, 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += m - i\n        else:\n            count += n - j\n        if count == k:\n            return arr1[i]\n        elif count < k:\n            i += 1\n            k -= m - i\n        else:\n            j += 1\n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i]\n\n\n# Testing the function\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 3\nprint(\"The kth element is:\", find_kth(arr1, arr2, m, n, k))\n\n\n# Output: The kth element is: 5\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 4\nprint(\"The kth element is:\", find_kth(arr1, arr2, m, n",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 3) == 7\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = number\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n\n# Test the function with some inputs\nprint(armstrong_number(153))\nprint(armstrong_number(370))\nprint(armstrong_number(371))\nprint(armstrong_number(407))\nprint(armstrong_number(9474))\nprint(armstrong_number(9475))\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n\n# Test the function with 10\nprint(sum_average(10))\n\n# Test the function with 5\nprint(sum_average(5))\n# Test the function with 7\nprint(sum_average(7))\n\n# Test the function with 15\nprint(sum_average(15)) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # using bitwise operator to check if the last bit of the binary representation of a number is 0\n    return n & 1 == 0\n\n# test the function\nprint(is_Even(4)) # True\nprint(is_Even(7)) # False\nprint(is_Even(10)) # True\nprint(is_Even(15)) # False\nprint(is_Even(25)) # True\n",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.a = a \n\t\tself.b = b \n\n\tdef longest_chain(self): \n\t\tn = len(self.a) \n\t\tm = len(self.b) \n\t\tdp = [[0 for i in range(m + 1)] for j in range(n + 1)] \n\n\t\t# Create a list to store the lengths of the chains \n\t\tlength = [[0 for j in range(m + 1)] for i in range(n + 1)] \n\n\n\t\t# Base case: if either a or b is empty, length of chain is 0 \n\t\tfor i in range(n + 1): \n\t\t\tlength[i][0] = 0\n\t\tfor j in range(m + 1): \n\t\t\tlength[0][j] = 0\n\n\n\t\tfor i in range(1, n + 1): \n\t\t\tfor j in range(1, m + 1): \n\t\t\t\tif self.a[i - 1] == self.b[j - 1]: \n\t\t\t\t\tlength[i][j] = 1 + length[i - 1][j - 1] \n\t\t\t\t\tdp[i][j] = 1\n\t\t\t\telse: \n\t\t\t\t\tlength[i][j] = max(length[i - 1][j], length[i][j - 1]) ",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n\n# Test the function\nprint(first_repeated_char(\"hello world\")) # Output: \"l\"\nprint(first_repeated_char(\"hello world hello\")) # Output: \"l\"\nprint(first_repeated_char(\"abcdabc\")) # Output: None\n\n\n#Alternate solution using set and list\ndef first_repeated_char_alt(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None\n\n# Test the function\nprint(first_repeated_char_alt(\"hello world\")) # Output: \"l\"\nprint(first_repeated_char_alt(\"hello world hello\")) # Output: \"l\"\nprint(first_repeated_char_alt(\"abcdabc\")) # Output: None\n",
        "generated_testcode": "assert first_repeated_char(None) == None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    lucid_nums = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2,i)):\n            lucid_nums.append(i)\n    return lucid_nums\n\n\n# Test the function\nprint(get_ludic(20)) #[2, 3, 5, 7, 11, 13, 17, 19]\nprint(get_lucid(40)) #[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 1137, 127, 131, 137, 149, 157, 167, 179, 181, 193, 197, 199, 2111, 2233, 227, 239, 241, 251, 269, 271]\n\n\n# Using a list comprehension\ndef get",
        "generated_testcode": "assert get_ludic(10) == 4\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = s.split()\n    words = [word[::-1] for word in words]\n    return ' '.join(words)\n\n# Test the function with the example input\nprint(reverse_words(\"hello world\")) # Output: \"olleh dlrow\"\nprint(reverse_words(\"python is awesome\")) # Output: \"nohtyP si emosewa\"\nprint(reverse_words(\"geeks for geeks\")) # Output: \"skeg esorG fokeeg\"\nprint(reverse_words(\"i am a learner\")) # Output: \"ereht a ma i\"\n\n# Test the function with the edge case\nprint(reverse_words(\"\")) # Output: \"\"",
        "generated_testcode": "assert reverse_words(None) == None\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n\n# Test the function\nprint(prime_num(7)) # True\nprint(prime_num(10)) # False\nprint(prime_num(13)) # True\nprint(prime_num(15)) # False\nprint(prime_num(37)) # True\nprint(prime_num(45)) # False\n\n\n# Write a function to check if a number is even or odd\ndef even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function\nprint(even_or_odd(5)) # Odd\nprint(even_or_odd(8)) # Even\nprint(even_or_odd(7)) # Odd\nprint(even_or_odd(23)) # Odd\nprint(even_or_odd(10)) # Even\n\n\n# Write a function to calculate the factorial of a number\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Test the function\nprint(factorial(5)) # 120\nprint(factorial(7)) # 5040\nprint(factorial(0)) # 1\n\n# Write a function to",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Convert degrees to radians\n    \"\"\"\n    return degree * (math.pi/180)\n\n\n# Test the function\nprint(radian_degree(90)) # Output: 1.57079632677949\nprint(radian_degree(180)) # Output: 3.1415926535898\nprint(radian_degree(360)) # Output: 6.2831853071779\nprint(radian_degree(0)) # Output: 0.0\nprint(radian_degree(720)) # Output: 4.7123888980385\n",
        "generated_testcode": "assert radian_degree(0) == 0\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    regex = re.compile(r'(?<!\\\\)\\{pattern\\}'.format(pattern=pattern)\n    matches = re.finditer(regex, text)\n    locations = []\n    for match in matches:\n        locations.append((match.start(), match.end()))\n    return locations\n\n\n# Test\ntext = \"The {pattern} is the {pattern} in the {pattern} text.\"\npattern = \"pattern\"\nprint(find_literals(text, pattern)) # [(10, 17), (25, 32), (38, 45)]\n# The pattern occurs at locations 10, 25, and 38 in the text\n\ntext = \"The {pattern} is the {pattern} in the {pattern} text, but it's not the {pattern}.\"\npattern = \"pattern\"\nprint(find_literals(text, pattern)) # [(10, 17), (25, 32), (38, 45), (63, 70)]\n# The pattern occurs at locations 10, 25, and 38 in the text\n\ntext = \"The {pattern} is the {pattern} in the {pattern} text, but it's not the {pattern}.\"\npattern = \"text\"\nprint(find_literals(text, pattern)) # [(25, 30), (41, 46)]\n# The pattern occurs at location 25 and 41 in the text\n\ntext = \"The",
        "generated_testcode": "assert find_literals(text=\"The quick brown fox jumps over the lazy dog\", pattern=\"fox\") == (True, 10)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        bell = [0] * (n + 1) \n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1): \n            bell[i] = bell[i - 1] + bell_Number(i - 1) * (n - i + 1) \n        return bell[n]\n\ndef nth_bell_number(n):\n    return bell_Number(n)\n\n#Example usage:\nprint(nth_bell_number(5)) # Output: 5\nprint(nth_bell_number(10)) # Output: 1419324",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if A>B:\n        return B\n    else:\n        return A\n\n#Testing the function\nprint(floor_Min(3,10,5)) #output: 3\nprint(floor_Min(5,3,5)) #output: 3\nprint(floor_Min(10,3,5)) #output: 3\nprint(floor_Min(10,10,5)) #output: 10\nprint(floor_Min(10,20,5)) #output: 10\nprint(floor_Min(10,50,5)) #output: 10\nprint(floor_Min(10,1,5)) #output: 1\nprint(floor_Min(10,15,5)) #output: 10\n\n\n# ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.pop(L)\n    return list1\n\n#Test the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nk = 3\nprint(remove_kth_element(list1,k)) ",
        "generated_testcode": "assert remove_kth_element([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], 2) == [\"apple\", \"cherry\", \"orange\", \"grape\"]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nth_col = []\n    for i in range(len(test_list)):\n        nth_col.append(test_list[i][N-1])\n    return max(nth_col)\n\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nN = 3\nprint(max_of_nth(test_list, N)) # Output: 12\n\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)]\nN = 2\nprint(max_of_nth(test_list, N)) # Output: 80\n\ntest_list = [(100, 200, 300), (400, 500, 600), (700, 800, 900), (1000, 1100, 120)]\nN = 1\nprint(max_of_nth(test_list, N)) # Output: 100\n\ntest_list = [(1000, 200, 300, 400), (400, 500, 600, 700),",
        "generated_testcode": "assert max_of_nth([(1,2,3,4), (5,6,7), (8,9,10)], 2) == 10\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    first = [lst[0][0] + lst[-1][-1]]  \n    middle = lst[1:-1]  \n    last = lst[-1][0] + lst[0][-1]  \n    return [first] + middle + [last] ",
        "generated_testcode": "assert merge([[1,2,3],[4,5,6],[7,8,9]] ) == [[1,9],[4,3],[7,6,5,8]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = test_list[0]\n    for record in test_list:\n        if record.value > max_value:\n            max_value = record.value\n    return max_value\n\n# Test the function with a sample list\nrecords = [Record(1, 10), Record(2, 20), Record(3, 30), Record(4, 40), Record(5, 50), Record(6, 60)]\nprint(maximum_value(records)) # Output: 60\n\n# Test the function with a sample list\nrecords = [Record(1, 20), Record(2, 30), Record(3, 40), Record(4, 50), Record(5, 60)]\nprint(maximum_value(records)) # Output: 60\n\n# Test the function with a sample list\nrecords = [Record(1, 100), Record(2, 20), Record(3, 30), Record(4, 40), Record(5, 50)]\nprint(maximum_value(records)) # Output: 50\n\n# Test the function with an empty list\nrecords = []\nprint(maximum_value(records)) # Output: None\n\n# Test the function with a list with a negative value\nrecords = [Record(1, -10), Record(2, -20), Record(3, -30), Record(4, -40",
        "generated_testcode": "assert maximum_value([(1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16), (17, 18, 19, 20, 21, 22)] ) == (19, 22)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create an empty list to store the cumulative sum\n    cumulative_sum_list = []\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the list and add each element to the sum\n    for num in test_list:\n        sum += num\n        # Append the sum to the cumulative sum list\n        cumulative_sum_list.append(sum)\n    # Return the cumulative sum list\n    return cumulative_sum_list\n\n\n# Test the function with a sample tuple list\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(cummulative_sum(test_list))  # Output: [1, 3, 6, 10, 15, 21, 28, 36, 45]\n",
        "generated_testcode": "assert cummulative_sum(()) == ()\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to store the total sum\n    total = 0\n    # Initialize a variable to store the count of numbers\n    count = 0\n    # Loop through each tuple in the list\n    for tup in nums:\n        # Loop through each number in the tuple\n        for num in tup:\n            # Add the number to the total\n            total += num\n            # Increment the count\n            count += 1\n    # Calculate the average\n    avg = total / count\n    # Return the average\n    return avg\n\n# Test the function\nprint(average_tuple(((1, 2, 3, 4, 5), (6, 7, 8, 9))) # Output: 5.5\nprint(average_tuple((10, 20, 30, 40, 50)) # Output: 30\nprint(average_tuple((100, 200, 300, 400, 500, 600, 700) # Output: 350.0",
        "generated_testcode": "assert average_tuple(()) == None\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Tuples must have the same length\"\n    else:\n        result = tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))\n    return result\n\n# Test the function\nprint(tuple_modulo((4, 5, 6, 7, 8, 9), (2, 3, 4, 5, 6))) # Output: (0, 2, 3, 1, 4)\nprint(tuple_modulo((10, 20, 30, 40, 50), (3, 5, 7, 9)) # Output: (1, 0, 2, 5)\nprint(tuple_modulo((10, 20, 30, 40), (3, 5, 7, 9, 11)) # Output: Tuples must have the same length\n\n# Function to test if all elements in a tuple are positive\ndef all_positive(test_tup):\n    return all(x > 0 for x in test_tup)\n\n# Test the function\nprint(all_positive((1,2,3,4,5)) # Output: True\nprint(all_positive((-1,2,-3,4)) # Output: False\n\n# Function to get the maximum element in a tuple\ndef max_",
        "generated_testcode": "assert tuple_modulo((10, 3, 5, 7, 9) , (2, 4, 6, 8) ) == (1, 1, 1, 1)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a == 0 and b == 0: \n        return 0\n    if a < 0 or b < 0: \n        return -1\n    if a > d or b > d: \n        return -1\n    \n    jumps = 0\n    while a > 0 and b > 0: \n        if a > b: \n            a -= b\n            jumps += 1\n        else: \n            b -= a\n            jumps += 1\n    \n    if a == 0 or b == 0: \n        return jumps\n    else: \n        return -1\n\n# Test the function \nprint(min_Jumps(5, 5, 10)) # should return 2\nprint(min_Jumps(2, 3, 7)) # should return 2\nprint(min_Jumps(7, 7, 7)) # should return 1\nprint(min_Jumps(1, 1, 1)) # should return 0\nprint(min_Jumps(7, 6, 2)) # should return -1\nprint(min_Jumps(0, 0, 5)) # should return 0\nprint(min_Jumps(-2, 3, 7)) # should return -1\nprint(min_Jumps(10, -2, 7)) # should return -1\nprint(min_Jumps(0, 10, 20)) # should return -1",
        "generated_testcode": "assert min_Jumps(1, 1, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x[0]/x[1], zip(nums1, nums2)))\n\n\n# Test the function\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8]\nprint(div_list(nums1,nums2))\n\n# Output: [0.5, 0.666666666666666666666666, 0.75]",
        "generated_testcode": "assert div_list([1,2,3,4,5], [2,3,4,5]) == [0.5, 0.666666666666666666666666, 1.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums = []\n    alphabets = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            alphabets.append(char)\n    return ''.join(nums) + ''.join(alphabets)\n\n# Test the function\nprint(move_num(\"a1b2c3d4e5f6g7h8i9j10k\"))  # Output: \"1234567890abcdhijk\"\nprint(move_num(\"Hello, World!\"))      # Output: \"Hello, World!\"\nprint(move_num(\"123abc456\"))       # Output: \"abc123456\"\n\n\n# A more concise implementation using list comprehension\ndef move_num_2(test_str):\n    return ''.join(sorted([char for char in test_str if char.isdigit()], key=test_str.index) + sorted([char for char in test_str if not char.isdigit()], key=test_str.index)\n\n# Test the function\nprint(move_num_2(\"a1b2c3d4e5f6g7h8i9j10k\"))  # Output: \"1234567890abcdhijk\"\nprint(move_num_2(\"Hello, World!\"))      # Output: \"Hello, World!\"\nprint(move_num_2(\"",
        "generated_testcode": "assert move_num(12345) == \"12345\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(a, n, k, seen, count, memo):\n        if (k, count) in memo:\n            return memo[(k, count)]\n        if not a:\n            memo[(k, count)] = 0\n            return 0\n        if k == 0:\n            if count == 0:\n                memo[(k, count)] = 1\n                return 1\n            else:\n                memo[(k, count)] = 0\n                return 0\n        if count == 0:\n            memo[(k, count)] = helper(a, k, 1, 0, memo)\n            return memo[(k, count)]\n        if k % 2 == 0:\n            memo[(k, count)] = helper(a, k, count, 0, memo)\n            if not seen:\n                memo[(k, count)] += helper(a, k // 2, count, 1, memo)\n        else:\n            if (k - 1) in a:\n                memo[(k, count)] = helper(a, k - 1, count, 0, memo)\n            if (k + 1) in a:\n                memo[(k, count)] = max(memo[(k, count)], helper(a, k + 1, count, 1, memo))\n        return memo[(k, count)]\n\n\n    seen = set()\n    memo = {}\n    return helper(a,",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 12, 15, 21, 24, 30, 45, 60] , 15) == [15, 30]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def is_numeric(string):\n        return any(char.isdigit() for char in string)\n\n    def increment_numeric(string):\n        return str(int(string) + K)\n\n    result = []\n    for word in test_list:\n        if is_numeric(word):\n            result.append(increment_numeric(word))\n        else:\n            result.append(word)\n    return result\n\n# test cases\ntest_list = [\"apple\", \"123\", \"banana\", \"orange\", \"456\", \"grape\", \"789\", \"kiwi\", \"apple123\", \"orange456\", \"kiwi789\"]\nK = 10\nprint(increment_numerics(test_list, K)) # Output: ['apple', '1333', 'banana', 'orange', '576', 'grape', '8999', 'apple1333', 'orange576', 'kiwi8999']\n\ntest_list = [\"apple\", \"123\", \"banana\", \"orange\", \"456\", \"grape\", \"789\", \"kiwi\", \"apple123\", \"orange456\", \"kiwi789\"]\nK = 5\nprint(increment_numerics(test_list, K)) # Output: ['apple', '17', 'banana', 'orange', '501', 'grape', '904', '",
        "generated_testcode": "assert increment_numerics([\"a1b2c3\", \"d4e5f6\", \"g7h8i9\"], 2) == [\"a3b4c5\", \"d6e7f8\", \"g9h10i11\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create an empty array to store the merged array\n    merged_arr = []\n\n    # Iterate through both arrays and add the smaller element to merged_arr\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    # Add remaining elements from arr1\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    \n    # Add remaining elements from arr2\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    \n    # If the size of merged_arr is odd, return the middle element\n    if n % 2 != 0:\n        return merged_arr[n // 2]\n    # If the size of merged_arr is even, return the average of the middle two elements\n    else:\n        return (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2\n\n\n# Test the function with the sample inputs\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [2, 4, 5, 6, 7]",
        "generated_testcode": "assert get_median([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7] ) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums))\n\n#Example:\nnums = [1,2,3,4,5,6]\nn=2\nprint(nth_nums(nums,n))\n\n#Output: [1, 4, 9, 16, 25] ",
        "generated_testcode": "assert nth_nums(range(1,5),2) == [1, 4, 9, 27, 81]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a string as input and returns True if the string is in upper case, else False.\n    \"\"\"\n    for i in string:\n        if i.isupper() == False:\n            return False\n    return True\n\n\ndef convert_to_upper(string):\n    \"\"\"\n    This function takes a string as input and returns the upper case of the given string.\n    \"\"\"\n    return string.upper()\n\n\n# Test cases\nprint(is_upper(\"HELLO\")) # True\nprint(is_upper(\"hello\")) # False\nprint(is_upper(\"Python is fun\")) # False\nprint(convert_to_upper(\"Hello world\")) # HELLO WORLD\nprint(convert_to_upper(\"python is fun\")) # PYTHON IS FUN\n",
        "generated_testcode": "assert is_upper(None) == False\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n\n# Testing the function\nprint(swap_List([1, 2, 3, 4, 5, 6, 7]))\nprint(swap_List([8, 9, 10, 11, 12, 13]))\nprint(swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"])) ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]), [\"orange\", \"banana\", \"apple\", \"grape\", \"kiwi\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (0.25*r*r*np.sqrt(3))  \n\n\ndef find_largest_triangle(r) :  \n    area = triangle_area(r)  \n    max_area = 0  \n    max_triangle = (0,0)  \n    for theta in range(1,180) :  \n        a = r*np.sin(np.deg2rad(theta))  \n        b = r*np.cos(np.deg2rad(theta))  \n        c = r*np.sqrt(1-np.power(np.sin(np.deg2rad(theta),2) - np.power(np.cos(np.deg2rad(theta),2))  \n        if (a+b>c and b+c>a and a+c>b) :  \n            triangle_area_new = 0.5*a*b*c  \n            if triangle_area_new > max_area :  \n                max_area = triangle_area_new  \n                max_triangle = (a,b,c)  \n    return max_triangle  \n\ndef main() :  \n    r = float(input(\"Enter the radius of the semicircle : \"))  \n    max_triangle = find_largest_triangle(r)  \n    print(\"Largest triangle possible in the semicircle is \", max_triangle, \" with sides : \", max_triangle[0], max_triangle[1], max_triangle[2])  \n",
        "generated_testcode": "assert triangle_area(3) == 1.89272193079968817585\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if start > end:\n        return start\n    if array[start] != start+1:\n        return start\n    elif array[start] == end+1:\n        return end+1\n    else:\n        mid = (start+end)//2\n        if array[mid] == mid+1:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] == start:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return mid+1\n        \n# Test the function\narray = [1,2,3,4,5,6,7,8,9,10,11,12,14]\nstart = 0\nend = len(array)-1\nprint(find_First_Missing(array,start,end))\n        \n        ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,9] , 0, 9) == 8\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in string:\n        if i == \" \":\n            result += \"%20\"\n        else:\n            result += i\n    return result\n\n\n# Test the function\nprint(replace_spaces(\"hello world\"))  # Should return \"hello%20world\"\nprint(replace_spaces(\"hello world this is a test\"))  # Should return \"hello%20world%20this%20is%20a%20test\"\nprint(replace_spaces(\"I love Python\"))  # Should return \"I%20love%20Python\"\nprint(replace_spaces(\"Python is awesome\"))  # Should return \"Python%20is%20awesome\"\n\n\n#Write a function to reverse the given string using recursion\ndef reverse_string(string):\n    if len(string) == 0:\n        return string\n    else:\n        return reverse_string(string[1:]) + string[0]\n\n# Test the function\nprint(reverse_string(\"hello world\"))  # Should return \"dlrow olleh\"\nprint(reverse_string(\"python is awesome\"))  # Should return \"emosewa si nohtyp\"\nprint(reverse_string(\"programming is fun\"))  # Should return \"nuf ni gnimmargorP\"\n\n# Write a function to find the length of the string using recursion\ndef find_length(string):\n    if len(string) == 0:\n        return 0\n    else:\n        return 1 + find_length(",
        "generated_testcode": "assert replace_spaces(None) == None\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n\n\n# Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] ) == [2,4,6,8,10,12,14]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not sub:\n        sub = [ (0,0) ]\n    else:\n        sub = [(ele[0]-1, ele[1]), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0], ele[1]+1)]\n    return [ (x for x in sub if x[0]>=0 and x[1]>=0) and x[0]<=9 and x[1]<=9)\n\n\ndef extract_adjacent_coordinates(coordinates):\n    return adjac(coordinates)\n\n\n#Testing\nprint(extract_adjacent_coordinates((3,4)) #[(2,3), (3,3), (4,4), (3,5)]\nprint(extract_adjacent_coordinates((0,0)) #[(1,0), (0,1)]",
        "generated_testcode": "assert adjac((1,2) == [(0,1), (0,2), (1,1), (1,3), (2,1), (2,2), (2,3)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r\"\\s\"\n    return re.sub(pattern, \"_\", text)\n\n# Test the function\nprint(replace_spaces(\"Hello world\")) ",
        "generated_testcode": "assert replace_spaces(None) == None\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    zero_count = num_list.count(0)\n    if zero_count == len(num_list):\n        return []\n    non_zero_list = [num for num in num_list if num != 0]\n    if zero_count == 0:\n        return non_zero_list\n    zero_list = [0] * zero_count\n    return non_zero_list + zero_list\n\n# Test the function\nnum_list = [0, 1, 0, 2, 3, 0, 4, 0, 0, 5, 0, 6, 7, 0, 0, 9, 0, 10]\nprint(move_zero(num_list))\n\n# Output: [1, 2, 3, 4, 5, 6, 7, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0]\n\nnum_list = [9, 0, 0, 0, 9, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0]\nprint(move_zero(num_list))\n# Output: [9, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nnum_list = [",
        "generated_testcode": "assert move_zero([0, 1, 0, 2, 3, 0, 4, 0, 5, 0, 6, 0] ) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ arr[i] ^ arr[j]\n    return result ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5,6,7,8], 5) == 19\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i < n:\n        sum += pow(i, 4)\n        i += 2\n    return sum\n\n# Test the function with n = 5\nprint(even_Power_Sum(5))\n# Output: 1000\n\n# Test the function with n = 10\nprint(even_Power_Sum(10))\n# Output: 3025\n# Test the function with n = 15\nprint(even_Power_Sum(15))\n# Output: 190250\n# Test the function with n = 20\nprint(even_Power_Sum(20))\n# Output: 5224100\n\n# Test the function with n = 25\nprint(even_Power_Sum(25))\n# Output: 147825600\n",
        "generated_testcode": "assert even_Power_Sum(5) == 22025\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    sorted_values = []\n    while heap:\n        sorted_values.append(heapq.heappop(heap))\n    return sorted_values\n\n# Test the function with a list of random values\niterable = [5, 3, 8, 1, 7, 2, 9, 4, 6, 0, 2, 5, 3, 0]\nprint(heap_sort(iterable))  # Output: [0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\n\n\n# Test the function with a list of strings\niterable = ['apple', 'banana', 'cherry', 'date', 'eggplant', 'fig', 'grape', 'kiwi', 'orange', 'strawberry']\nprint(heap_sort(iterable)) # Output: ['banana', 'date', 'eggplant', 'fig', 'grape', 'kiwi', 'orange', 'apple', 'strawberry']\n\n# Test the function with a list of tuples\niterable = [(4, 'd'), (1, 'a'), (3, 'c'), (2, 'b'), (1, 'a'), (5, 'e'), (4, 'd'), (0, 'c'), (2, '",
        "generated_testcode": "assert heap_sort(range(10, 0, -1)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a!=0:\n        discriminant=(b**2)-(4*a*c)\n        if discriminant>0:\n            root1=(-b+discriminant**0.5)/(2*a)\n            root2=(-b-discriminant**0.5)/(2*a)\n            if root1*root2==1 or root1==1/root2:\n                return True\n        else:\n            return False\n    else:\n        return False\n\nprint(Check_Solution(1, -4, -4))\nprint(Check_Solution(1, -3, -4))\nprint(Check_Solution(1, -2, -5))\nprint(Check_Solution(1, -1, -6))\nprint(Check_Solution(1, 0, -7))\nprint(Check_Solution(1, 1, -8))\nprint(Check_Solution(1, 2, -9))\nprint(Check_Solution(1, 3, -10))\nprint(Check_Solution(1, 4, -11))\nprint(Check_Solution(1, 5, -12))\nprint(Check_Solution(1, 6, -13))\n\n\n#Output:\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n#False\n\n\n#Explanation:\n#In the",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if actual_cost>sale_amount:\n        return False\n    else:\n        return True\n\n#Test cases\nprint(noprofit_noloss(100, 80)) #True\nprint(noprofit_noloss(100, 110)) #False\nprint(noprofit_noloss(100, 80)) #False\nprint(noprofit_noloss(80, 100)) #False\nprint(noprofit_noloss(10, 100)) #True",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the wind chill index given the wind speed (v) and air temperature (t).\n    Wind chill index formula is: 13.12 + 0.6215T - 113.92v^0.16 + 0.427T^0.16\n    Inputs:\n    v (float) - wind speed in miles per hour\n    t (float) - air temperature in Fahrenheit\n    Output:\n    wind_chill (float) - wind chill index in degrees Fahrenheit\n    \"\"\"\n    wind_chill = 13.12 + 0.6215 * t - 13.92 * v ** 0.16 + 0.427 * t ** 0.16\n    return wind_chill\n\n\ndef main():\n    # Testing the function with some values\n    v = 10\n    t = 60\n    print(\"Wind Chill Index:\", wind_chill(v,t)) # Expected output: 6.05\n    \n    v = 25\n    t = 40\n    print(\"Wind Chill Index:\", wind_chill(v,t)) # Expected output: 29.12\n    \n    v = 10\n    t = 32\n    print(\"Wind Chill Index:\", wind_chill(v,t)) # Expected output: 22.94\n    \n   ",
        "generated_testcode": "assert wind_chill(10, 20) == 18.6\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n\n# Test the function with a list of sample names\nsample_names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eva\", \"Fred\", \"Grace\"]\nprint(sample_nam(sample_names)) # should output 16\n\nsample_names = [\"alice\", \"bob\", \"charlie\", \"dave\", \"eva\", \"fred\", \"grace\"]\nprint(sample_nam(sample_names)) # should output 0\n\nsample_names = [\"Bob\", \"Eva\", \"Alice\", \"Grace\", \"Charlie\", \"Fred\"]\nprint(sample_nam(sample_names)) # should output 16\n\nsample_names = [\"alice\", \"Dave\", \"grace\", \"Fred\", \"bob\", \"charlie\"]\nprint(sample_nam(sample_names)) # should output 0\n\nsample_names = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nprint(sample_nam(sample_names)) # should output 0\n",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Ivan\", \"Judy\", \"Karen\"] == 16\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    res = \"\"\n    stack = []\n    for item in items:\n        if item == \"(\":\n            stack.append(item)\n        elif item == \")\":\n            stack.pop()\n        elif item != \"(\" and not stack:\n            res += item\n    return res\n\n\ndef remove_parenthesis(items):\n    res = \"\"\n    stack = []\n    for item in items:\n        if item == \"(\":\n            stack.append(item)\n        elif item == \")\":\n            stack.pop()\n        elif item != \"(\" and not stack:\n            res += item\n    return res\n\n# Test cases\nprint(remove_parenthesis(\"abc(def)ghi(jkl)mno\")) # \"abcghmno\"\nprint(remove_parenthesis(\"a(bc)def(ghij)k(lmno)pqr\")) # \"abcfghijklmnpqr\"\nprint(remove_parenthesis(\"a(bc(de)fg)hi(jk(lm)nop)q\")) # \"adefghijkqlm\"\nprint(remove_parenthesis(\"abc\")) # \"abc\"\nprint(remove_parenthesis(\"(a)bc(d)e(f)g\")) # \"abc\"\n",
        "generated_testcode": "assert remove_parenthesis([\"(hello) world\") == \"hello world",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (n*(3*n-1)**2)//2 + 1\n\ndef nonagonal_number(n): \n    return is_nonagonal(n)\n\nprint(nonagonal_number(1)) # Output: 1\nprint(nonagonal_number(2)) # Output: 4\nprint(nonagonal_number(3)) # Output: 10\nprint(nonagonal_number(10)) # Output: 123\nprint(nonagonal_number(15)) # Output: 315\nprint(nonagonal_number(20)) # Output: 509\n\n\n# Function to find the nth nonagonal number using the formula: (n*(3*n-1)**2)//2 + 1 \n",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for row in test_list:\n        if row not in new_list:\n            new_list.append(row)\n    return tuple(new_list)\n\n\n# Test the function\ntest_list = [(1, 2, 3), (1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (1, 2, 3), (4, 5, 6)]\nprint(remove_similar_row(test_list))\n# Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n\ntest_list = ((1, 2, 3), (1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (1, 2, 3), (4, 5, 6))\nprint(remove_similar_row(test_list))\n# Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "assert remove_similar_row(((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6)) ) == ((1,2,3),(7,8,9))\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    word = text.split()\n    for i in range(1, len(word)-1):\n        if word[i] == 'z':\n            return True\n    return False\n\n# Test cases\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\")) # True\nprint(text_match_wordz_middle(\"zebra\")) # False\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy zebra\")) # True\nprint(text_match_wordz_middle(\"The zebra jumps over the lazy dog\")) # False\nprint(text_match_wordz_middle(\"The lazy dog jumps over the quick brown zebra\")) # True\nprint(text_match_wordz_middle(\"zebra quick brown fox jumps over lazy dog\")) # False\nprint(text_match_wordz_middle(\"The quick brown zebra jumps over the lazy dog\")) # False\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy zebra\")) # False\nprint(text_match_wordz_middle(\"The lazy dog jumps over the quick zebra brown\")) # True\nprint(text_match_wordz_middle(\"The quick brown zebra jumps over the lazy dog\")) # False\nprint(text_match_wordz_middle(\"The zebra jumps over the quick brown zebra\")) # False\nprint(text_match_wordz_middle(\"The zebra",
        "generated_testcode": "assert text_match_wordz_middle([\"hello\", \"world\", \"python\", \"programming\", \"zebra\", \"apple\", \"banana\", \"orange\", \"grape\"] == [\"world\", \"programming\", \"zebra\"]\n\n# Test case 1: The function should return a list of words containing 'z' in the middle of the word. ",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if k >= len(input):\n        k = len(input) - 1\n    for i in range(0, (k // 2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input\n\n#Example:\n#Input: [1,2,3,4,5,6,7,8,9]\n#k = 4\n#Output: [5,4,3,2,1,8,9,6]\n\n#Input: [1,2,3,4,5,6,7,8,9,10]\n#k = 5\n#Output: [5,4,3,2,1,9,8,7,6,10]\n\n#Input: [1,2,3,4,5,6,7,8,9,10,11]\n#k = 6\n#Output: [6,5,4,3,2,1,10,9,8,7,11]\n\n#Input: [1,2,3,4,5,6,7,8,9]\n#k = 0\n#Output: [1,2,3,4,5,6,7,8,9]\n\n#Input: [1,2,3,4,5,6,7,8]\n#k = 4\n#Output: [5,4,3,2,1,8,7]\n\n#Input: [",
        "generated_testcode": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 3) == [3,2,1,6,5,4,9,8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    product = 1\n    for i in val : \n        product *= i\n    return product\n\ndef find_kth_product(lst, k):\n    if k < 1 or k > len(lst) :\n        return \"Invalid input\"\n    else : \n        product = get_product(lst)\n        for i in range(k-1) : \n            product /= lst[i]\n        return product\n\n# Test cases\nprint(find_kth_product([2, 3, 4], 2)) # Output : 12\nprint(find_kth_product([1, 2, 3, 4, 5], 4)) # Output : 60\nprint(find_kth_product([1], 1)) # Output : 1\nprint(find_kth_product([1, 2], 2)) # Output : 2\nprint(find_kth_product([1, 2, 3], 3)) # Output : Invalid input\nprint(find_kth_product([1, 2, 3], 0)) # Output : Invalid input\nprint(find_kth_product([], 2) # Output : Invalid input\n\n# Time Complexity : O(n)\n# Space Complexity : O(1)\n",
        "generated_testcode": "assert get_product(()) == None\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,N+1):\n        if i**3 <= K:\n            count+=1\n    return count\n\n# Test the function\nprint(No_of_cubes(5,100))  # Output: 2\nprint(No_of_cubes(10,27)) # Output: 5",
        "generated_testcode": "assert No_of_cubes(3,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    current = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            result.append(current)\n            current = text[i]\n        else:\n            current += text[i]\n    result.append(current)\n    return result\n\n# Test the function with some examples\nprint(split_upperstring(\"HelloWorld\"))\nprint(split_upperstring(\"AaBbCc\"))\nprint(split_upperstring(\"HeLLoWoRLD\"))\nprint(split_upperstring(\"TheQuickBrownFox\"))\n\n# Output: ['Hello', 'World', 'AB', 'c', 'HeLLo', 'WoRLD', 'TheQuick', 'Fox'] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\" ) == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(n-1, len(lst), 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\n#Test the function\nlst = list(map(int, input(\"Enter the list elements: \").split()))\nprint(\"Original list:\", lst)\nprint(\"Exchanged list:\", exchange_elements(lst))\n\n#Example\n#Input: [1,2,3,4,5,6,7,8,9,10]\n#Output: [1, 3, 2, 4, 6, 5, 8, 7, 9, 10]\n\n#Input: [1,2,3,4,5,6,7,8,9,10,11,12,13]\n#Output: [1, 3, 2, 4, 6, 5, 8, 7, 10, 9, 11, 12, 13] ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"] == [\"a\", \"f\", \"c\", \"d\", \"e\", \"b\", \"g\", \"h\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(nums[m:n+1])                                                                                                                                                                                              \n\n#Example:\nnums = [1,2,3,4,5,6,7,8,9]                                                                                                                                                                                            \nprint(sum_Range_list(nums, 1, 4)) # Output: 12 (5+6+7+8)                                                                                                                                                     \nprint(sum_Range_list(nums, 2, 4)) # Output: 15 (6+7+8)                                                                                                                                                       \nprint(sum_Range_list(nums, 3, 5)) # Output: 16 (7+8+9)                                                                                                                                                       \nprint(sum_Range_list(nums, 2, 7)) # Output: 27 (6+7+8+9+1+2+3+4)\n\n\n#Note:\n# - The range is inclusive of both the start and end indices.\n# - If the end index is greater than the length of the list, it wraps around to the beginning of the list. \n# - If the start index is greater than the end index, the function should return 0. ",
        "generated_testcode": "assert sum_Range_list(range(1, 10), 2, 5) == 15\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            return False\n    return True\n\n#Test the function\narr1=[1,2,3,4,5,6,7]\narr2=[1,2,3,4,5,6,7]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1=[1,2,3,4,5,6,7,8]\narr2=[1,2,3,4,5,6,7]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\n#Output:True\n#False ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5], [1,2,3,4,5], 4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup1:\n        if i not in test_tup2:\n            return False\n    return True\n\n\n# Example usage:\nprint(check_subset((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)) # True\nprint(check_subset((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 8)) # False\nprint(check_subset((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5)) # False\nprint(check_subset((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) # True\n\n\n# Alternative implementation using sets:\ndef check_subset(test_tup1, test_tup2):\n    return set(test_tup1).issubset(set(test_tup2))\n\n# Example usage:\nprint(check_subset((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)) # True\nprint(check_subset((1, 2, 3, 4, 5, 6, 7), (1, 2, 3,",
        "generated_testcode": "assert check_subset((), ()) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            result.append(test_list[i][j])\n    return result\n\n# Test the function with the given test cases\nprint(matrix_to_list([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(matrix_to_list([(1, 2), (3, 4), (5, 6, 7), (8, 9)]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(matrix_to_list([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# This function takes a tuple matrix as input and returns a list of tuples where each tuple represents a column in the matrix\n# If the matrix is not rectangular, it will only include the elements that are present in all the rows. If there are missing elements, they are ignored.\n\n# We start by iterating through each row and appending each",
        "generated_testcode": "assert matrix_to_list(()) == []\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for k,v in l:\n        d[k].append(v)\n    return dict(d)\n\n# Test the function\npairs = [(1, 'a'), (2, 'b'), (1, 'c'), (3, 'd'), (2, 'e'), (1, 'f')]\nprint(grouping_dictionary(pairs))\n# Output: {1: ['a', 'c', 'f'], 2: ['b', 'e'], 3: ['d']}",
        "generated_testcode": "assert grouping_dictionary([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6), ('c', 7)] ) == {'a': [1, 3, 6], 'b': [2, 4], 'c': [5, 7]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*(l+b)\n\n# Test the function\nprint(rectangle_perimeter(4,6)) # Output: 12\nprint(rectangle_perimeter(3,2)) # Output: 8\nprint(rectangle_perimeter(5,10)) # Output: 18\n\n\n# Write a function to find the area of a rectangle\ndef rectangle_area(l,b):\n    return l*b\n\n# Test the function\nprint(rectangle_area(4,6)) # Output: 24\nprint(rectangle_area(3,2)) # Output: 6\nprint(rectangle_area(5,10)) # Output: 50\n\n\n# Write a function to find the diagonal of a rectangle\ndef rectangle_diagonal(l,b):\n    return (l**2 + b**2)**0.5\n\n# Test the function\nprint(rectangle_diagonal(4,6)) # Output: 7.0710678111865475583\nprint(rectangle_diagonal(3,2)) # Output: 3.1622277766601683795\nprint(rectangle_diagonal(5,10)) # Output: 9.848077378047\n\n\n# Write a function to find the square root of a number\ndef square_root(num):\n    return num**0",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i**5\n    return sum ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 2295\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": " \n    a.sort() \n    b.sort() \n  \n    min_sum = 0\n  \n    for i in range(n): \n        min_sum += abs(a[i]-b[i]) \n  \n  \n    return min_sum ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5], [2,3,4,5,6], 4) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num = n\n    fact = 1\n    while (num > 0) : \n        i = 1\n        while (num >= 1) : \n            fact = fact * i \n            num = num - 1\n            i = i + 1\n        num = n \n    return fact % 10\n\n#Test the function with an example\nprint(first_Digit(5)) ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    max_count = 0\n    item_with_max_occurrences = None\n    \n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n            \n        if count_dict[item] > max_count:\n            max_count = count_dict[item]\n            item_with_max_occurrences = item\n            \n    return item_with_max_occurrences\n\n\n# Example usage:\nlist1 = [1, 2, 3, 2, 4, 2, 5, 6, 3, 2, 2, 3, 1]\nprint(max_occurrences(list1)) # Output: 2\n\nlist2 = [1, 1, 1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 7]\nprint(max_occurrences(list2)) # Output: 7\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_occurrences(list3)) # Output: None\n",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"orange\"] == \"orange\")\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    duplicants = []\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] == x[j]:\n                duplicants.append(x[i])\n    return list(set(duplicants)\n\n\n# Test case\nx = [1, 2, 3, 4, 2, 5, 6, 7, 5, 3, 8, 9, 1, 5]\nprint(Repeat(x)) # Output: [1, 2, 5]",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == [1,2,3,4,5,6,7,8,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    points = [] \n    for i in range(l1,r1+1): \n        for j in range(l2,r2+1): \n            if i!=j and i!=j+1: \n                points.append([i,j]) \n    return points \n  \n# Example usage: \nl1,r1 = 1,5 \nl2,r2 = 3,7 \nprint(find_Points(l1,r1,l2,r2)) ",
        "generated_testcode": "assert find_Points(1,5,2,4) == [2,3,4]\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n - 2): \n        for j in range(i + 1, n - 1): \n            for k in range(j + 1, n): \n                sum = arr[i] + arr[j] + arr[k]\n                if sum > max_sum: \n                    max_sum = sum \n    return max_sum \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(\"Maximum sum of three consecutive elements is\", max_sum_of_three_consecutive(arr, n))\n\n#Output: 24 (9 + 7 + 8) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a dictionary as an argument and returns the sorted list of keys of the dictionary.\n    \"\"\"\n    sorted_list = []\n    for key in sorted(dict1.keys()):\n        sorted_list.append(key)\n    return sorted_list\n\n# Test the function\nd = {'banana': 3, 'apple': 1, 'orange': 2, 'pear': 4}\nprint(sorted_dict(d))\n# Output: ['apple', 'banana', 'orange']\n\n\n# Test the function with another dictionary\nd2 = {'cherry': 5, 'mango': 2, 'kiwi': 4, 'peach': 3}\nprint(sorted_dict(d2))\n# Output: ['cherry', 'kiwi', 'mango']\n\n\n# Test the function with an empty dictionary\nd3 = {}\nprint(sorted_dict(d3))\n# Output: []",
        "generated_testcode": "assert sorted_dict({'apple': 3, 'banana': 2, 'orange': 1, 'grape': 4, 'kiwi': 5, 'pear': 6} ) == {'apple': 3, 'banana': 2, 'grape': 4, 'kiwi': 5, 'orange': 1, 'pear': 6}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x > y:\n        return 1\n    \n    quotient = n // x\n    remainder = n % x\n    \n    if remainder == y:\n        return quotient\n    else:\n        return quotient + 1\n\n# Test cases\nprint(find_max_val(12, 5, 3)) # Output: 2\nprint(find_max_val(15, 4, 3)) # Output: 4\nprint(find_max_val(21, 7, 3)) # Output: 3\nprint(find_max_val(100, 2, 5)) # Output: 5\nprint(find_max_val(20, 5, 7)) # Output: 4\nprint(find_max_val(100, 4, 6)) # Output: 2\nprint(find_max_val(100, 7, 8)) # Output: 1",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 4\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n\n# Test the function with the given test cases\nprint(average_Even(20)) # Output: 8.0\nprint(average_Even(50)) # Output: 21.0\nprint(average_Even(1000)) # Output: 50.0\nprint(average_Even(10000)) # Output: 500.0\nprint(average_Even(100000)) # Output: 5000.0\nprint(average_Even(1000000)) # Output: 50000.0\n",
        "generated_testcode": "assert average_Even(10) == 6.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        first_element = num_list[0]\n        num_list.pop(0)\n        num_list.append(first_element)\n        return num_list\n\nprint(move_last([1,2,3,4,5,6,7])) # Output: [2,3,4,5,6,7,1]\nprint(move_last([])) # Output: []\nprint(move_last([1])) # Output: []\nprint(move_last([1,2])) # Output: [2,1]\nprint(move_last([1,2,3])) # Output: [2,1,3]\n",
        "generated_testcode": "assert move_last([1,2,3,4,5,6,7,8] ) == [2,3,4,5,6,7,8,1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n\n#Test the function\nstring = \"Hello World\"\nchar = \"l\"\nprint(count_char(string,char)) # Output: 3 ",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in string: \n        if i in vowels: \n            count += 1\n    return count \n\ndef count_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    return Check_Vow(string, vowels)\n\n# Test the function with an example string\nstring = \"Hello, World!\"\nprint(count_vowels(string)) ",
        "generated_testcode": "assert Check_Vow(string=\"hello world\", vowels=\"aeiou\") == 1\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    new_string = \"\"\n    for i in string:\n        if i != char:\n            new_string += i\n    return new_string\n\n# Test the function\nprint(replace(\"hello world\", \"l\")) # Output: \"heo wrd\"\nprint(replace(\"python\", \"o\")) # Output: \"pythn\"\nprint(replace(\"aaaa\", \"a\")) # Output: \"\"\nprint(replace(\"banana\", \"a\")) # Output: \"bnn\"\nprint(replace(\"racecar\", \"a\")) # Output: \"rcrcr\"\nprint(replace(\"google\", \"o\")) # Output: \"grle\"\nprint(replace(\"aabbc\", \"a\")) # Output: \"bbc\"\nprint(replace(\"xyz\", \"z\")) # Output: \"xy\"\nprint(replace(\"aaa\", \"a\")) # Output: \"\"\nprint(replace(\"zzzzz\", \"z\")) # Output: \"\" ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(\"^([01]?\\d\\d?\\d)?(\\.([01]?\\d\\d?\\d){3})$\")\n    return bool(pattern.match(Ip))\n\n# Test cases\nprint(check_IP(\"192.168.0.1\")) # True\nprint(check_IP(\"192.168.0.256\")) # False\nprint(check_IP(\"192.168.0\")) # False\nprint(check_IP(\"192.168.0.2556.2\")) # False\nprint(check_IP(\"192.168.0.25.0/24\")) # False\nprint(check_IP(\"192.168.0.25.01\")) # False\nprint(check_IP(\"192.168.0.25.1\")) # True\nprint(check_IP(\"256.168.0.25.1\")) # False\nprint(check_IP(\"127.0.0.0.1\") # True\nprint(check_IP(\"172.32.100.1\") # True\nprint(check_IP(\"10.0.0.1\") # True\nprint(check_IP(\"172.32.100.256\") # False\nprint(check_IP(\"255.256.256.2",
        "generated_testcode": "assert check_IP(192.168.0.1) == False\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    prev = nums[0]\n    for num in nums:\n        if num > prev:\n            return False\n        prev = num\n    return True\n\n# Test cases\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7])) # True\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1])) # False\nprint(decreasing_trend([1, 2, 2, 2, 2, 2])) # False\n",
        "generated_testcode": "assert decreasing_trend(range(10, 0, -1)) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # function to set the right most unset bit of n \n    while n & 1 == 0: \n        n >>= 1\n    return n \n\n# Driver code \nnum = 60 \nprint(\"Right most set bit in binary of\", num, \"is\", get_Pos_Of_Right_most_Set_Bit(num)) \n",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0b10101010101010) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if num1 > num2 and num1 > num3: \n        return num1 \n    elif num2 > num1 and num2 > num3: \n        return num2 \n    else: \n        return num3 \n\nprint(max_of_three(10,20,30)) ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in list:\n        result = result * 10 + i\n    return result ",
        "generated_testcode": "assert convert([1,2,3,4,5,6,7,8,9] ) == 123456789\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = string.split()\n    unique_words = set(words)\n    return ' '.join(unique_words)\n\n\n#Testing the function\ninput_string = \"the quick brown fox jumps over the lazy dog the quick brown dog over the lazy dog\"\nprint(remove_duplicate(input_string))\n# Output: 'brown dog jumps over fox lazy quick the' ",
        "generated_testcode": "assert remove_duplicate(string=\"hello world world world\") == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = x + y\n    if sum > n:\n        return n\n    elif sum < m:\n        return m\n    elif sum == 20:\n        return sum\n    else:\n        return sum\n\nprint(sum_nums(5,10,1,20)) # expected output: 20\nprint(sum_nums(2,10,15,25)) # expected output: 15\nprint(sum_nums(10,10,20,30)) # expected output: 30\nprint(sum_nums(-5,5,0,10)) # expected output: 5\nprint(sum_nums(0,5,0,10)) # expected output: 0\nprint(sum_nums(10,5,20,30) # expected output: 25\nprint(sum_nums(20,20,10,30) # expected output: 40\n\n\n#Test cases:\n#sum_nums(5,10,1,20) # expected output: 20\n#sum_nums(2,10,15,25) # expected output: 15\n#sum_nums(10,10,20,30) # expected output: 30\n#sum_nums(-5,5,0,10) # expected output: 5\n#sum_nums(0,5,0,10) # expected output",
        "generated_testcode": "assert sum_nums(10, 20, 30, 40) == 50\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'[^a-zA-Z0-9]', '', text1)\n    return text1\n\n# Test the function with the given string\ntext1 = \"hello@world! This is a sample string!123\"\nprint(remove_extra_char(text1))\n\n# Output: \"helloworldThisisasamplestring123\" ",
        "generated_testcode": "assert remove_extra_char(u\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test cases\nprint(validity_triangle(3,4,5)) # True\nprint(validity_triangle(5,4,3)) # True\nprint(validity_triangle(3,4,2)) # False\nprint(validity_triangle(2,4,4)) # False\nprint(validity_triangle(1,2,3)) # False\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Remove spaces from the given string\n    return str1.replace(\" \", \"\")\n\n# Test the function with an example\nprint(remove_spaces(\"Hello world\")) ",
        "generated_testcode": "assert remove_spaces(None) == None\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return ditionary[key]\n\n#Example:\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(access_key(d,'c')) # Output: 3\nprint(access_key(d,'b')) # Output: 2\nprint(access_key(d,'d')) # Output: 4\nprint(access_key(d,'a')) # Output: 1\n\n# If the key is not present in dictionary, it should return None\nprint(access_key(d,'e')) # Output: None\n",
        "generated_testcode": "assert access_key({'a':1, 'b':2, 'c':3}, 1) == 2\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True\n\n# Test cases\nprint(increasing_trend([1, 2, 3, 4, 5, 6])) # True\nprint(increasing_trend([6, 5, 4, 3, 2, 1])) # False\nprint(increasing_trend([1, 1, 2, 2, 3, 3, 4, 4])) # True\nprint(increasing_trend([1, 1, 1, 2, 2, 3, 3])) # False ",
        "generated_testcode": "assert increasing_trend(range(1, 5)) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n    return i\n\n#test\nprint(smallest_Divisor(12)) # Output: 2\nprint(smallest_Divisor(15)) # Output: 3\nprint(smallest_Divisor(20)) # Output: 5\nprint(smallest_Divisor(27)) # Output: 3\nprint(smallest_Divisor(37)) # Output: 3\nprint(smallest_Divisor(49)) # Output: 7\n\n\n#Write a function to find the number of prime numbers between 1 and n\ndef primeNumbers(n):\n    count = 0\n    for i in range(2,n+1):\n        if smallest_Divisor(i) == i:\n            count += 1\n    return count\n\n#test\nprint(primeNumbers(10)) # Output: 4 (2, 3, 5, 7, 11)\nprint(primeNumbers(20)) # Output: 5 (2, 3, 5, 7, 11, 11, 13)\nprint(primeNumbers(100)) # Output: 8 (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y,nums1,nums2))\n\n#test\nnums1=[1,2,3]\nnums2=[4,5,6]\nprint(mul_list(nums1,nums2)) #[4, 10, 18]",
        "generated_testcode": "assert mul_list([1,2,3,4], [5,6,7]) == [5, 12, 21]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 0 : \n        return False \n    elif n == 0 or n == 1 : \n        return True \n    else : \n        for i in range(int(n**0.5)+1) : \n            if int(n) == i**2 : \n                return True \n            else : \n                j = 1 \n                while i**2 + j**2 <= n : \n                    if i**2 + j**2 == n : \n                        return True \n                    j += 1 \n        return False ",
        "generated_testcode": "assert sum_Square(1) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)): \n        if str[i] == x: \n            count += 1\n    return count \n\n# Test the function \nstr = \"hellohello world\"\nchar = \"l\"\nprint(count_Char(str, char)) # Output: 3 ",
        "generated_testcode": "assert count_Char(\"hellohello\", \"l\") == 2\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    prime = [] \n    for num in range(2, n+1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime.append(num) \n    return sum(prime) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n\n# Test the function\ntest_tup = (1,2,3,4,2,3,3,5,1,1,2,6,4)\nprint(freq_element(test_tup))\n\n\n# Output: {1: 3, 2: 3, 3: 2, 4: 2, 5: 1, 6: 1}",
        "generated_testcode": "assert freq_element(()) == {}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\nprint(recur_gcd(12, 16))\n\n# Output: 4\n\n# Explanation: The gcd of 12 and 16 is 4 because the highest number that divides both 12 and 16 without leaving a remainder is 4. ",
        "generated_testcode": "assert recur_gcd(12, 18) == 6\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return ((a**2) + (b**2))**0.5\n\n\n#Test the function with the given test cases\nprint(len_complex(3+4j)) #Output: 5.0\nprint(len_complex(-1+5j)) #Output: 5.0\nprint(len_complex(0+0j)) #Output: 0.0\nprint(len_complex(2-3j)) #Output: 5.0\nprint(len_complex(4.5+0j) #Output: 4.5\nprint(len_complex(0-5.5j) #Output: 5.5",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0 or arr[0] == 0:\n        return -1\n    if n == 1:\n        return 0\n    if arr[n-1] == 0:\n        return -1\n    jump = arr[n-1]\n    steps = arr[n-1]\n    count = 1\n    i = n-2\n    while i >= 0:\n        if arr[i] == 0:\n            return -1\n        if steps == 0:\n            return -1\n        if steps == 1:\n            break\n        steps -= 1\n        jump -= 1\n        if jump == 0:\n            if i == 0:\n                return count\n            jump = arr[i]\n            count += 1\n        i -= 1\n    return count\n\n# test the function with the given example\narr = [2, 3, 1, 1, 1, 4, 2, 3, 3, 1, 2, 2, 1, 1, 1, 1]\nn = len(arr)\nprint(min_jumps(arr, n)) ",
        "generated_testcode": "assert min_jumps(arr=[2, 3, 1, 1, 1, 4, 2, 3, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(nums)):\n        result *= nums[i]\n    return result\n\n\n# Example usage:\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6]))  # Output: 120 (1*2*3*4*5)\nprint(mul_consecutive_nums([1, 2, 0, 3, 4, 5]))  # Output: 0 (there is no consecutive numbers to multiply)\nprint(mul_consecutive_nums([1]))  # Output: 1 (there is only one number to multiply)\n",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for key, value in test_list:\n        if value not in result:\n            result[value] = [key]\n        else:\n            result[value].append(key)\n    return result\n\n# Test the function\nprint(group_element([(1, 2), (2, 3), (3, 2), (4, 1), (5, 4), (6, 1), (7, 2)])  # Expected output: {2: [1, 3], 3: [2], 1: [4, 6], 4: [5], 2: [7]}\nprint(group_element([(1, 'a'), (2, 'b'), (3, 'a'), (4, 'a'), (5, 'c'), (6, 'a'), (7, 'b')])  # Expected output: {'a': [1, 3, 4, 6], 'b': [2, 7], 'c': [5]} ",
        "generated_testcode": "assert group_element([(1,2), (2,3), (3,2), (4,5), (5,2), (6,7), (7,2), (8,9), (9,2)] ) == {2: [(1,2), (3,2), (5,2), (7,2), (9,2)], 3: [(2,3)], 5: [(4,5)], 7: [(6,7)], 9: [(8,9)]}\n\n# Test case 2\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if N < 0:\n        return \"Invalid Input\"\n    elif N == 0:\n        return 1\n    elif N == 1:\n        return 1\n    else:\n        fact = 1\n        for i in range(2, N+1):\n            fact *= i\n        return int(str(fact)[-2:]\n\n\n# Test cases\nprint(last_Two_Digits(10)) # Output: 24\nprint(last_Two_Digits(5)) # Output: 6\nprint(last_Two_Digits(20)) # Output: 6\nprint(last_Two_Digits(0)) # Output: 1\nprint(last_Two_Digits(-5)) # Output: Invalid Input\n\n\n# Time complexity: O(N)\n# Space complexity: O(1) ",
        "generated_testcode": "assert last_Two_Digits(5) == 24\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return ' '.join(text1.split())\n\nprint(remove_multiple_spaces(\"Hello      there        world!    I am      here\"))\n\n# Expected output: \"Hello there world! I am here\" ",
        "generated_testcode": "assert remove_multiple_spaces(\"hello  world  this  is  a   test\" ) == \"hello world this is a test\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n\n# Test the function\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 4, 'f': 3, 'g': 2}\nprint(extract_unique(test_dict)) # Output: [1, 2, 3, 4]\n\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint(extract_unique(test_dict)) # Output: [1, 2, 3, 4, 5, 6]\n\ntest_dict = {'a': 1, 'b': 2, 'c': 2, 'd': 3, 'e': 3, 'f': 4}\nprint(extract_unique(test_dict)) # Output: [1, 2, 3, 4]\n\ntest_dict = {'a': 1, 'b': 1, 'c': 1, 'd': 2, 'e': 2}\nprint(extract_unique(test_dict)) # Output: [1, 2]\n\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4",
        "generated_testcode": "assert extract_unique({'a': [1, 2, 3, 4, 5], 'b': [2, 3, 4, 5, 6], 'c': [1, 2, 3, 4]} == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n\n#test cases\nprint(check_greater((1, 2, 3, 4, 5), (4, 3, 2, 1)))\nprint(check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4)))\nprint(check_greater((1, 2, 3, 4, 5), (5, 4, 3, 2)))\nprint(check_greater((1, 2, 3, 4, 5), (5, 3, 2, 1)))",
        "generated_testcode": "assert check_greater((), ()) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1[0]):\n        result.append([list1[0][i], list2[0][i]])\n    return result\n\n# Example usage:\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nlist2 = [[10,11,12], [13,14,15], [16,17,18]]\nprint(zip_list(list1, list2)) # Output: [[1, 10], [2, 13], [3, 16], [4, 11], [5, 14], [6, 17], [7, 118]]\n\n# Test Cases\nprint(zip_list([[1,2,3], [4,5,6], [7,8,9]], [[10,11,12], [13,14,15], [16,17,18]])) # Output: [[1, 10], [2, 13], [3, 16], [4, 11], [5, 14], [6, 17], [7, 18]]\nprint(zip_list([[1,2], [3], [4,5]]) # Output: [[1, 4], [2, 5]]\nprint(zip_list([], [1,2,3,4]) # Output: []\nprint(",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6],[7,8,9]], [[10,11,12],[13,14,15]] ) == [[(1,10),(2,11),(3,12),(4,13),(5,14),(6,15),(7,15)]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_count = list(filter(lambda x: x%2==0, array_nums))\n    return len(even_count)\n\n#Example usage:\narray_nums = [1,2,3,4,5,6,7,8,9,10]\nprint(count_even(array_nums)) # Output: 4\n\narray_nums = [1,3,5,7,9,11,13,15]\nprint(count_even(array_nums)) # Output: 0\narray_nums = [2,4,6,8,10,12,14]\nprint(count_even(array_nums)) # Output: 5\n",
        "generated_testcode": "assert count_even(list(range(1, 10)) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1])\n    return dict(sorted_dict)\n\n#Test the function\nd = {(3,4): 'apple', (1,2): 'banana', (1,1): 'orange', (2,3): 'grape', (4,5): 'kiwi'}\nprint(sort_dict_item(d))\n#Expected output: {(1, 1): 'orange', (2, 3): 'grape', (3, 4): 'apple', (4, 5): 'kiwi'} ",
        "generated_testcode": "assert sort_dict_item(\n    {(3, 2): 10, (1, 4): 5, (2, 1): 3, (4, 3): 8, (1, 2): 6, (2, 3): 7, (4, 1): 9, (3, 1): 11, (1, 3): 4, (2, 4): 2}) == {(1, 2): 6, (1, 3): 4, (2, 1): 3, (2, 4): 2, (3, 1): 11, (3, 2): 10, (1, 4): 5, (4, 1): 9, (4, 3): 8}\n\n# Test case 2\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            j = str2.index(str1[i])\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:j] + str1[i] + str2[j+1:]\n            count += 1\n    return count\n\n# Test cases ",
        "generated_testcode": "assert min_Swaps(str1 = \"10110\", str2 = \"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in li:\n        if min <= i <= max:\n            count += 1\n    return count\n\n# Example usage:\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(count_range_in_list(li, 5, 9)) # Output: 4 (count of elements between 5 and 9)\nprint(count_range_in_list(li, 10, 15)) # Output: 5 (count of elements between 10 and 15)\nprint(count_range_in_list(li, 0, 4)) # Output: 5 (count of elements between 0 and 4)\nprint(count_range_in_list(li, 11, 13)) # Output: 3 (count of elements between 11 and 13)\nprint(count_range_in_list(li, 16, 20)) # Output: 0 (count of elements between 16 and 20)\n\n# Example usage with user input\nmin_val = int(input(\"Enter the minimum value: \"))\nmax_val = int(input(\"Enter the maximum value: \"))\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "generated_testcode": "assert count_range_in_list(range(1, 10), 3, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = 0\n    right_sum = sum(arr)\n    for i in range(n):\n        right_sum -= arr[i]\n        if left_sum == right_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n\n\n# Test cases\nprint(equilibrium_index([1, 3, 5, 6, 0, 2, -1, -3, 4])) # 3\nprint(equilibrium_index([2, 1, 3, 4, 5, 2, 1, 3, 6, -1, -3])) # 4\nprint(equilibrium_index([1, 2, 3, 5, 5])) # -1\nprint(equilibrium_index([1, 1, 1, 1, 1, 1, 1, 1])) # 2\nprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) # -1\n",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 6, 4, 2, 2, 1, 4, 3] ) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "           minimum_elements_removed, \n            minimum_diff, \n            current_min_diff, \n            max_element, \n            min_element):\n    if i >= n:\n        if max_element-min_element<=key:\n            return minimum_elements_removed\n        else:\n            return -1\n    \n    if i==0:\n        minimum_elements_removed+=1\n        return find_ind(key, 1, \n                       minimum_elements_removed, \n                       minimum_diff, \n                       current_min_diff, \n                       max_element, \n                       min_element)\n    \n    if max_element-min_element>key:\n        current_min_diff+=1\n        if current_min_diff==0:\n            return find_ind(key, \n                          i+1, \n                          minimum_elements_removed+1, \n                          minimum_diff, \n                          current_min_diff, \n                          max_element, \n                          min_element)\n        else:\n            return find_ind(key, \n                          i+1, \n                          minimum_elements_removed, \n                          minimum_diff, \n                          current_min_diff, \n                          max_element, \n                          min_element)\n    else:\n        minimum_diff = min(minimum_diff, \n                        current_min_diff)\n        min_element =",
        "generated_testcode": "assert find_ind(key, 5, 10, 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Example usage\nd = {'a':1, 'b':2, 'c':3}\nprint(is_key_present(d, 'a')) # Output: True\nprint(is_key_present(d, 'd')) # Output: False\n\n\n#Alternate way to solve the problem\ndef is_key_present(d,x):\n    return x in d",
        "generated_testcode": "assert is_key_present({'a':1, 'b':2, 'c':3}, 'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(1.0/i for i in range(1, n+1))\n\n\n# Test the function\nprint(harmonic_sum(5)) # Output: 2.283333333333333333333335\nprint(harmonic_sum(10)) # Output: 4.95554681415698221161\nprint(harmonic_sum(100)) # Output: 49.5283332580309343674\nprint(harmonic_sum(1000)) # Output: 495.503069679345252624\n\n\n# Write a function to calculate the geometric sum of n-1\ndef geometric_sum(n):\n    return (n-1)*(1-(1/n)**(n))/(1-1/n)\n\n# Test the function\nprint(geometric_sum(5)) # Output: 5.0\nprint(geometric_sum(10)) # Output: 10.0\nprint(geometric_sum(100)) # Output: 100.0",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(list1, key=lambda x: (len(x), x))\n\n\n# Example usage:\nlist1 = [['cat', 'dog', 'fish', ['apple', 'banana', 'orange'], ['grape', 'peach', 'pear', 'peach'], ['cherry', 'kiwi'], ['kiwi', 'banana', 'apple']]\nprint(sort_sublists(list1))\n# Output: [['kiwi', 'banana', 'apple'], ['cherry', 'kiwi'], ['cat', 'dog'], ['apple', 'banana', 'orange'], ['peach', 'pear'], ['grape', 'peach']]",
        "generated_testcode": "assert sort_sublists([[1,2,3], [4,5], [6], [7,8,9,10], [1,2,3,4,5], [10,20,30,40,50]] ] == [[1,2,3], [1,2,3,4,5], [4,5], [6], [7,8,9,10], [10,20,30,40,50]",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store the frequency of each element of arr2\n    freq = {}\n    for i in range(n):\n        if arr2[i] in freq:\n            freq[arr2[i]] += 1\n        else:\n            freq[arr2[i]] = 1\n    # iterate through the elements of arr1 and decrease the frequency of each element in the dictionary\n    for j in range(m):\n        if arr1[j] in freq:\n            freq[arr1[j]] -= 1\n            if freq[arr1[j]] < 0:\n                return False\n    return True\n",
        "generated_testcode": "assert is_subset([1,2,3,4], [1,2,3,4,5,6,7], 5) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0  \n    while n:  \n        count += n & 1  \n        n >>= 1  \n    return count  \n\nn = 10  \nprint(\"Total set bits in 1 to\", n, \"is\", count_Set_Bits(n))  ",
        "generated_testcode": "assert count_Set_Bits(10) == 4\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # take the input string \n    str1 = string \n    # initialize an empty list \n    list1 = [] \n    # traverse through each character of string and add it to the list \n    for i in str1: \n        list1.append(i) \n    return list1 \n\n# test the function with an example \nstring = \"GeeksforGeeks\"\nprint(Convert(string)) ",
        "generated_testcode": "assert Convert(None) == []\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for i in test_list:\n        if i[1] not in dict:\n            dict[i[1]] = 1\n        else:\n            dict[i[1]] += 1\n    return dict\n\n# test the function\ntest_list = [(1, 'a'), (2, 'b'), (3, 'a'), (4, 'b'), (5, 'c'), (6, 'c')]\nprint(get_unique(test_list)) # Output: { 'a': 2, 'b': 2, 'c': 2 }\n",
        "generated_testcode": "assert get_unique(()) == {}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n#test the function\nprint(front_and_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"))  # Output: ('apple', 'elderberry')\nprint(front_and_rear(\"hello\", \"world\", \"python\", \"programming\")  # Output: ('hello', 'programming') ",
        "generated_testcode": "assert front_and_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"apple\", \"elderberry\")\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    product_even = 1\n    product_odd = 1\n    for i in range(1, n):\n        if i % 2 == 0:\n            product_even *= n%10\n        else:\n            product_odd *= n%10\n        n //= 10\n    return product_even == product_odd\n\n\n# Test the function\nprint(product_Equal(12345)) #True\nprint(product_Equal(123456)) #False\nprint(product_Equal(10248356)) #True \nprint(product_Equal(1234576)) #False ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n\n#Testing the function\nl = [[1,2,3],[1,4,5],[2,4,6],[3,4,5],[1,4,6],[1,2,3]]\nprint(remove_duplicate(l))\n# Output: [[1, 2, 3], [1, 4, 5], [2, 4, 6], [3, 4, 5], [1, 2, 3]]\n#Expected Output: [[1, 2, 3], [1, 4, 5], [2, 4, 6]] ",
        "generated_testcode": "assert remove_duplicate([[1,2,3],[1,2,3],[4,5,6],[7,8,9],[1,2,3]] ) == [[1,2,3],[4,5,6],[7,8,9]]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in test_tup:\n        if type(i) != int and type(i) != float and type(i) != str:\n            return False\n    return True\n\n\n\n# Test the function\ntup = (1, 2, 3, \"hello\", 4, 5, 6.0, \"world\", 7)\nprint(check_valid(tup))  # Output: False\n\ntup = (1, 2, 3, \"hello\", 4, 5.5, \"world\", 7)\nprint(check_valid(tup))  # Output: True\n\ntup = (1, 2, 3, 4, 5, 6, \"world\", 7)\nprint(check_valid(tup))  # Output: True\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(check_valid(tup))  # Output: True\n\ntup = (1, 2, 3, \"hello\", \"world\")\nprint(check_valid(tup))  # Output: False\ntup = (1, 2, 3, 4, 5, 6, 7, 8, \"world\")\nprint(check_valid(tup))  # Output: False\n",
        "generated_testcode": "assert check_valid(()) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            count += 1\n            n //= i\n        else:\n            i += 1\n    return count\n\ndef count_Prime_Factors(num):\n    count = 0\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n            count += count_Fac(i)\n    if num > 1:\n        count += count_Fac(num)\n    return count\n\ndef count_distinct_prime_factor(n):\n    return count_Prime_Factors(n)\n\n\nprint(count_distinct_prime_factor(12))  # Output: 2\nprint(count_distinct_prime_factor(36)) # Output: 2\nprint(count_distinct_prime_factor(75)) # Output: 3\nprint(count_distinct_prime_factor(24)) # Output: 2\n",
        "generated_testcode": "assert count_Fac(10) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    int_list = []\n    for i in test_str.split(','):\n        int_list.append(int(i.strip())\n    return tuple(int_list)\n\n#Example:\n\nprint(str_to_tuple(\"1,2,3,4,5,6,7,8,9\"))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, 7, 8, 9\"))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"1,2, 3, 4, 5, 6, 7,8, 9\"))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, 7, 8, 9,\")  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"))  # Output: (1, ",
        "generated_testcode": "assert str_to_tuple(12345) == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    b = a/2\n    h = 2*((a**2 + b**2)**0.5)\n    perimeter = 4*a + 4*b\n    return perimeter\n\n#Test the function\nprint(rombus_perimeter(10)) #Expected output: 40.0\nprint(rombus_perimeter(5)) #Expected output: 24.0\nprint(rombus_perimeter(12)) #Expected output: 52.0 ",
        "generated_testcode": "assert rombus_perimeter(5) == 18\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    mean = sum(data) / len(data)\n    variance = sum([(x - mean) ** 2 for x in data]) / len(data)\n    return variance ** 0.5\n\n# Test case\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sd_calc(data))  # Output: 2.309401699 ",
        "generated_testcode": "assert sd_calc(range(1, 10)) == 2.872\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty list to store the alternate elements\n    alternate_list = []\n    # Loop through the original list\n    for i in range(0, len(list1), 2):\n        # Append the element at index i and i+1 to the alternate list\n        alternate_list.append(list1[i])\n        if i+1 < len(list1):\n            alternate_list.append(list1[i+1])\n    # Return the alternate list\n    return alternate_list\n\n\n# Test the function with an example list\nprint(alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: [1, 3, 5, 7]\nprint(alternate_elements([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\", \"grape\"])) # Output: [\"apple\", \"cherry\", \"kiwi\"]\nprint(alternate_elements([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1100])) # Output: [10, 30, 50, 70, 90, 1100]\n",
        "generated_testcode": "assert alternate_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"] == [\"a\", \"c\", \"e\", \"g\", \"i\", \"k\", \"m\", \"o\"])\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern = r'a(?:b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbbb\")) # True\nprint(text_match(\"ac\")) # False\nprint(text_match(\"a\")) # True\nprint(text_match(\"bbb\")) # False\nprint(text_match(\"aaaab\")) # True\nprint(text_match(\"abbbc\")) # False",
        "generated_testcode": "assert text_match(\"ab\" ) == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n\n#Test the function\ntup = (1, 2, 3, 4)\ndictionary = {'name': 'John', 'age': 27}\nnew_tup = add_dict_to_tuple(tup, dictionary)\nprint(new_tup)\n\n# Output: (1, 2, 3, 4, {'name': 'John', 'age': 27})\n\n\n#Test the function with an empty tuple\ntup2 = ()\ndictionary2 = {'name': 'Jane', 'age': 30, 'city': 'New York'}\nnew_tup2 = add_dict_to_tuple(tup2, dictionary2)\nprint(new_tup2)\n\n# Output: ({'name': 'Jane', 'age': 30, 'city': 'New York'})",
        "generated_testcode": "assert add_dict_to_tuple(('hello', {'name': 'John', 'age': 25}) == ('hello', {'name': 'John', 'age': 25})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(cost, N, start, end):\n        dp = [[0]*N for _ in range(N)]\n        dp[0][0] = cost[0][0]\n        for i in range(1, N):\n            dp[0][i] = cost[0][i] + dp[0][i-1]\n        for i in range(1, N):\n            dp[i][0] = cost[i][0] + dp[i-1][0]\n        \n        for i in range(1, N):\n            for j in range(1, N):\n                if i == j:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                else:\n                    dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n        \n        for i in range(1, N):\n            for j in range(1, N):\n                dp[i][j] = max(dp[i][j], cost[i][j] + min(dp[i-1][j], dp[i][j-1]))\n        \n        return dp[N-1][N-1]\n    \n    res = helper(cost, N, 0)\n    return res\n\n\n# Test the function\ncost = [[1, 2, 3],\n        [4, 5,",
        "generated_testcode": "assert maxAverageOfPath(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]], 3) == 7\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    filtered_data = {}\n    for key, value in students.items():\n        if value['Height'] >= h and value['Weight'] >= w:\n            filtered_data[key] = value\n    return filtered_data\n\n#Test the function with the given data\nstudents = {'S1': {'Name': 'John', 'Age': 16, 'Gender': 'Male', 'Height': 170, 'Weight': 70},\n           'S2': {'Name': 'Jane', 'Age': 18, 'Gender': 'Female', 'Height': 165, 'Weight': 60},\n           'S3': {'Name': 'David', 'Age': 17, 'Gender': 'Male', 'Height': 180, 'Weight': 80},\n           'S4': {'Name': 'Sara', 'Age': 19, 'Gender': 'Female', 'Height': 175, 'Weight': 75}}\nh = 165\nw = 65\n\nprint(filter_data(students, h, w)) # Output: {'S3': {'Name': 'David', 'Age': 17, 'Gender': 'Male', 'Height': 180, 'Weight': 80}\n\n# Test the function with the given data\nstudents = {'S1': {'Name': 'John', 'Age': 16, 'Gender': 'Male', 'Height': 17",
        "generated_testcode": "assert filter_data(students, 170, 60) == {'Alice': {'height': 170, 'weight': 55, 'gender': 'F', 'score': 85}, 'Bob': {'height': 160, 'weight': 65, 'gender': 'M', 'score': 90}, 'Charlie': {'height': 180, 'weight': 75, 'gender': 'M', 'score': 80}, 'Dave': {'height': 175, 'weight': 65, 'gender': 'M', 'score': 75}}\n\n# The function should return a dictionary with only the students who have height greater than or equal to 170 and weight greater than or equal to 60.\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    map_nums1 = {}\n    for num in nums1:\n        if num in map_nums1:\n            map_nums1[num] += 1\n        else:\n            map_nums1[num] = 1\n    for num in nums2:\n        if num in map_nums1 and map_nums1[num] > 0:\n            map_nums1[num] -= 1\n            count += 1\n    return count\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(count_same_pair(nums1, nums2)) # Output: 4\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(count_same_pair(nums1, nums2)) # Output: 2\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [10, 11, 12,",
        "generated_testcode": "assert count_same_pair([1,2,3,4,5,6,7], [2,4,6,8,10,12]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        base //= 10\n    return sum\n\n#Test cases\nprint(power_base_sum(123, 2)) #14\nprint(power_base_sum(100, 3)) #1\nprint(power_base_sum(35, 4)) #115\nprint(power_base_sum(123456, 3)) #11327 ",
        "generated_testcode": "assert power_base_sum(2, 3) == 8, \"Test case 1 failed\"\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\\"(.+?)\\\"'\n    result = re.findall(pattern, text1)\n    return result\n\n#Test the function\ntext1 = \"The quick brown \\\"fox\\\" jumps over the \\\"lazy dog\\\" and the \\\"lazy\\\" dog is very \\\"good\\\".\"\nprint(extract_quotation(text1))\n# Output: ['fox', 'lazy', 'good']\n\ntext2 = \"She said, \\\"I can't believe it!\\\"\"\nprint(extract_quotation(text2))\n# Output: ['I can\\'t believe it!']\n\ntext3 = \"He said, \\\"This is a test.\\\"\"\nprint(extract_quotation(text3))\n# Output: ['This is a test.']\n\ntext4 = \"The \\\"lazy dog\\\" is the best.\"\nprint(extract_quotation(text4))\n# Output: ['lazy dog']\n\ntext5 = \"\\\"Python\\\" is a great language.\"\nprint(extract_quotation(text5))\n# Output: ['Python']\n\ntext6 = \"She said, \\\"The quick brown fox\\\" jumps over the lazy dog.\"\nprint(extract_quotation(text6))\n# Output: ['The quick brown fox'] ",
        "generated_testcode": "assert extract_quotation(r'\"Hello, this is a \"test\" string\"') == ['test']\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in range(0,len(test_tup)-1):\n        new_tup += (test_tup[i]*test_tup[i+1],)\n    return new_tup\n\n# test the function\ntest_tup = (2, 3, 4, 6, 7, 8, 10)\nprint(multiply_elements(test_tup)) # Output: (6, 24, 42)\n\ntest_tup = (5, 10, 2, 8)\nprint(multiply_elements(test_tup)) # Output: (50,)\n\ntest_tup = (10, 0, 10)\nprint(multiply_elements(test_tup)) # Output: (0)\n\ntest_tup = (10, -5, 10)\nprint(multiply_elements(test_tup)) # Output: (-50)",
        "generated_testcode": "assert multiply_elements((1,2,3,4,5) == 6\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile('[^a-zA-Z0-9]')\n    result = re.sub(pattern, '', S)\n    return result\n\n# Test the function with an example\nS = \"This is a sample string with special characters!\"\nprint(remove_char(S)) # Output: Thisisasamplestringwithspecialcharacters\n",
        "generated_testcode": "assert remove_char(123abc456def) == \"123456\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n\n# Test the function with two lists\nprint(sum_list([1,2,3],[4,5,6]))\n\n\n#Write a function to find the maximum element in a list\ndef max_element(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Test the function with a list\nprint(max_element([1,4,5,6,3,7,2]))\n\n#Write a function to reverse a list\ndef reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n# Test the function with a list\nprint(reverse_list([1,2,3,4,5,6,7,8])\n\n#Write a function to remove duplicates from a list\ndef remove_duplicates(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return unique_lst\n# Test the function with a list\nprint(remove_duplicates([1,2,3,4,3,4,5,6,6,7,8,8])\n\n#Write a function to replace all vowels with \"!\"\ndef replace_vowels(lst",
        "generated_testcode": "assert sum_list([1,2,3,4], [5,6,7]) == [6, 8, 111]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x+y,nums1,nums2))\n\n#Example usage:\nnums1=[1,2,3,4,5]\nnums2=[2,3,4,5,6]\nprint(add_list(nums1,nums2)) # Output: [3,5,7,9,11] ",
        "generated_testcode": "assert add_list(list(range(1,5),list(range(1,5)) == [2, 4, 6, 8, 10, 12]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in nums:\n        if not result or result[-1] != i:\n            result.append(i)\n    return result\n\n#Test the function with the given input list\ninput_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9]\nprint(consecutive_duplicates(input_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n#Test the function with another input list\ninput_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9]\nprint(consecutive_duplicates(input_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert consecutive_duplicates([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9] ) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    r: radius of the cone\n    h: height of the cone\n    Returns the lateral surface area of the cone\n    \"\"\"\n    area = \u03c0 * r**2 + 2 * \u03c0 * r * (h ** 2) ** 0.5\n    return area\n\n\nprint(lateralsurface_cone(2,4))\nprint(lateralsurface_cone(5,8))\nprint(lateralsurface_cone(3,10))\n\n# Explanation:\n# In this function, we first import the math module to use the value of pi. We define a function lateralsurface_cone that takes two arguments, r and h, which are the radius and height of the cone, respectively. We then calculate the lateral surface area of the cone using the formula \u03c0*r**2 + 2*\u03c0*r*h, where r is the radius and h is the height of the cone. ",
        "generated_testcode": "assert lateralsurface_cone(5,10) == 156.63\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pass\n\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    text = text.replace(' ','':':')\n    text = text.replace('.','':')\n    text = text.replace(',','':')\n    return text.replace(' '':':')\n\n# Test cases\nprint(replace_specialchar(\"Hello, world. How are you today?\")) # Output: \"Hello:world: How are you today:\"\nprint(replace_specialchar(\"I am fine, thanks.\")) # Output: \"I am fine:thanks:\"\nprint(replace_specialchar(\"I am doing good. How are you?\")) # Output: \"I am doing good: How are you:\"\nprint(replace_specialchar(\"I am happy to help, of course.\")) # Output: \"I am happy to help: of course:\"\nprint(replace_specialchar(\"I am happy to help of course.\") # Output: \"I am happy to help of course:\"\n",
        "generated_testcode": "assert replace_specialchar(None) == None\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not A:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\n# Test cases\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 5, 6, 7], 3)) # Output: 2\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 5, 6, 7], 4)) # Output: 3\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 5, 6, 7], 5)) # Output: 3\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 5, 6, 7], 6)) # Output: 5\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 5, 6, 7], 8)) # Output: -1",
        "generated_testcode": "assert find_first_occurrence(sorted([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 8, 9], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to store sum of product of subarray\n    sum_sub_prod = 0\n    # Traverse through all possible subarrays and calculate their product\n    for i in range(n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod *= arr[k]\n            sum_sub_prod += prod\n    return sum_sub_prod\n\n# Test the function with an example\narr = [1,2,3,4,5]\nn = len(arr)\nprint(\"Sum of product of all possible subarrays is:\", sum_Of_Subarray_Prod(arr, n))\n",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5] , 4) == 44540\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    middle_bit = n & 0b001000000000000000000000000000000000000000000  # binary representation of 1 followed by 23 zeros\n    return n ^ middle_bit  # XOR with middle_bit to toggle the middle bits of n\n\n# Test the function with the given input\nnum = 10467  # 1101011010000001110100110101\nprint(set_middle_bits(num))  # Output: 10010101000000110100110101\n",
        "generated_testcode": "assert set_middle_bits(10) == 10\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = len(a) - 1\n    while i < j:\n        mid = (i + j) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            i = mid + 1\n        else:\n            j = mid\n    return i\n\n# test the function\na = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nx = 6\nprint(left_insertion(a, x))\n",
        "generated_testcode": "assert left_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern = '^[aeiouAEIOU]'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_str('apple')) # True\nprint(check_str('banana')) # False\nprint(check_str('egg')) # True\nprint(check_str('orange')) # False\nprint(check_str('Zebra')) # True\nprint(check_str('Orange')) # False\n\n# Explanation:\n# The function takes a string as an argument and uses the `re.match()` method to check if the string starts with a vowel. \n# If the string starts with a vowel, the function returns True, otherwise, it returns False. \n# The regex pattern `^[aeiouAEIOU]` matches any string that starts with a vowel (lowercase or uppercase) \n# and the `re.match()` method checks if the string matches the pattern at the beginning of the string.\n# If the string starts with a vowel, the function returns True, otherwise, it returns False. ",
        "generated_testcode": "assert check_str(\"apple\" ) == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in range(1, n):\n        result *= (2/2)\n    return result\n\nprint(geometric_sum(5)) # Output: 1.5\nprint(geometric_sum(10)) # Output: 1.25\n\n# Explanation:\n# The first term of the geometric series is 1/2, the second term is 1/4, the third term is 1/8, and so on.\n# The sum of all the terms up to the nth term is (1/2 + 1/4 + 1/8 + ... + 1/(2^n-1)) = 2/(2^n-1).\n# So the geometric sum of n-1 terms is (2/2^n-1).\n# Therefore, the function returns 1/(2^(n-1) - 1) for n > 0.\n# ",
        "generated_testcode": "assert geometric_sum(5) == 1.81664631208025325742\nprint(\"Test case passed\")\n\n# Write a function to calculate the harmonic sum of n-1\ndef harmonic_sum(n):\n    pass\n\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 1\n    count = 0\n    while True:\n        tri = i*(i+1)//2\n        if len(str(tri)) == n:\n            return count\n        count += 1\n        i += 1\n        ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n\n# Test cases\nprint(tuple_to_dict((\"name\", \"John\", \"age\", 30, \"city\", \"New York\")) # Output: {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(tuple_to_dict(\"color\", \"red\", \"height\", 5.5, \"weight\", 100, \"gender\", \"male\")) # Output: {'color': 'red', 'height': 5.5, 'weight': 10, 'gender': 'male'} ",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == {\"apple\": \"banana\", \"cherry\": \"orange\", \"grape\": None}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #initializing a variable to store the first character of the string\n    first_char = s[0]\n    #iterating through the string\n    for i in range(len(s)) :\n        #checking if the current character is not equal to the first character\n        if s[i] != first_char :\n            #if any character is different from the first character, return False\n            return False\n    #return True if all the characters are same\n    return True\n\n#test the function\nprint(all_Characters_Same('abcd')) # True\nprint(all_Characters_Same('aaaabbb')) # False\nprint(all_Characters_Same('ababab')) # False\nprint(all_Characters_Same('hello')) # True\nprint(all_Characters_Same('h')) # True",
        "generated_testcode": "assert all_Characters_Same(\"abcde\" ) == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    a = side\n    return (1/6)*(a**2)*(np.sqrt(2))\n\n#Test the function with a side length of 3\nprint(area_tetrahedron(3))\n\n#Test the function with a side length of 5\nprint(area_tetrahedron(5))\n\n#Test the function with a side length of 8\nprint(area_tetrahedron(8)) ",
        "generated_testcode": "assert area_tetrahedron(3) == 10.928571427459633538\nprint(\"Test case passed\")\n\n# Write a function to calculate the volume of a tetrahedron\ndef volume_tetrahedron(side, height):\n    pass\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Rotate a list to the right by m positions\n    :param list1: list of integers\n    :param m: integer\n    :return: list rotated to the right by m positions\n    \"\"\"\n    if m == 0:\n        return list1\n    n = m % len(list1)\n    list1 = list1[n:] + list1[:n]\n    return list1\n\n\n# Test the function with an example\nlist1 = [1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list1,3)) #[5,6,7,8,9,1,2,3]\n\n# Test the function with another example\nlist2 = [1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list2,4)) #[3,4,5,6,7,8,9,1]\n\n# Test the function with a negative integer\nlist3 = [1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list3,-3)) #[6,7,8,9,1,2,3,4]\n\n# Test the function with a large number\nlist4 = [1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list4,100)) #[2,3,4,5,6,7,8,9,1]",
        "generated_testcode": "assert rotate_right([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2) == [\"f\", \"g\", \"a\", \"b\", \"c\", \"d\"]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i == None:\n            return True\n    return False\n\n#Testing the function\nprint(check_none((1,2,3,4,5)) #False\nprint(check_none((1,2,None,4,5)) #True\nprint(check_none((1,2,\"hello\",5)) #False\nprint(check_none((1,None,\"hello\",5)) #True\nprint(check_none((\"Hello\", \"World\", None, \"Python\")) #True\nprint(check_none((1, 2, 3, \"Hello\", None, 5)) #True\n",
        "generated_testcode": "assert check_none(()) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    numbers = []\n    for num in range(startnum, endnum+1):\n        if num >= 1000:\n            for i in str(num):\n                if num % int(i) != 0:\n                    break\n            else:\n                numbers.append(num)\n    return numbers\n\n# Test cases\nprint(divisible_by_digits(1000, 2000)) # Output: [100, 120, 150, 180, 200]\nprint(divisible_by_digits(10000, 20000)) # Output: [1000, 1200, 1500, 180, 200, 240, 250, 280, 300, 320, 350, 380, 400, 420, 450, 480, 500, 520, 550, 580, 600, 620, 650, 680, 700, 720, 750, 780, 800, 820, 850, 880, 900, 920, 950, 980]\nprint(divisible_by_digits",
        "generated_testcode": "assert divisible_by_digits(100, 1000) == [10, 20, 30, 40, 50, 60, 70, 80, 90",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (r ** 2) * a / 2\n\n# Test the function\nr = 5\na = 30\nprint(\"The area of the sector is:\", sector_area(r, a)) ",
        "generated_testcode": "assert sector_area(5, 30) == 78.5398, \"Incorrect output\"\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a table to store lengths of LCS \n    L = [[0] * (o + 1) for i in range(m + 1)] \n  \n    # Following steps to build L[m+1][n+1] \n    for i in range(m + 1): \n        for j in range(o + 1): \n            for k in range(n + 1): \n                if not i and not j and not k: \n                    L[i][j] = 0\n                elif not i: \n                    L[i][j] = L[i][j-1] \n                elif not j: \n                    L[i][j] = L[i-1][j] \n                elif not k: \n                    L[i][j] = L[i][j-1] \n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i][j]) \n  \n    return L[m][o] \n  \n# Driver code \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AXGXY\"\nm = len(X) \nn = len(Y) \no",
        "generated_testcode": "assert lcs_of_three(X=\"ABCDGH\", Y=\"AEDFHR\", Z=\"ADBHR\", m=4, n=4) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'(?<=[A-Z])(?=[a-z])'\n    return re.sub(pattern, ' ', str1)\n\n# Test the function\nprint(capital_words_spaces(\"HelloWorldThisIsAnExampleString\")) # Output: \"Hello World This Is An Example String\"\nprint(capital_words_spaces(\"PythonIsAProgrammingLanguage\")) # Output: \"Python Is A Programming Language\"\nprint(capital_words_spaces(\"AIwithMachineLearning\")) # Output: \"AI with Machine Learning\"\nprint(capital_words_spaces(\"DesignPatternsAreImportant\")) # Output: \"Design Patterns Are Important\"\nprint(capital_words_spaces(\"AppleIsTheBestCompanyInTheWorld\")) # Output: \"Apple Is The Best Company In The World\"\nprint(capital_words_spaces(\"LeetCodeIsAPlatformToLearnCoding\")) # Output: \"Leet Code Is A Platform To Learn Coding\"\nprint(capital_words_spaces(\"IAmCreatingATestString\")) # Output: \"I Am Creating A Test String\"",
        "generated_testcode": "assert capital_words_spaces(\"ThisIsAString\" ) == \"This Is A String\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums_int.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str_sorted = [str(num) for num in nums_int]\n    return nums_str_sorted\n\n\n# Test the function with some sample inputs\nprint(sort_numeric_strings(['10', '3', '20', '1']))  # should print ['1', '3', '10', '20']\nprint(sort_numeric_strings(['100', '1', '2', '1000', '3']))  # should print ['1', '2', '10', '100', '1000']\nprint(sort_numeric_strings(['20', '1', '10', '3']))  # should print ['1', '10', '20']\n\n",
        "generated_testcode": "assert sort_numeric_strings([\"10\", \"2\", \"3\", \"1\", \"5\", \"4\", \"6\", \"7\", \"8\", \"100\", \"20\", \"25\", \"1000\"] == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"100\", \"20\", \"25\", \"1000\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_tup = (10, 11, 12)\nprint(add_tuple(test_list, test_tup))\n\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\", \"kiwi\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not arr:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    if left < len(arr) and not check_min_heap(arr, left):\n        return False\n    if right < len(arr) and not check_min_heap(arr, right):\n        return False\n    return True\n\n\ndef is_min_heap(arr):\n    return check_min_heap(arr, 0)\n\n\n# Test cases\nprint(is_min_heap([2, 1, 3, 4, 5, 1, 6, 7, 8]))  # True\nprint(is_min_heap([1, 3, 2, 4, 5, 1, 6, 7, 8]))  # False\nprint(is_min_heap([2, 1, 4, 3, 5, 1, 6, 7, 8]))  # False\nprint(is_min_heap([2, 1, 3, 4, 5, 1, 6, 7, 8, 9]))  # False\nprint(is_min_heap([2, 1, 3, 4, 5,",
        "generated_testcode": "assert check_min_heap([3, 2, 1, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return (2**(2*n-1) + (-1)**n) * (2**(2*n-1) + 1) * jacobsthal_num(n-1) - 2**(2*n-2) * jacobsthal_num(n-2) ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n\n#Example usage:\ntest_list = [(1, 2, \"a\"), (3, 1, \"b\"), (4, 3, \"c\"), (5, 2, \"d\"), (6, 5, \"e\"), (7, 4, \"f\")]\nK = 2\nprint(min_k(test_list, K))\n\n#Output: [(1, 2, \"a\"), (3, 1, \"b\")]\n\n#Explanation: The minimum k records from the given list with respect to the second element in the tuple would be (1, 2, \"a\") and (3, 1, \"b\").\n\n\ntest_list = [(1, 2, \"a\"), (3, 1, \"b\"), (4, 3, \"c\"), (5, 2, \"d\"), (6, 5, \"e\"), (7, 4, \"f\")]\nK = 3\nprint(min_k(test_list, K))\n\n#Output: [(1, 2, \"a\"), (3, 1, \"b\"), (4, 3, \"c\")]\n\n#Explanation: The minimum k records from the given list with respect to the second element in the tuple would be (1, 2, \"a\"), (3, 1, \"b\") and (4, 3, \"c\"). ",
        "generated_testcode": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    common_index = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_index.append(i)\n    return common_index\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 4, 6, 8, 10, 12, 14]\nlist3 = [4, 8, 12, 16, 20, 24]\nprint(extract_index_list(list1, list2, list3))  # Output: [1, 3, 4]\n# Since 2, 6, and 8 are present in all the lists, their indices are 1, 3, and 4 respectively. ",
        "generated_testcode": "assert extract_index_list([\"apple\", \"banana\", \"cherry\", \"orange\"], [\"apple\", \"banana\", \"cherry\", \"grape\"], [\"apple\", \"banana\", \"cherry\", \"grape\"]) == [0, 1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n\n\n# Test the function with the following list:\nnumbers = [34, 67, 23, 12, 89, 45, 78, 56, 34, 12, 67, 10, 29]\nprint(second_smallest(numbers)) # Output: 12\n\n\n# Test the function with the following list:\nnumbers = [56, 78, 89, 23, 45, 100, 67, 34, 12, 89, 78, 90]\nprint(second_smallest(numbers)) # Output: 23\n\n\n# Test the function with the following list:\nnumbers = [90, 80, 70, 60, 50, 40, 30, 20, 10, 0, 90, 80]\nprint(second_smallest(numbers)) # Output: 0\n\n\n# Test the function with the following list:\nnumbers = [100, 90, 80, 70, 60,",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if text == \"ab\" or text == \"a\":\n        return True\n    return False\n\n\n# Test cases\nprint(text_match_zero_one(\"ab\")) # True\nprint(text_match_zero_one(\"a\")) # True\nprint(text_match_zero_one(\"c\")) # False\nprint(text_match_zero_one(\"abb\")) # True\nprint(text_match_zero_one(\"aac\")) # False\nprint(text_match_zero_one(\"abbc\")) # False\nprint(text_match_zero_one(\"aaab\")) # True\nprint(text_match_zero_one(\"abab\")) # False\nprint(text_match_zero_one(\"abba\")) # True\n\n\n# Write a function that matches a string that has an a followed by zero or one 'b' and ends with a 'c'\ndef text_match_zero_one_c(text):\n    if text == \"ac\" or text.startswith(\"ab\") or text == \"a\":\n        return True\n    return False\n\n# Test cases\nprint(text_match_zero_one_c(\"ac\")) # True\nprint(text_match_zero_one_c(\"a\")) # True\nprint(text_match_zero_one_c(\"ab\")) # True\nprint(text_match_zero_one_c(\"abb\")) # False\nprint(text_match_zero_one_c(\"aac\")) # False\nprint(text_match_zero_one_c(\"abbc\")) # True",
        "generated_testcode": "assert text_match_zero_one(None) == False\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n\n# Test cases\nprint(count_reverse_pairs([\"cat\", \"dog\", \"tac\", \"pot\", \"dog\"])) # Output: 2\nprint(count_reverse_pairs([\"ab\", \"cd\", \"dc\", \"ba\"])) # Output: 2\nprint(count_reverse_pairs([\"hello\", \"world\", \"world\", \"olleh\"])) # Output: 2\nprint(count_reverse_pairs([\"race\", \"car\", \"care\", \"bear\", \"ereb\"])) # Output: 4\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n# Can be optimized to O(n) by using a set to store unique strings and then counting the number of pairs",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\", \"ghi\", \"hig\", \"cba\", \"abc\"] == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def sublists(lst):\n        if not lst:\n            return [[]]\n        return [ [lst[i:] for i in range(len(lst))] + sublists(lst[1:]) + sublists(lst[:-1])]\n\n    sublist_count = 0\n    for sub in sublists(list1):\n        if sub != list1:\n            sublist_count += 1\n    return sublist_count\n\n\n# Test the function with an example list\nprint(unique_sublists([1,2,3,4,5]))\n# Output: 7\n\n# Explanation: There are 7 unique sublists in [1,2,3,4,5]\n# [1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1, 2, 3, 4, 5]\n\n# There is also an empty list but it is not counted as a unique sublist. ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"orange\", \"cherry\", \"grape\", \"grape\"] == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    num_str = str(num)\n    if \".\" not in num_str:\n        return False\n    else:\n        decimal_part = num_str.split(\".\")[1]\n        if len(decimal_part) > 2:\n            return False\n        elif len(decimal_part) == 2:\n            return True\n        else:\n            if decimal_part[0] == \"0\":\n                return False\n            else:\n                return True\n\n\nprint(is_decimal(3.14)) # True\nprint(is_decimal(3.00)) # False\nprint(is_decimal(3)) # False\nprint(is_decimal(3.000)) # False\nprint(is_decimal(3.14159)) # True\nprint(is_decimal(3.149)) # False\nprint(is_decimal(3.1499)) # True\nprint(is_decimal(3.0000)) # False\nprint(is_decimal(3.1)) # True\nprint(is_decimal(3.140)) # False\nprint(is_decimal(3.100)) # False\nprint(is_decimal(3.1000)) # False\nprint(is_decimal(3.123456789)) # False\nprint(is_decimal(3.1234567890)) # True\n",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==1:\n        return True\n    if n==0 or n==2:\n        return False\n    for i in range(1,n):\n        if arr[i]==arr[0]:\n            return False\n    return True\n\n#Example Test Cases:\nprint(unique_Element([1,2,3,4,5,6,7,8],6)) #True\nprint(unique_Element([1,2,3,4,5,5,6,7],6)) #False\nprint(unique_Element([1],1) #True\nprint(unique_Element([],0) #False\nprint(unique_Element([1,1,1,1,1],3) #False\nprint(unique_Element([1,2,3],2) #False\n",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6,7,8,9], 6 == True\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    import math\n    rad = math.radians(a)\n    return d/2*math.sin(rad)\n\n#Test the function\nprint(arc_length(4,90)) #should output 1.555\nprint(arc_length(5,30)) #should output 0.32\nprint(arc_length(7,45)) #should output 1.15\n\n\n#Write a function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n#Test the function\nprint(rectangle_area(4,5)) #should output 20\nprint(rectangle_area(2,10)) #should output 20\nprint(rectangle_area(10,4)) #should output 40\n\n#Write a function to calculate the area of a triangle\ndef triangle_area(base,height):\n    return 0.5*base*height\n#Test the function\nprint(triangle_area(10,5)) #should output 25\nprint(triangle_area(6,8)) #should output 24\nprint(triangle_area(8,12)) #should output 48\n\n#Write a function to calculate the area of a circle\ndef circle_area(r):\n    import math\n    return math.pi*(r**2)\n#Test the function\nprint(circle_area(5)) #should output 78.53982\nprint(circle_area(10)) #",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return False\n\n\n# Test the function with the input 1,3,4,5,6,7,8,9,10,11,12,13\nprint(check_monthnumber_number(1)) # True\nprint(check_monthnumber_number(3)) # True\nprint(check_monthnumber_number(4)) # False\nprint(check_monthnumber_number(5)) # True\nprint(check_monthnumber_number(7)) # True\nprint(check_monthnumber_number(8)) # True\nprint(check_monthnumber_number(9)) # True\nprint(check_monthnumber_number(10)) # True\nprint(check_monthnumber_number(11)) # True\nprint(check_monthnumber_number(12)) # True\nprint(check_monthnumber_number(13)) # False\n\n\n# The function works fine. ",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = float('inf') \n    for i in range(1, n): \n        if arr[i] - arr[i-1] < min_diff: \n            min_diff = arr[i] - arr[i-1] \n    return min_diff\n\n#example\narr = [7, 10, 4, 2, 9, 5, 3, 8] \nn = len(arr) \nprint(find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 10, 2, 6, 4, 11, 8, 12, 7], 6) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n\n#Test the function\nprint(number_ctr(\"hello 123 world 456\"))  # Output: 2\nprint(number_ctr(\"my phone number is 9876543210987\"))  # Output: 10\nprint(number_ctr(\"the temperature is 32 degrees\"))  # Output: 1\nprint(number_ctr(\"there are no numbers in this string\"))  # Output: 0\n\n\n#Alternate Solution\ndef number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n\ndef count_numbers(string):\n    return sum(c.isdigit() for c in string)\n\n\nprint(count_numbers(\"hello 123 world 456\"))  # Output: 2\nprint(count_numbers(\"my phone number is 9876543210987\"))  # Output: 10\nprint(count_numbers(\"the temperature is 32 degrees\"))  # Output: 1\nprint(count_numbers(\"there are no numbers in this string\"))  # Output: 0",
        "generated_testcode": "assert number_ctr(123abc) == 1\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def polite_number(n):\n        if n == 1:\n            return True\n        elif n in [2, 3, 4]:\n            return False\n        elif n % 2 == 0:\n            return True\n        elif n % 3 == 0:\n            return False\n        elif n % 5 == 0:\n            return False\n        else:\n            return polite_number(n - 1)\n\n    def find_polite_number(n):\n        if n == 1:\n            return 1\n        else:\n            count = 1\n            i = 1\n            while True:\n                if is_polite(i):\n                    count += 1\n                    if count == n:\n                        return i\n                    i += 1\n\n    return find_polite_number(1)\n\n\n# Test cases\nprint(is_polite(1)) # True\nprint(is_polite(2)) # False\nprint(is_polite(3)) # False\nprint(is_polite(4)) # False\nprint(is_polite(5)) # True\nprint(is_polite(6)) # True\nprint(is_polite(7)) # False\nprint(is_polite(8)) # True\nprint(is_polite(9)) # False\nprint(is_polite(10)) # True\nprint(is_polite(11)) # False\nprint(is_polite(12)) #",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i],l1[i+1]))\n    return result\n\n# Test the function with a list\nl1 = [1,2,3,4,5,6,7,8,9]\nprint(pair_wise(l1))\n\n# Output: [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n\n# Write a function to calculate the sum of a list of numbers\ndef sum_list(l2):\n    result = 0\n    for num in l2:\n        result += num\n    return result\n\n# Test the function with a list\nl2 = [1,2,3,4,5,6,7,8,9]\nprint(sum_list(l2))\n\n# Output: 25\n\n# Write a function to concatenate two lists\ndef concat(l3, l4):\n    return l3 + l4\n# Test the function with two lists\nl3 = [1,2,3]\nl4 = [4,5,6]\nprint(concat(l3,l4))\n# Output: [1, 2, 3, 4, 5, 6]\n# Write a function to check if a number is present in a list\ndef is_present(l5, num",
        "generated_testcode": "assert pair_wise([\"a\", \"b\", \"c\", \"d\", \"e\"] == [(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\")]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n#Example\narr = [1,2,3,4,5,6,7,8,9]\nsum = 10\nn = len(arr)\nprint(get_Pairs_Count(arr,n,sum))\n\n#Output: 2\n#Explanation: There are two pairs whose sum is equal to 10, i.e. (2,8) and (5,5). ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9], 10, 10) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x & 1: \n        return True\n    else: \n        return False\n  \n# Test the function \nprint(check_Odd_Parity(5)) # Output: True \nprint(check_Odd_Parity(6)) # Output: False ",
        "generated_testcode": "assert check_Odd_Parity(1) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two lists as input, li1 and li2 and returns the difference between them as a new list.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list\n\n\n#Example Usage:\nli1 = [1,2,3,4,5,6,7,8]\nli2 = [2,4,6,8,10,12]\nprint(Diff(li1,li2))\n#Output: [1, 3, 5, 7]\n\n\nli3 = [10,20,30,40,50,60]\nli4 = [10,20,30,40,50]\nprint(Diff(li3,li4))\n#Output: []\n\nli5 = [1,2,3,4,5,6,7,8,9]\nli6 = [2,4,6,8,10]\nprint(Diff(li5,li6))\n#Output: [1, 3, 5, 7, 9]\n",
        "generated_testcode": "assert Diff([1,2,3,4,5], [3,4,5,6,7] ) == [1,2]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 0 : \n        return 0\n    else : \n        sum = 0\n        i = 1\n        while i <= n : \n            sum += i**4\n            i += 2\n        return sum ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == ']' or i == '}':\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(' or i == ']' and stack[-1] == '[' or i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\n\n# Test cases\nprint(check_expression('({[]})'))  # True\nprint(check_expression('({[]}')) # False\nprint(check_expression('({[])}')) # False\nprint(check_expression('({[()]})')) # True\nprint(check_expression('[()]')) # True\nprint(check_expression('(]')) # False\nprint(check_expression('[)')) # False\nprint(check_expression('{')) # False\nprint(check_expression('}')) # False\nprint(check_expression('()')) # True\nprint(check_expression('({[()]})')) # True\nprint(check_expression('({[()})')) # False\nprint(check_expression('({[()]}')) # False\nprint(check_expression('({[()})')) # False",
        "generated_testcode": "assert check_expression(str) == True # Test case 1\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    return ' '.join(new_words)\n\n# Test the function with the given test cases\nprint(remove_length(\"hello world this is a test string\", 5)) # \"hello test string\"\nprint(remove_length(\"remove all words with k length\", 3)) # \"remove k length\"\nprint(remove_length(\"this is a test string\", 10) # \"this is a string\"",
        "generated_testcode": "assert remove_length(test_str=\"This is a test string\", K=2) == \"is test string\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    pos = []\n    start = 0\n    while True:\n        index = text.find(pattern, start)\n        if index == -1:\n            break\n        count += 1\n        pos.append(index)\n        start = index + 1\n    return count, pos\n\n\n# Testing\ntext = \"hello world\"\npattern = \"lo\"\nprint(occurance_substring(text, pattern))\n\n# Output: (1, [2])\n\n\ntext = \"hello world\"\npattern = \"o\"\nprint(occurance_substring(text, pattern))\n\n# Output: (2, [1, 8])\n\n\ntext = \"hello world\"\npattern = \"world\"\nprint(occurance_substring(text, pattern))\n\n# Output: (1, [6])\n\n\ntext = \"hello world\"\npattern = \"l\"\nprint(occurance_substring(text, pattern))\n\n# Output: (3, [2, 3, 7])\n\n\ntext = \"hello world\"\npattern = \"o\"\nprint(occurance_substring(text, pattern))\n\n# Output: (2, [1, 8])\n\n\ntext = \"hello world\"\npattern = \"ll\"\nprint(occurance_substring(text, pattern))\n\n# Output: (0, [])\n\n\ntext = \"hello world\"\npattern = \"xyz\"\nprint(occurance_substring(text, pattern))\n",
        "generated_testcode": "assert occurance_substring(text=\"hello world\", pattern=\"llo\") == [(1, 2), (3, 3)]\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # define a regular expression to check the email\n    regex = r'^[\\w\\.\\+\\-]+\\@[\\w]+\\.[a-z]{2,3}$'\n    # use the re module to check if the email matches the regex\n    if re.match(regex, email):\n        return True\n    else:\n        return False\n\n# test the function\nprint(check_email('example@example.com')) # True\nprint(check_email('example@example.co.in')) # False\nprint(check_email('example@example.co.uk')) # True\nprint(check_email('example@example.com.uk')) # False\nprint(check_email('example@example.co.in.uk')) # False\nprint(check_email('example@example')) # False\nprint(check_email('example@exam_ple.com')) # False\nprint(check_email('example@exam_ple.com.uk')) # False\nprint(check_email('example.com')) # False\nprint(check_email('example@com')) # False\nprint(check_email('example@.com')) # False\nprint(check_email('example.co.in')) # False\nprint(check_email('example@.com.in')) # False\nprint(check_email('example@exam.ple.com.uk')) # False\n",
        "generated_testcode": "assert check_email(None) == False\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test the function with the given test cases\nprint(odd_position([1,2,3,4,5,6,7,8,9,10,11])) # True\nprint(odd_position([1,2,4,6,8])) # False\nprint(odd_position([1,2,4,5,6,8])) # False\nprint(odd_position([1,2,3,4,5,6,7,8])) # True\nprint(odd_position([1,2,4,6,8,10])) # False\nprint(odd_position([1,2,3,4,6,8,10])) # False\nprint(odd_position([1,3,5,7,9])) # True\nprint(odd_position([1,2,4,6,8,10,11])) # False\nprint(odd_position([1])) # True\nprint(odd_position([])) # True\n\n# This function checks if every odd index contains odd numbers of the given list. It uses a for loop to iterate through the list starting from the second element and checks if the current element is even or not. If it is even, it returns False, else it returns True if all the odd index elements are odd. If the list is empty, it returns True as all elements are even. ",
        "generated_testcode": "assert odd_position([1,2,3,4,5,6,7,8,9] ) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels) or test_str[i+1] in vowels:\n            count += 1\n    return count\n\n#test the function\nprint(count_vowels(\"Hello, World!\")) # Output: 3\nprint(count_vowels(\"Python\")) # Output: 3\nprint(count_vowels(\"CodeGalaxy\")) # Output: 4\nprint(count_vowels(\"Python is great!\")) # Output: 6\n\n\n#Time complexity: O(n)\n#Space complexity: O(1)\n",
        "generated_testcode": "assert count_vowels(test_str=\"hello\") == 1\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    sum = 0\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n    for i in range(n):\n        if count[arr[i]] == 1:\n            sum += arr[i]\n    return sum\n\n#test the function\narr = [2, 3, 4, 5, 4, 6, 2, 3, 1, 7, 8, 9, 9]\nn = len(arr)\nprint(find_Sum(arr, n))\n\n#Output: 20 ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] , 12) == 26\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to keep track of consecutive duplicates\n    current_duplicates = []\n    result = []\n\n    # Loop through the list\n    for i in range(1, len(list1)):\n        # If the current element is the same as the previous element, add it to the current duplicates\n        if list1[i] == list1[i-1]:\n            current_duplicates.append(list1[i])\n        # If the current element is different, append the current duplicates to the result and start a new sublist\n        else:\n            result.append(current_duplicates)\n            current_duplicates = [list1[i]]\n    # Append the last sublist to the result\n    result.append(current_duplicates)\n\n    return result\n\n\n# Test the function\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5])) # should return [[1, 1, 1], [2, 2, 2], [3, 3, 3], [3], [4, 4], [5, 5, 5]]\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 5])) # should return [[1], [2, 2], [3, 3], [4, 4], [5",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"] == [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]]\nprint(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"]))\n\n# Output: [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]] ",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sub_list = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)):\n            for k in itertools.combinations(list1, i):\n                sub_list.append(list(k))\n    return len(set(sub_list) - {()})\n\n#Testing the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nprint(unique_sublists(list1))\n\n#Output: 254\n\nlist1 = [1,2,3,4]\nprint(unique_sublists(list1))\n#Output: 40\n",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"orange\", \"kiwi\", \"kiwi\"] == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in itertools.combinations(test_list, i):\n            result.append(sum(combo))\n    return result\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5, 6]\nprint(find_combinations(test_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 9, 4, 5, 6, 10, 8, 9, 11, 7, 8, 12, 5, 6, 7, 11, 10, 12, 13, 6, 7, 11, 13, 14, 10, 11, 15]\n",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    c = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            c += 1\n    return c \n\ndef isEven(n):\n    if count_Divisors(n) % 2 == 0 : \n        return True\n    else : \n        return False\n\n# Test cases \nprint(isEven(6)) # True \nprint(isEven(8)) # True \nprint(isEven(5)) # False \nprint(isEven(10)) # True \nprint(isEven(15)) # False\n",
        "generated_testcode": "assert count_Divisors(12) == 4 # True\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    sum_arr = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum_arr.append(sum(arr[i:j+1]))\n    return sum(sum_arr)\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(Odd_Length_Sum(arr))\n\n\n# Output: 24 ",
        "generated_testcode": "assert Odd_Length_Sum([1,2,3,4,5,6,7,8,9] ) == 25\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    r, g, b = r/2555.0, g/2555.0, b/2555.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n\n\n\n# Test the function with some color values\nprint(rgb_to_hsv(2555, 0, 0))  # Expected output: (0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 2555, 0))  # Expected output: (60.0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 2555))  # Expected output: (120.0, 1.0, 1.",
        "generated_testcode": "assert rgb_to_hsv(2555, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product, odd_product\n\n# Test the function with sample inputs\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8])) # Output: (12, 6)\nprint(mul_even_odd([2, 3, 4, 5, 6, 7, 8, 9])) # Output: (12, 60)\nprint(mul_even_odd([1, 3, 5, 7, 9, 11, 13])) # Output: (1, 1)\n\n# Alternatively, you can use list comprehension to achieve the same result in one line\ndef mul_even_odd_comp(lst):\n    even_product = 1\n    odd_product = 1\n    for num in [num for num in lst if num % 2 == 0]:\n        even_product *= num\n    for num in [num for num in lst if num % 2 != 0]:\n        odd_product *= num\n    return even_product, odd_product\n# Test the function with sample inputs\nprint(mul_even_odd_comp([1, 2, 3, 4, 5, 6, 7,",
        "generated_testcode": "assert mul_even_odd(list(range(1, 10)) == 0 # No even number in the list\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list_str = test_str.strip(\"()\").split(\",\")\n    list_int = []\n    for i in list_str:\n        list_int.append(int(i.strip()))\n    return tuple(list_int)\n\n\n#test_str = \"(1,2,3,4,5,6,7)\"\n#print(tuple_str_int(test_str))\n#Output: (1, 2, 3, 4, 5, 6, 7)\n\n#test_str = \"  ( 1, 2,  3,  4,  5,  6,  7  \"\n#print(tuple_str_int(test_str))\n#Output: (1, 2, 3, 4, 5, 6, 7)\n",
        "generated_testcode": "assert tuple_str_int((\"(1,2,3,4,5)\") == (1,2,3,4,5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    left, right = 0, len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test the function\na = [1, 3, 4, 6, 8, 9, 11, 14, 17, 21, 24, 34, 56]\nprint(right_insertion(a, 6)) # Output: 2\nprint(right_insertion(a, 17)) # Output: 5\nprint(right_insertion(a, 25)) # Output: 8\nprint(right_insertion(a, 5)) # Output: 1\nprint(right_insertion(a, 24)) # Output: 7\nprint(right_insertion(a, 1)) # Output: 1\nprint(right_insertion(a, 21)) # Output: 6\nprint(right_insertion(a, 10)) # Output: 2\nprint(right_insertion(a, 0)) # Output: 0\nprint(right_insertion(a, 56)) # Output: 8\nprint(right_insertion(a, 34)) # Output: 7\nprint(right_insertion(a, 3)) # Output: 2\nprint(right_insertion",
        "generated_testcode": "assert right_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r\"ab{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_three(\"abbbb\")) # True\nprint(text_match_three(\"abcbbbc\")) # False\nprint(text_match_three(\"aabbbbbc\")) # True\nprint(text_match_three(\"bbaabbbbbc\")) # False\nprint(text_match_three(\"bbbbb\")) # True\n",
        "generated_testcode": "assert text_match_three(text='abbb') == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.append(test_str)\n    return tuple(test_list)\n\n\n#Test the function with the sample inputs\ntest_list = ['apple', 'banana', 'cherry', 'orange']\ntest_str = 'grape'\nprint(new_tuple(test_list, test_str)) ",
        "generated_testcode": "assert new_tuple([\"apple\", \"banana\", \"orange\"], \"hello\") == (\"hello\", \"apple\", \"banana\", \"orange\")\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (s * l)\n\n# Test the function with a regular polygon with 5 sides and side length of 2:\ns = 5\nl = 2\nprint(perimeter_polygon(s,l)) # Output: 10.0\n\n# Test the function with a regular polygon with 7 sides and side length of 3:\ns = 7\nl = 3\nprint(perimeter_polygon(s,l)) # Output: 21.0\n# Test the function with a regular polygon with 8 sides and side length of 4:\ns = 8\nl = 4\nprint(perimeter_polygon(s,l)) # Output: 32.0 ",
        "generated_testcode": "assert perimeter_polygon(3, 10) == 18\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test the function with the following input\nnums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nprint(even_position(nums)) # Output: True\n\nnums = [2, 4, 7, 8, 10, 12, 14, 15, 20]\nprint(even_position(nums)) # Output: False\n\nnums = [2, 4, 6, 8, 10, 12, 14, 15, 20]\nprint(even_position(nums)) # Output: False\n",
        "generated_testcode": "assert even_position([2, 4, 6, 8, 10, 12, 14, 16] ) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            result += i\n        else:\n            result += (i,)\n    return result\n\n# Test cases\nprint(remove_nested(((1, (2, (3, 4), 5, (6, 7, (8, (9, 10, 11)), 12)))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n\nprint(remove_nested((1, (2, (3, 4, (5, (6, 7), 8), 9), 10)\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(remove_nested((1, 2, (3, (4, (5, (6, 7, 8), 9, 10, (11, (12, 13, 14, 15)))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) ",
        "generated_testcode": "assert remove_nested((\"hello\", (1, 2, (3, 4, (5, 6))) == (\"hello\", 1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count ",
        "generated_testcode": "assert count_list([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\n\n#Example usage:\narr = [1,2,3,4,4,4,4,4,5,6,7,8,9]\nx = 4\nn = len(arr)\nprint(last(arr,x,n)) #Output: 4\n\narr = [1,3,4,4,5,6,7,8,9]\nx = 4\nn = len(arr)\nprint(last(arr,x,n)) #Output: 3\n\narr = [1,2,3,4,4,4,5,6,7,7,8,9]\nx = 7\nn = len(arr)\nprint(last(arr,x,n)) #Output: 6\n\narr = [1,2,3,4,5,6,7,8,9]\nx = 4\nn = len(arr)\nprint(last(arr,x,n)) #Output: -1\n\n#Time complexity: O(n)\n#Space complexity: O(1)\n#Note: we can also use binary search to achieve this in O(logn) time complexity, but it's not required for this problem. ",
        "generated_testcode": "assert last([1,2,3,4,4,4,4,5,6,7,7,8,9], 4, 8) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if text.startswith('a') and text.endswith('b'):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_starta_endb('aba')) # True\nprint(text_starta_endb('abab')) # True\nprint(text_starta_endb('abc')) # False\nprint(text_starta_endb('abcab')) # False\nprint(text_starta_endb('a')) # False\nprint(text_starta_endb('b')) # False\nprint(text_starta_endb('ab')) # False\nprint(text_starta_endb('aabc')) # False\nprint(text_starta_endb('abab')) # True\nprint(text_starta_endb('bab')) # False\nprint(text_starta_endb('')) # False\nprint(text_starta_endb('a')) # False\nprint(text_starta_endb('b')) # False",
        "generated_testcode": "assert text_starta_endb(\"ab\" ) == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    heapq.heapify(items)\n    for i in range(n):\n        item = heapq.heappop(items)\n        heap.append(item)\n    return heap\n\n# test function\nitems = [(price, item) for item, price in [('apple', 5), ('orange', 3), ('banana', 7), ('pear', 2), ('kiwi', 4), ('mango', 8), ('grapes', 1)]]\nn = 3\nprint(cheap_items(items,n))",
        "generated_testcode": "assert cheap_items",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n\n# Example usage:\nd = {1: 2, 2: 3, 3: 4, 4: 5, 5: 6}\nprint(return_sum(d)) # Output: 15\nd = {5: 1, 4: 2, 3: 3, 2: 4, 1: 5}\nprint(return_sum(d)) # Output: 15\nd = {6: 2, 5: 3, 4: 4, 3: 5, 2: 6}\nprint(return_sum(d)) # Output: 15\n",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} ) == 15\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n % 2 != 0: \n        return n\n    else: \n        return 0\n\nl = int(input(\"Enter lower limit: \"))\nr = int(input(\"Enter upper limit: \"))\n\nsum = 0\nfor i in range(l, r+1):\n    sum += sum_Odd(i)\n\nprint(\"The sum of odd numbers within the range\",l,\"and\",r,\"is\",sum) ",
        "generated_testcode": "assert sum_Odd(1, 5) == 9\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n\n# Test the function\narr = [1,2,3,4,5,6,7,8,9]\nprint(_sum(arr)) # Output: 45\n\n# Write a python function to find the sum of even numbers in an array\ndef even_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n\n# Test the function\narr = [1,2,3,4,5,6,7,8,9]\nprint(even_sum(arr)) # Output: 6\n\n# Write a python function to find the sum of odd numbers in an array\ndef odd_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 != 0:\n            sum += arr[i]\n    return sum\n\n# Test the function\narr = [1,2,3,4,5,6,7,8,9]\nprint(odd_sum(arr)) # Output: 25\n\n# Write a python function to find the sum of positive numbers in an array\ndef positive_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sum += arr[i]\n",
        "generated_testcode": "assert _sum([1,2,3,4,5] ) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (n << d | (n >> (32 - d))\n\n\n# Test the function\nnum = 10\nd = 2\nprint(\"Original number:\", bin(num))\nprint(\"Left rotated number:\", bin(left_Rotate(num,d))\n",
        "generated_testcode": "assert left_Rotate(10,2) == 4\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the text\n    for char in text:\n        # If the character is not a whitespace, add it to the result string\n        if char != \" \":\n            result += char\n    # Return the result string\n    return result\n\n# Test the function with a sample input\nprint(remove_all_spaces(\"This is a test string\")) # Should output \"Thisisteststring\"\nprint(remove_all_spaces(\"  Hello world  \")) # Should output \"Helloworld\"\nprint(remove_all_spaces(\"    Remove    all    spaces   \")) # Should output \"Removeallspaces\"\n\n# Additional test cases\nprint(remove_all_spaces(\"    AaBb   Cd Ef   G  \")) # Should output \"AabcdefG\"\nprint(remove_all_spaces(\"This    has    multiple    spaces\")) # Should output \"Thishasmultiplespaces\"\nprint(remove_all_spaces(\"   A  b   c   d   e   f   g   \")) # Should output \"Abcdefg\"\nprint(remove_all_spaces(\"\")) # Should output \"\"\nprint(remove_all_spaces(\"   \")) # Should output \"\"\nprint(remove_all_spaces(\"   123456789    \")) # Should output \"123456789\"\nprint(remove_all_spaces(\"a\")) # Should output \"a\"\n\n# Test with a string with only spaces\n",
        "generated_testcode": "assert remove_all_spaces(None) == None\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n\n# Test the function with some inputs\nprint(test_three_equal(1, 2, 3)) # Should return False\nprint(test_three_equal(1, 1, 2)) # Should return False\nprint(test_three_equal(1, 1, 1)) # Should return True\nprint(test_three_equal(2, 2, 2)) # Should return True\n\nprint(test_three_equal(1, 2, 2)) # Should return True\n\nprint(test_three_equal(3, 3, 3)) # Should return True",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if arr == sorted(arr):\n        return 0\n    else:\n        start = 0\n        end = n-1\n        while start < end:\n            if arr[start] > arr[end]:\n                return start\n            if arr[start+1] < arr[start]:\n                return start+1\n            start += 1\n            if arr[end] > arr[end-1]:\n                return end\n            end -= 1\n        return end+1\n\n#test case\narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nn = len(arr)\nprint(count_Rotation(arr,n)) #output: 4\n\narr = [3, 4, 5, 1, 2, 6, 7]\nn = len(arr)\nprint(count_Rotation(arr,n)) #output: 3",
        "generated_testcode": "assert count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12], 7) == 0\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return True\n    else :\n        i = 1\n        while i*i <= n :\n            if i*i == n :\n                return True\n            i += 1\n        return False\n\n# Testing the function\nprint(is_Perfect_Square(4)) # Output: True\nprint(is_Perfect_Square(14)) # Output: False\nprint(is_Perfect_Square(25)) # Output: True\nprint(is_Perfect_Square(100)) # Output: True\nprint(is_Perfect_Square(13)) # Output: False\n\n",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product%2 == 0\n\narr = [2, 3, 4, 5]\nn = len(arr)\nprint(is_Product_Even(arr,n))\n\n# output: True\n\narr = [2, 3, 6]\nn = len(arr)\nprint(is_Product_Even(arr,n))\n# output: False\n",
        "generated_testcode": "assert is_Product_Even([2,3,4,5],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(max_sum_list(lists)) # Output: [10, 11, 12]\n",
        "generated_testcode": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12]] ) == [10,11,12]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_run = 0\n    current_run = 0\n    max_run_start = 0\n    max_run_end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = i - current_run\n                max_run_end = i\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n        max_run_start = len(test_str) - current_run\n        max_run_end = len(test_str)\n    return test_str[max_run_start:max_run_end]\n\n\n# Test the function\ntest_str = \"aBCdeFGHIjKLmNOPqrstUVwXyz\"\nprint(max_run_uppercase(test_str))  # Output: \"FGHIjKL\"\n\ntest_str = \"AbCdEfGhIjKlMnOpQrStUvWxYz\"\nprint(max_run_uppercase(test_str))  # Output: \"ABCdEfGhIjKlM\"\ntest_str = \"abCdEfGhIjKlMnOpQrStUvWxYz\"\nprint(max_",
        "generated_testcode": "assert max_run_uppercase(test_str = \"HELLO WORLD\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n\n#Test the function with the following input\nnums = [4, 7, 2, 9, 5, 3, 8, 1, 12, 11]\nprint(first_odd(nums)) # Output: 7\nnums = [10, 6, 2, 9, 4, 5, 3, 8]\nprint(first_odd(nums)) # Output: 10\nnums = [10, 6, 4, 8, 5, 3, 12]\nprint(first_odd(nums)) # Output: None ",
        "generated_testcode": "assert first_odd([]), None\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n\n# Test cases\nt1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nK = 5\nprint(check_K(t1, K)) # True\n\nt2 = (10, 20, 30, 40, 50, 60, 70, 80)\nK = 50\nprint(check_K(t2, K)) # True\n\nt3 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nK = 10\nprint(check_K(t3, K)) # False\n\nt4 = (10, 20, 30, 40, 50, 60, 70, 80)\nK = 1\nprint(check_K(t4, K)) # False\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert check_K((), 0) == False\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    \n    return True\n\n\n# Test the function\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (0, 1, 2, 4, 5)\nprint(check_smaller(test_tup1, test_tup2))  # Output: False\n\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (0, 1, 3, 4, 5)\nprint(check_smaller(test_tup1, test_tup2))  # Output: True\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (0, 1, 2, 3, 5)\nprint(check_smaller(test_tup1, test_tup2))  # Output: False\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (0, 1, 2, 3,",
        "generated_testcode": "assert check_smaller((\"abc\", (1, 2, 3)) == False\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = []\n    for i in a:\n        count.append(a.count(i))\n    for j in b:\n        count.append(b.count(j))\n    for k in c:\n        count.append(c.count(k))\n    for l in d:\n        count.append(d.count(l))\n    return count\n\na = [1,2,3,4,5,6,7,8,9]\nb = [3,4,5,6,7,8,9,10]\nc = [2,3,4,5,6,7,8,9,10]\nd = [2,3,4,5,6,7,8,9,10]\nresult = count_variable(a,b,c)\nprint(result) # Output: [1,2,2,3,3,3,3,3,1,1,1,1,1,1,1,1]\n\n#Explanation:\n# The function should iterate over each element of a and count how many times it appears in a, b, c and d respectively.\n# Then, it should add these counts to a list and return it. The final output should be [1,2,2,3,3,3,3,1,1,1,1,1,1,1,1] because 1 appears once, 2 appears twice in a, 3 appears three times in a, b, and c, and 4 appears three times in b,",
        "generated_testcode": "assert count_variable(1,2,3) == [1,2,2,3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n\n# Test cases\ntest_list1 = [(1,2,3), (4,5,6), (7,8,9)]\ntest_list2 = [(1,2,3), (4,5,6), (7,8,9)]\ntest_list3 = [(1,2,3), (4,5,6), (7,8,10)]\n\nprint(check_identical(test_list1, test_list2)) # True\nprint(check_identical(test_list1, test_list3)) # False\n",
        "generated_testcode": "assert check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)] ) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    street = street.replace('road', 'rd.')\n    return street\n\n# Test the function\nprint(road_rd('I live on 123rd Street'))  # Output: 'I live on 123rd St.'\nprint(road_rd('My street is named Main Road'))  # Output: 'My street is named Main Rd.'\nprint(road_rd('I love the 5th Avenue'))  # Output: 'I love the 5th Av.'\nprint(road_rd('The road is closed'))  # Output: 'The rd. is closed'\nprint(road_rd('We need to go to 11th road'))  # Output: 'We need to go to 11th rd.'\nprint(road_rd('The road is coming up on my mind'))  # Output: 'The rd. is coming up on my mind' ",
        "generated_testcode": "assert road_rd(street=\"road\") == \"rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    length = 0\n    for char in str1:\n        length += 1\n    return length\n\n# Test the function with the given string\nstring = \"hello world\"\nprint(string_length(string))\n",
        "generated_testcode": "assert string_length(None) == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (p*q)/2\n\nprint(rombus_area(5, 6)) # Output: 15.0\n\n\n# Test case 2\nprint(rombus_area(10, 12)) # Output: 60.0\n\n\n# Test case 3\nprint(rombus_area(14, 20)) # Output: 1140.0 ",
        "generated_testcode": "assert rombus_area(5, 7) == 21\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize three arrays to hold 0s, 1s, and 2s\n    zeros = []\n    ones = []\n    twos = []\n    \n    # Append each element to the corresponding array\n    for i in range(n):\n        if arr[i] == 0:\n            zeros.append(arr[i])\n        elif arr[i] == 1:\n            ones.append(arr[i])\n        else:\n            twos.append(arr[i])\n    \n    # Concatenate the arrays and return the result\n    return zeros + ones + twos\n\n# Test the function with sample input\narr = [0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1, 0, 2]\nn = len(arr)\nprint(sort_by_dnf(arr, n))\n\n# Output: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2] ",
        "generated_testcode": "assert sort_by_dnf([0, 1, 2, 0, 1, 2, 0, 1, 2], 6) == [0, 0, 0, 1, 1, 1, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple()\n\n#Example usage:\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (10, 20, 30, 40, 50)\nprint(clear_tuple(tup1)) # Output: ()\nprint(clear_tuple(tup2)) # Output: ()\n\n\n#Write a function to replace all vowels in a string with '*'\ndef replace_vowels_with_star(string):\n    vowels = 'aeiouAEIOU'\n    return ''.join('*' if char in vowels else char for char in string)\n\n#Example usage:\nprint(replace_vowels_with_star('Hello World')) # Output: H*ll* W*rld\nprint(replace_vowels_with_star('Python')) # Output: Pyth*n\n\n#Write a function to reverse a tuple\ndef reverse_tuple(tup):\n    return tuple(reversed(tup))\n\n#Example usage:\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (10, 20, 30, 40, 50)\nprint(reverse_tuple(tup1)) # Output: (5, 4, 3, 2, 1)\nprint(reverse_tuple(tup2)) # Output: (50, 40, 30, 20",
        "generated_testcode": "assert clear_tuple(()) == ()\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n\n#Test the function with some examples\nprint(div_of_nums([2,4,6,8,9,10,12,15,20,25],2,3))  # Output: [2, 4, 8, 10, 20, 25]\nprint(div_of_nums([5,7,10,15,20,30,35,45],5,10))  # Output: [5, 10, 20, 30, 45]\nprint(div_of_nums([1,3,5,7,9],2,3))  # Output: []\n\n#Note: The function should take two parameters, a list of numbers and two integers m and n, and return a list of numbers that are divisible by either m or n. The function should use lambda function to filter the numbers and return the result. ",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.islower():\n            count += 1\n    return count\n\n# Test the function with a sample string\ns = \"Hello, World! This is a Test String.\"\nprint(lower_ctr(s)) ",
        "generated_testcode": "assert lower_ctr(None) == 0\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return True\n    return False\n\n\n# Test the function\nprint(count_duplic([1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 9]))  # Output: True\nprint(count_duplic([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9]))  # Output: True\nprint(count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: False\n\n\n# Another approach\ndef count_duplic(lists):\n    count = 0\n    prev_num = None\n    for num in lists:\n        if num == prev_num:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            return True\n        prev_num = num\n    return False\n\n# Test the function\nprint(count_duplic([1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 7, 8, 9]))  # Output: True\n",
        "generated_testcode": "assert count_duplic([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == 9\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        return True\n    elif monthnum1 == 1 or monthnum1 == 3 or monthnum1 == 5 or monthnum1 == 7 or monthnum1 == 8 or monthnum1 == 10 or monthnum1 == 12:\n        return False\n    else:\n        return False\n\n\ndef check_monthnum(month1):\n    monthnum = 0\n    if month1 == 'January' or month1 == 'March' or month1 == 'May' or month1 == 'July' or month1 == 'August' or month1 == 'October' or month1 == 'December':\n        monthnum = 1\n    elif month1 == 'April' or month1 == 'June' or month1 == 'September' or month1 == 'November':\n        monthnum = 4\n    elif month1 == 'February':\n        monthnum = 2\n    elif month1 == 'July' or month1 == 'September':\n        monthnum = 7\n    elif month1 == 'April' or month1 == 'June' or month1 == 'October':\n        monthnum = 8\n    elif month1 == 'February' or month1 == 'November':\n        monthnum = 11\n    return check_monthnum_",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in two dictionaries and returns a new dictionary with the key-value pairs from both dictionaries.\n    If there are common keys, the value from dict2 will be used as the value for the merged dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\n# Test cases\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'b': 4, 'd': 5}\nprint(merge_dictionaries(dict1,dict2)) # {'a': 1, 'b': 4, 'c': 3, 'd': 5}\ndict3 = {'a': 1, 'b': 2}\ndict4 = {'a': 1, 'b': 3, 'c': 4}\nprint(merge_dictionaries(dict3,dict4)) # {'a': 1, 'b': 3, 'c': 4}\n",
        "generated_testcode": "assert merge_dictionaries({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(p) < 8:\n        return False\n    else:\n        for i in p:\n            if i.isalpha():\n                return True\n        return False\n\n\nprint(pass_validity(\"123456789\"))\nprint(pass_validity(\"password\"))\nprint(pass_validity(\"Password1\"))\nprint(pass_validity(\"Password@1\"))\nprint(pass_validity(\"Password@1!\"))\nprint(pass_validity(\"Password1234\"))\n\n\n# Output:\n# False\n# True\n# True\n# True\n# True\n# False\n",
        "generated_testcode": "assert pass_validity(12345) == False\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = re.compile(\"^\"+sample)\n    if pattern.match(string) :\n        return True\n    else :\n        return False\n    \n# Test cases\nprint(check_substring(\"Hello world\", \"He\")) # True\nprint(check_substring(\"Hello world\", \"Hel\")) # True\nprint(check_substring(\"Hello world\", \"hell\")) # False\nprint(check_substring(\"Hello world\", \"wor\")) # False\nprint(check_substring(\"Hello world\", \"lo wo\")) # True\nprint(check_substring(\"Hello world\", \"Ho\")) # False",
        "generated_testcode": "assert check_substring(string=\"hello world\", sample=\"he\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [x for x in l if x % 2 != 0]\n\n#Test the function\nprint(remove_even([1,2,3,4,5,6,7,8,9,10,11,12]) # Output: [1, 3, 5, 7, 9]\nprint(remove_even([1, 3, 5, 7, 9])) # Output: [1, 3, 5, 7, 9]\nprint(remove_even([])) # Output: []\n\n\n\n#Write a function to remove negative numbers from a given list\ndef remove_negative(l):\n    return [x for x in l if x >= 0]\n\n#Test the function\nprint(remove_negative([1,2,3,-4,4,5,-6,7,-8,9]) # Output: [1, 2, 3, 4, 5, 7, 9]\nprint(remove_negative([1, -2, -3, 4, -5, 6, -7, 8, -9]) # Output: [1, 4, 6, 8]\nprint(remove_negative([])) # Output: []\n\n\n#Write a function to remove duplicate numbers from a given list\ndef remove_duplicates(l):\n    return list(set(l))\n#Test the function\nprint(remove_duplicates([1, 2, 3, 4, 5, 6, 7,",
        "generated_testcode": "assert remove_even([1,2,3,4,5,6,7,8,9] ) == [1,3,5,7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    elements = []\n    for index in list_index:\n        if index >= len(nums):\n            elements.append(None)\n        else:\n            elements.append(nums[index])\n    return elements\n\n#Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 2, 5, 10]\nprint(access_elements(nums, list_index)) # Output: [1, None, None]\n\nnums = [10, 20, 30, 40, 50, 60, 70]\nlist_index = [2, 0, -1, 3, 5, 6]\nprint(access_elements(nums, list_index)) # Output: [30, 10, None, None, None]\nnums = [1, 2, 3, 4, 5]\nlist_index = [0, 1, 2, 3, 4, 5, 6]\nprint(access_elements(nums, list_index)) # Output: [1, 2, 3, 4, 5, None]\n",
        "generated_testcode": "assert access_elements([1,2,3,4,5,6,7,8,9], [0,2,4]) == [1,6]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a>0 and b>0 and c>0:\n        if a+b>c and a+c>b and b+c>a:\n            if a==b==c:\n                print(\"Equilateral Triangle\")\n            elif a==b or b==c or a==c:\n                print(\"Isosceles Triangle\")\n            else:\n                print(\"Scalene Triangle\")\n        else:\n            print(\"Not a valid triangle\")\n    else:\n        print(\"Not a valid triangle\")\n\n        \n#test the function\ncheck_Type_Of_Triangle(3,4,5) #output: Scalene Triangle\ncheck_Type_Of_Triangle(5,12,13) #output: Isosceles Triangle\ncheck_Type_Of_Triangle(10,10,10) #output: Equilateral Triangle\ncheck_Type_Of_Triangle(3,4,1) #output: Not a valid triangle\ncheck_Type_Of_Triangle(-5,4,5) #output: Not a valid triangle\ncheck_Type_Of_Triangle(0,4,5) #output: Not a valid triangle\n\n",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene Triangle\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 0\n    for i in range(len(list1)):\n        result += list1[i][C-1]\n    return result\n\n# Example usage:\nmy_list = [[1,2,3], [4,5,6], [7,8,9]]\nprint(sum_column(my_list, 2)) # Output: 12\n\nmy_list2 = [[10,20,30,40], [50,60,70,80], [90,100,110,120]]\nprint(sum_column(my_list2, 4)) # Output: 300\n\n\n# Explanation:\n# In the first example, the column to sum is the second column, so we need to access the index 1. We start by initializing the result to 0 and then loop through each list in the list of lists. For each list, we add the value at index 1 (remember that list indices start at 0, so we subtract 1 to get the correct index). The sum of the second column of the first list is 2+3=5, the sum of the second column of the second list is 6+8=14, and the sum of the second column of the third list is 10+12=22. The final result is 5+14+22=39.\n# ",
        "generated_testcode": "assert sum_column([[1,2,3], [4,5,6], [7,8,9]], 1) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    alpha = 0\n    digit = 0\n    spl = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            digit += 1\n        else:\n            spl += 1\n    return alpha, digit, spl\n\n\n# Test the function\nstring = input(\"Enter a string: \")\nalpha, digit, spl = count_alpha_dig_spl(string)\nprint(\"Alpha: \", alpha)\nprint(\"Digit: \", digit)\nprint(\"Special Characters: \", spl)",
        "generated_testcode": "assert count_alpha_dig_spl(123abc) == {'alpha': 0, 'digit': 0, 'special': 0}\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(input)\n    most_common = c.most_common(1)\n    second_most_common = c.most_common(2)[1]\n    return second_most_common[0]\n\n# Test cases\nprint(second_frequent([\"python\", \"java\", \"java\", \"python\", \"python\", \"ruby\", \"java\", \"ruby\", \"ruby\"])) # should return \"python\"\nprint(second_frequent([\"c\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"go\", \"go\", \"go\", \"python\", \"python\"])) # should return \"c++\"\nprint(second_frequent([\"python\", \"python\", \"python\", \"python\", \"python\", \"python\"])) # should return \"python\"\nprint(second_frequent([\"java\", \"java\", \"java\", \"java\", \"cpp\", \"cpp\", \"go\"])) # should return \"java\"\nprint(second_frequent([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"])) # should return \"c\"\nprint(second_frequent([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])) # should return None\n",
        "generated_testcode": "assert second_frequent([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"] == \"a\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 10 ** digits\n    return math.ceil(a * power) / power\n\n\n# Test cases\nprint(round_up(3.548, 1)) # Should be 4\nprint(round_up(2.123456, 2)) # Should be 2.13\nprint(round_up(12345, 0)) # Should be 10000\nprint(round_up(12345.6789, 3)) # Should be 1235.0\nprint(round_up(123.5, 2)) # Should be 120.0\nprint(round_up(1000.5, 1)) # Should be 100.0\nprint(round_up(10.34567, 3)) # Should be 10.346\nprint(round_up(123.4567, 4)) # Should be 123.4567\nprint(round_up(4.9995, 1)) # Should be 5.0\nprint(round_up(123.4567, 1)) # Should be 123.5\nprint(round_up(123.4567, 3)) # Should be 123.457\nprint(round_up(1.2345, 3)) # Should be 1.235",
        "generated_testcode": "assert round_up(123.456, 2) == 123.46\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \n\n\narr = [1,2,3,4,4,4,5,6,6,4,3,2,1]\nn = len(arr)\nprint(count_Pairs(arr,n))\n\n# Output: 3\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,5,6,7,8,9,9] , 7) == 2\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\d+'\n    numbers = re.findall(pattern, input)\n    max_num = max(map(int, numbers))\n    return max_num\n\n# Test the function\ninput = \"The maximum value is 20. The minimum value is 10.\"\nprint(extract_max(input)) # Output: 20\n\ninput = \"The average is 15.5. The maximum value is 20. The minimum value is 10.\"\nprint(extract_max(input)) # Output: 20\n\ninput = \"The total is $1000. The price is $500. The discount is 10%.\"\nprint(extract_max(input)) # Output: 100\n\ninput = \"The cost is $1000. The price is $50.\"\nprint(extract_max(input)) # Output: 50",
        "generated_testcode": "assert extract_max(input=\"The maximum value is 1000 and the minimum value is 5\") == 1000\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(dict.keys())\n\n#Example Usage:\nd = {'a':1, 'b':2, 'c':3}\nprint(get_key(d))  # Output: ['a', 'b', 'c']\n\n\n#Another example:\nd = {'x':4, 'y':5, 'z':6}\nprint(get_key(d))  # Output: ['x', 'y', 'z']\n\n#Note: You can assume that the input dictionary will only have string keys. ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    start_row, end_row, start_col, end_col = 0, n-1, 0, n-1\n    num = 1\n    while start_row <= end_row and start_col <= end_col:\n        for i in range(start_col, end_col+1):\n            matrix[start_row][i] = num\n            num += 1\n        start_row += 1\n        for i in range(start_row, end_row+1):\n            matrix[i][end_col] = num\n            num += 1\n        end_col -= 1\n        if start_row <= end_row:\n            for i in range(end_col, start_col-1, -1):\n                matrix[end_row][i] = num\n                num += 1\n        end_row -= 1\n        if start_col <= end_col:\n            for i in range(end_row, start_row-1, -1):\n                matrix[i][start_col] = num\n                num += 1\n        start_col += 1\n    return matrix\n\n\n# Test the function\nn = 5\nmatrix = generate_matrix(n)\nfor i in matrix:\n    print(i)\n",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (y2-y1)/(x2-x1)\n\n# write a function to find the y-intercept of a line \ndef y_intercept(x1,y1,slope): \n    return y1-slope*x1\n\n# write a function to find the y-intercept of a line \ndef x_intercept(x1,y1,slope): \n    return x1-y1/slope\n\n# write a function to find the slope of a line from two points \ndef find_slope(x1,y1,x2,y2): \n    return (y2-y1)/(x2-x1)\n\n# write a function to find the y-intercept of a line from two points \ndef find_y_intercept(x1,y1,x2,y2): \n    slope = (y2-y1)/(x2-x1)\n    return y1-slope*x1\n\n# write a function to find the x-intercept of a line from two points \ndef find_x_intercept(x1,y1,x2,y2): \n    slope = (y2-y1)/(x2-x1)\n    return x1-y1/slope\n\n\n# write a function to find the equation of a line given two points and slope \ndef line_equation(x1,y1,slope): \n    y_",
        "generated_testcode": "assert slope(1,2,3,4) == 1.0\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_so_far = a[0] \n    max_ending_here = a[0] \n  \n    start = 0\n    end = 0\n    start_index = 0\n    end_index = 0\n  \n    for i in range(1, size): \n        if max_ending_here < 0: \n            max_ending_here = a[i] \n            start = i \n        else: \n            max_ending_here += a[i] \n          \n        if max_ending_here > max_so_far: \n            max_so_far = max_ending_here \n            end = i \n            start_index = start \n            end_index = i \n  \n    return a[start_index:end_index+1]\n  \n    return max_so_far\n  \na = [-2, -3, 4, -1, -2, 1, 5, -3, 6, 7] \nsize = len(a) \nprint(max_sub_array_sum(a,size)) ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, -3, 5, 2, -2, 6, 1, -4] , 7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum\n\n# Test the function with n=5\nprint(cube_Sum(5))\n\n# Output: 225\n# Explanation: The cube sum of first 5 odd numbers is 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 111^3 + 13^3 = 1 + 27 + 225 + 216 + 216 + 27 = 11000 ",
        "generated_testcode": "assert cube_Sum(5) == 225 # 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 111^3 + 13^3 = 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    s1_dict = {}\n    s2_dict = {}\n    count = 0\n    for i in range(len(s1)):\n        s1_dict[i] = s1[i]\n        s2_dict[i] = s2[i]\n    \n    for i in range(len(s1)):\n        if s1_dict[i] != s2_dict[i]:\n            count += 1\n            if s1_dict[i] == '1' and s2_dict[i] == '0':\n                min_index = s1.find('0')\n                s1 = s1[:min_index] + '1' + s1[min_index+1:]\n                s1_dict[min_index] = '1'\n                s1_dict[i] = '0'\n            elif s1_dict[i] == '0' and s2_dict[i] == '1':\n                min_index = s1.find('1')\n                s1 = s1[:min_index] + '0' + s1[min_index+1:]\n                s1_dict[min_index] = '0'\n                s1_dict[i] = '1'\n    \n    return count\n\n#Example:\n#Input:\n#s1 = \"1011000\"\n#s2 = \"111100\"\n#Output: 2\n#Explanation: Swapping at index 0 and 1",
        "generated_testcode": "assert min_Swaps(s1='101101', s2='111100') == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x:x[0])\n\n#Test the function with the given input\ntuples = [(3, 'cat'), ('dog', 2), (1, 'apple'), ('apple', 4), (2, 'banana')]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples)\n\n#Output: [('apple', 4), (1, 'apple'), ('cat', 3), (2, 'banana'), ('dog', 2)]\n",
        "generated_testcode": "assert sort_tuple(()) == ()\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if b**2 - 4*a*c > 0:  \n        return False  \n    elif b**2 - 4*a*c == 0:  \n        return True  \n    else:  \n        return True\n\n# Test the function with some sample inputs\nprint(Check_Solution(1, -3, -4)) # True\nprint(Check_Solution(1, -3, 4))  # False\nprint(Check_Solution(1, 3, -4))  # True\nprint(Check_Solution(2, -5, -6)) # True ",
        "generated_testcode": "assert Check_Solution(1, -3, 4) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n\n# Driver Code \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8, 9] , 6) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dict = {}\n    for i in range(arr_size):\n        if arr[i] in dict:\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    for key in dict:\n        if dict[key] % 2 != 0:\n            return key\n    return -1\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 2, 4, 5, 1, 4, 7, 3, 1]\nn = len(arr)\nprint(get_odd_occurence(arr, n))  # Output: 3\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(get_odd_occurence(arr, n))  # Output: -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nn = len(arr)\nprint(get_odd_occurence(arr, n))  # Output: 1\n",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , 10) == 5\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    from collections import Counter\n\n    def create_heap(nums, k):\n        return [nums[i] * k for i in range(k)]\n\n    heap = create_heap(primes, n)\n    heapq.heapify(heap)\n    count = Counter(primes)\n\n    for _ in range(n - 1):\n        min_num = heapq.heappop(heap)\n        for i in range(k):\n            heapq.heappush(heap, min_num * primes[i])\n\n        count[min_num] -= 1\n        if count[min_num] == 0:\n            count.pop(min_num)\n\n    return heapq.heappop(heap)\n\n\ndef nth_super_ugly_number_updated(n, primes):\n    import heapq\n    from collections import Counter\n\n    heap = []\n    count = Counter(primes)\n\n    for num in primes:\n        heap.append(num)\n\n    for _ in range(n - 1):\n        min_num = heapq.heappop(heap)\n        for i in range(len(primes)):\n            heapq.heappush(heap, min_num * primes[i])\n\n            count[min_num] -= 1\n            if count[min_num] == 0:\n                count.pop(min_num",
        "generated_testcode": "assert nth_super_ugly_number(10, [2, 3, 5]) == 12, \"Test case 1 failed\"\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    odd_count = 0\n    even_count = 0\n    odd_elements = []\n    even_elements = []\n    for i in range(n):\n        if i % 2 == 0:\n            even_count += 1\n            even_elements.append(i)\n        else:\n            odd_count += 1\n            odd_elements.append(i)\n    if k <= odd_count:\n        return odd_elements[k-1]\n    else:\n        return even_elements[k - odd_count - 1]\n\nprint(get_Number(10, 6)) # Output: 7\n\nprint(get_Number(10, 8)) # Output: 6\nprint(get_Number(10, 1)) # Output: 1\nprint(get_Number(10, 2)) # Output: 3\nprint(get_Number(10, 9)) # Output: 9\n",
        "generated_testcode": "assert get_Number(5, 2) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0 or n == 1: \n        return 1\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    count = 0\n    while fact != 0: \n        count += fact % 10\n        fact //= 10\n    return count \n    \n# Test the function with different values \nprint(find_Digits(10)) \nprint(find_Digits(1)) \nprint(find_Digits(5)) \nprint(find_Digits(100)) ",
        "generated_testcode": "assert find_Digits(5) == 3 # 5! = 120\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param arr: list of arrival times of passengers\n    :param dep: list of departure times of passengers\n    :param n: total number of platforms\n    :return: minimum number of platforms required for the railway/bus station\n    \"\"\"\n    arr.sort()\n    dep.sort()\n    i = 0\n    j = 0\n    count = 0\n    max_count = 0\n    while i < n and j < n:\n        if arr[i] < dep[j]:\n            count += 1\n            i += 1\n        else:\n            count -= 1\n            j += 1\n        max_count = max(max_count, count)\n    return max_count + 1\n\n# Test the function with an example\narr = [900, 940, 950, 1100, 150, 180, 200]\ndep = [910, 1200, 1120, 1130, 190, 150, 200]\nn = len(arr)\nprint(find_platform(arr, dep, n))  # Output: 3\n\n# Test the function with another example\narr = [100, 200, 300, 400, 500, 600, 700, 800]\ndep = [200, 400, 50",
        "generated_testcode": "assert find_platform(arr=[1, 3, 5, 7, 9, 11, 12, 15, 20], dep=[2, 6, 10, 14, 18, 22, 25], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(xs[0])\n\n# Test cases\nprint(lcopy([1, 2, 3, 4, 5])) # [1, 2, 3, 4, 5]\nprint(lcopy([1, 2, 3])) # [1, 2, 3]\nprint(lcopy([1])) # [1]\nprint(lcopy(())) # []\n\n# Explanation:\n# In the first test case, the input is a tuple with one list [1, 2, 3, 4, 5], so the function returns a new list with the same elements as the original list. \n# In the second test case, the input is a tuple with one list [1, 2, 3], so the function returns a new list with the same elements as the original list. \n# In the third test case, the input is a tuple with one empty list [], so the function returns a new empty list. ",
        "generated_testcode": "assert lcopy(()) == []\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 0.5*(base1+base2)*height\n    return area\n\n# Test the function with sample inputs\nprint(area_trapezium(5,10,12)) # Output: 25.0\nprint(area_trapezium(10,20,16)) # Output: 50.0\nprint(area_trapezium(8,16,24)) # Output: 64.0\nprint(area_trapezium(12,18,22)) # Output: 52.0\n\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(length,width):\n    area = length*width\n    return area\n\n# Test the function with sample inputs\nprint(area_rectangle(5,10)) # Output: 50\nprint(area_rectangle(10,20)) # Output: 200\nprint(area_rectangle(8,16)) # Output: 128\nprint(area_rectangle(12,18)) # Output: 192\n\n\n# Write a function to find the area of a parallelogram\ndef area_parallelogram(base,height):\n    area = 0.5*base*height\n    return area\n\n# Test the function with sample inputs\nprint(area_parallelogram(5,10)) # Output: 25.0\nprint(area_parallelogram(10,20))",
        "generated_testcode": "assert area_trapezium(5,10,10) == 25\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2,N): \n        if N % i == 0: \n            if isPrime(i): \n                sum += i \n    return sum\n\ndef isPrime(num): \n    if num < 2: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False\n    return True\n\n#Driver code \nN = 12\nprint(Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        if a**2+b**2==c**2 or b**2+c**2==a**2 or c**2+a**2==b**2:\n            return True\n    else:\n        return False\n\n# Test cases\nprint(is_triangleexists(30,60,90)) # True\nprint(is_triangleexists(10,20,30)) # False\nprint(is_triangleexists(45,45,90)) # True\nprint(is_triangleexists(30,60,90)) # True ",
        "generated_testcode": "assert is_triangleexists(30,45,90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    divisors = [] \n    for i in range(1, N+1): \n        if N % i == 0: \n            divisors.append(i) \n    sum_of_inverse = 0\n    for i in range(len(divisors)): \n        sum_of_inverse += (1/divisors[i]) \n    return sum_of_inverse\n\n\n# Driver code \nN = 24\nSum = 1\nprint(Sum_of_Inverse_Divisors(N, Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10, 2) == 1\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for num in num_list:\n        if num >= 0:\n            new_list.append(num)\n    return new_list\n\n# Test the function \nnum_list = [-1, 2, 3, -4, 5, 6, -7, 8, 9, -10]\nprint(remove_negs(num_list))\n",
        "generated_testcode": "assert remove_negs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [1, 2, 3, 5, 7, 9]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n):\n        if n % 2 != 0 and n % i == 0:\n            sum += i\n    return sum\n\n\n# Test the function with the given test cases\nprint(sum_of_odd_Factors(6)) # Output: 9\nprint(sum_of_odd_Factors(8)) # Output: 5\nprint(sum_of_odd_Factors(12)) # Output: 15\nprint(sum_of_odd_Factors(16)) # Output: 23\nprint(sum_of_odd_Factors(20)) # Output: 13\nprint(sum_of_odd_Factors(25)) # Output: 119",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 1+3+5+7+9\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    for i in range(len(rawheap):\n        heap.append(rawheap[i])\n    for i in range(len(rawheap):\n        parent = (i-1)//2\n        child = 2*i+1\n        while parent >= 0 and heap[parent] < heap[child]:\n            heap[parent], heap[child] = heap[child], heap[parent]\n            parent = (parent-1)//2\n    return heap\n\n\n# Test the function with an example list\ntest_list = [3, 2, 1, 4, 5, 7, 6, 8, 9, 10]\nprint(raw_heap(test_list))  # Output: [10, 6, 4, 3, 2, 9, 5, 8, 1, 7]\n",
        "generated_testcode": "assert raw_heap(list(range(10)) == [0, 9, 4, 5, 1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15]\n\n# Explanation:\n# The heap queue algorithm is a way to convert a list to a heap data structure. In this case, we are using the heap queue algorithm to convert a list of numbers to a heap. The heap queue algorithm works by starting with the largest element in the list and swapping it with the last element in the list, then swapping it with the next largest element, and so on until the heap is complete. The largest element is the root of the heap, and the next largest element is the second largest, and so on. The function raw_heap() takes a list as input and returns a list with the heapified version of the input list. The test code checks if the output is equal to the expected output. ",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function with some inputs\nprint(check_Even_Parity(6))  # Output: Even\nprint(check_Even_Parity(7)) # Output: Odd\nprint(check_Even_Parity(23)) # Output: Odd\nprint(check_Even_Parity(0)) # Output: Even\nprint(check_Even_Parity(-5) # Output: Odd\n\n\n# Using list comprehension to check parity of a list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = [check_Even_Parity(num) for num in nums]\nprint(result) # Output: ['Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even']\n\n\n# Using a for loop to check parity of a list of numbers\nresult = []\nfor num in nums:\n    result.append(check_Even_Parity(num))\nprint(result) # Output: ['Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even']\n\n# Using a map function to check parity of a list of numbers\nresult = list(map(check_Even",
        "generated_testcode": "assert check_Even_Parity(4) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    for i in range(n) : \n        if arr[i] == i : \n            continue\n        count += 1\n        j = arr.index(i)\n        arr[i], arr[j] = arr[j], arr[i]\n        if arr[i] == i : \n            continue\n        count += 1\n    return count\n\n#Driver Code\narr = [0,1,2,3,2,1]\nn = len(arr)\nprint(find_Min_Swaps(arr,n))\n\n#Output: 2\n\n\n#Explanation:\n#First, the array is sorted to [0,1,2,2,3]\n#To sort the array, we need to swap 2 and 0 and 2 and 1\n#So the minimum swaps required are 2.\n\n\n#Time Complexity: O(nlogn)\n#Space Complexity: O(1)\n",
        "generated_testcode": "assert find_Min_Swaps([1, 0, 1, 1, 0, 0, 1, 1] , 5) == 1\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x, list1))\n\n\n# Test the function with the given test input\nprint(listify_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]))\n\n# Output: [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]\n\n\n# Test the function with an empty list\nprint(listify_list([]))\n# Output: []\n\n# Test the function with a single element list\nprint(listify_list([\"hello\"]))\n# Output: [\"hello\"]\n\n# Test the function with a list of integers\nprint(listify_list([1,2,3,4,5]))\n# Output: [1, 2, 3, 4, 5]",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\", \"orange\"]), [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count ** 2\n\n# Test the function\nprint(count_list([1, 2, [3, 4, 5], 6, [7, [8, 9, [10, 11]]]))  # Output: 3\nprint(count_list([[1, [2, 3], 4, [5, [6, 7]]]))        # Output: 4\nprint(count_list([1, 2, 3, 4]))                     # Output: 0",
        "generated_testcode": "assert count_list([] == 0)\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sub_lists = []\n    for i in range(1, len(my_list) + 1):\n        for j in range(len(my_list)):\n            sub_list = my_list[j:i]\n            sub_lists.append(sub_list)\n    return sub_lists\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(sub_lists(my_list)) # [[], [1], [2], [3], [1, 2], [4], [1, 2, 3], [4, 5], [3, 4], [2, 3, 4], [1, 2, 3, 4], [5], [3, 4, 5], [2, 3, 4, 5], [1, 2, 3, 4, 5], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4, 5], [1], [2], [3], [4], [5], [1, 5], [2, 5], [1, 2, 5], [3, 5], [1, 4, 5], [2, 4, 5]]\n\n\n# A more",
        "generated_testcode": "assert sub_lists([\"a\", \"b\", \"c\", \"d\"] == [[\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"d\"], [\"b\", \"d\"], [\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"]]\n\n# Test case 2\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9]+$'\n    if re.match(pattern, string): \n        return True\n    else: \n        return False\n\n# Test the function \nprint(check_alphanumeric(\"hello1234\")) # True \nprint(check_alphanumeric(\"hello1234#\")) # False ",
        "generated_testcode": "assert check_alphanumeric(123abc) == False\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x:sorted(text)==sorted(str),texts))\n\n# Example usage:\ntexts = ['cinema','iceman','manic','abc','bac','cab','hello','world']\nstr = 'icem'\nprint(anagram_lambda(texts,str))\n\n# Output: ['iceman', 'cinema']\n\n\n# Explanation:\n# The function takes two parameters, the first parameter is the list of strings to be searched for anagrams and the second parameter is the string for which anagrams need to be found.\n# It uses the sorted() function to sort the string and compare it with the sorted version of each string in the list. If they are equal, the string is added to the filtered list using the lambda function and finally, the function returns the filtered list.\n# The list comprehension can also be used to achieve the same result.\n\n# def anagram_lambda(texts,str):\n#     return list(filter(lambda x:sorted(text)==sorted(str),texts))\n\n# # Example usage:\n# texts = ['cinema','iceman','manic','abc','bac','cab','hello','world']\n# str = 'icem'\n# print(anagram_lambda(texts,str)) ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"least\",\"steel\",\"flee\",\"listen\",\"tiller\",\"post\",\"stop\",\"toil\",\"peace\",\"stole\",\"pole\"], \"listen\") == [\"listen\",\"silent\",\"enlist\",\"least\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_words[:n]\n\n# test the function\ntext = \"the quick brown fox jumps over the lazy dog the quick brown dog jumps over the dog\"\nprint(n_common_words(text,2))\n# output: [('the', 2), ('dog', 2)]",
        "generated_testcode": "assert n_common_words(text=\"This is a sample text with some words to find the occurrences of common words\", n=2) == ['is', 'words']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    for i in range(n): \n        temp = [0] * (n+1)\n        for j in range(n): \n            if arr[i] - 1 == j or arr[i] == j + 1: \n                temp[j] = 1\n                if j > 0: \n                    temp[j] = max(temp[j-1]+1, temp[j])\n                max_len = max(max_len, temp[j]) \n    return max_len ",
        "generated_testcode": "assert find_longest_conseq_subseq([1,9,3,7,1,10,4,20,15,2,6,5,11,8], 9) == 5\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n# test the function\nstrings = [\"racecar\", \"hello\", \"level\", \"world\", \"civic\", \"deified\", \"deified\"]\nprint(palindrome_lambda(strings))\n\n# Output: ['racecar', 'civic'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"hello\", \"level\", \"world\", \"python\", \"madam\"]) == [\"racecar\", \"madam\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: nums, range(n)))\n\n\n#Example usage:\n\nnums = [1, 2, 3, 4, 5]\nn = 3\nprint(ntimes_list(nums,n)) # Output: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\nnums = [10, 20, 30]\nn = 4\nprint(ntimes_list(nums,n)) # Output: [10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]\n\nnums = [100, 200, 300, 40]\nn = 2\nprint(ntimes_list(nums,n)) # Output: [100, 200, 300, 40, 100, 200, 300, 40] ",
        "generated_testcode": "assert ntimes_list(range(5),3) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if monthname2 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    elif monthname2 in ['April', 'June', 'September', 'November', 'February']:\n        return False\n    elif monthname2 in ['April', 'July', 'September', 'November']:\n        return False\n    else:\n        return True\n\n# Test the function with a sample input\nprint(check_monthnumb('January'))\nprint(check_monthnumb('February'))\nprint(check_monthnumb('March'))\nprint(check_monthnumb('April'))\nprint(check_monthnumb('May'))\nprint(check_monthnumb('June'))\nprint(check_monthnumb('July'))\nprint(check_monthnumb('August'))\nprint(check_monthnumb('September'))\nprint(check_monthnumb('October'))\nprint(check_monthnumb('November'))\nprint(check_monthnumb('December'))\nprint(check_monthnumb('January1')) # Error: Invalid input\n\n# Note: This function can also be simplified using a dictionary to map the months to their corresponding number of days\n# We can use the dictionary to check whether the given month is present in the dictionary or not and then return the number of days.\n# if the month is present in the dictionary, then check if the number of days",
        "generated_testcode": "assert check_monthnumb(1) == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    s = sum(arr)\n    if s%2 == 0:\n        return 0\n    elif s%2 == 1:\n        return 1\n\narr = [2,3,4,5]\nn = len(arr)\nprint(min_Num(arr,n))\n\ndef min_Num(arr,n):\n    s = sum(arr)\n    if s%2 == 0:\n        return 0\n    elif s%2 == 1:\n        if 1 not in arr:\n            return 1\n        else:\n            return 0\n    return 0\n\narr = [2,3,4,5]\nn = len(arr)\nprint(min_Num(arr,n))\n",
        "generated_testcode": "assert min_Num([1,2,3,4,5,6,7,8], 10) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a == '':\n        return 0\n    else:\n        words = a.split()\n        return len(words[-1]) ",
        "generated_testcode": "assert length_Of_Last_Word(a=\"Hello world\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for sublist in list1:\n        if sublist[0] <= leftrange <= sublist[1]:\n            if sublist[0] <= rigthrange <= sublist[1]:\n                new_list.append(sublist)\n            elif sublist[1] > rigthrange:\n                new_list.append([sublist[0], rigthrange])\n            elif sublist[0] < leftrange:\n                new_list.append([leftrange, sublist[1]])\n    return new_list\n\n# Test the function\nlist1 = [[1, 5], [7, 10], [12, 15], [20, 25], [30, 40], [50, 60]]\nprint(remove_list_range(list1, 12, 20))\n# Output: [[1, 5], [20, 25], [30, 40]]\nprint(remove_list_range(list1, 17, 27))\n# Output: [[1, 5], [12, 15], [20, 25], [30, 40], [50, 60]]\nprint(remove_list_range(list1, 25, 30))\n# Output: [[1, 5], [20, 25], [30, 40], [50, 60]]\nprint(",
        "generated_testcode": "assert remove_list_range([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30],[31,32,33],[34,35,36],[37,38,39],[40,41,42],[43,44,45],[46,47,48],[49,50,51],[52,53,54],[55,56,57],[58,59,60],[61,62,63],[64,65,66],[67,68,69],[70,71,72],[73,74,75],[76,77,78],[79,80,81],[82,83,84],[85,86,87],[88,89,90],[91,92,93],[94,95,96],[97,98,99],[100,1101,1",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return lambda lst: sum(filter(lambda x: x > 0, lst)\n    \n\n# Test the function with a sample list\nlst = [1, -2, 3, -4, 5, 6, -7, 8, 9]\nprint(sum_positivenum(lst)(lst) # Output: 24 (2 + 3 + 5 + 6 + 8 + 9)\n",
        "generated_testcode": "assert sum_positivenum(list(range(-5, 5)) == 0)\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False \n    if string1 == string2: \n        return True \n    combined_string = string1 + string1 \n    if string2 in combined_string: \n        return True \n    else: \n        return False \n\n# Testing the function \nstring1 = \"waterbottle\"\nstring2 = \"erbottlewat\"\nprint(are_Rotations(string1, string2))\n",
        "generated_testcode": "assert are_Rotations(string1=\"water\",string2=\"terwa\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if not list2: \n        return True\n    if not list1: \n        return False\n    if list1[0] in list2[0]: \n        return check_subset(list1[1:],list2)\n    else: \n        return check_subset(list1,list2[1:])\n    \n    return True\n\n# test cases\nlist1 = [[1,2,3],[4,5],[6,7],[8,9]]\nlist2 = [[1,2,3],[4,5],[6,7],[8,9],[10,11]]\nprint(check_subset(list1,list2)) # True\nlist1 = [[1,2],[3,4],[5,6]]\nlist2 = [[1,2,3,4],[5,6,7],[8,9,10]]\nprint(check_subset(list1,list2)) # False\nlist1 = [[1,2],[3],[4,5]]\nlist2 = [[1,2,3],[4,5,6],[7,8]]\nprint(check_subset(list1,list2)) # True\nlist1 = [[1,2],[3],[4,5]]\nlist2 = [[1,2],[4,5],[6],[7,8]]\nprint(check_subset(list1,list2)) # False\nlist1 = [[1,2],[3],[4,5]]\nlist2 = [[1,2,3],[4,5],[6,7],[8,9]]\n",
        "generated_testcode": "assert check_subset([[1,2,3],[4,5],[6,7]], [[1,2],[3,4],[5,6],[7]]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n# Testing the function\nprint(fibonacci(5)) # Output: 5\nprint(fibonacci(7)) # Output: 13\nprint(fibonacci(10)) # Output: 55\nprint(fibonacci(15)) # Output: 610\nprint(fibonacci(20)) # Output: 6765\n",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(str1) == len(str2):\n        return False\n    \n    dict = {}\n    for i in range(len(str1)):\n        dict[str1[i]] = str1.count(str1[i])\n    \n    for i in range(len(str2)):\n        if str2[i] in dict:\n            dict[str2[i]] -= 1\n        else:\n            dict[str2[i]] = 0\n        if dict[str2[i]] < 0:\n            return False\n    return True\n\n#test cases\nprint(check_Concat(\"abcd\",\"cdab\")) #True\nprint(check_Concat(\"hello\",\"llohe\")) #False\nprint(check_Concat(\"abcde\",\"abcd\")) #False\nprint(check_Concat(\"hello\",\"hlello\")) #True\nprint(check_Concat(\"abcd\",\"cde\")) #False\n",
        "generated_testcode": "assert check_Concat(str1=\"abc\", str2=\"abcd\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\n\n# Test cases\ntest_list1 = [(1, 5), (2, 3), (4, 8), (10, 12)]\ntest_list2 = [(1, 3), (5, 2), (10, 6), (7, 9), (11, 13), (4, 14)]\n\nprint(min_difference(test_list1))  # Output: 2\nprint(min_difference(test_list2))  # Output: 2\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert min_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return (x // gcd(x, y) * y)\n\n\n# Test the function with sample inputs\nprint(lcm(12, 15))  # Output: 60\nprint(lcm(4, 6))  # Output: 12\nprint(lcm(8, 12))  # Output: 24\nprint(lcm(7, 9))  # Output: 63\nprint(lcm(17, 23))  # Output: 507\nprint(lcm(34, 46))  # Output: 1428\n",
        "generated_testcode": "assert lcm(3, 4) == 12\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = list(str)\n    arr.sort()\n    return \"\".join(arr)\n\n#Example:\n\n#Input: \"geeksforgeeks\"\n#Output: \"eegsforgeik\"\n#Input: \"hello\"\n#Output: \"ehllo\"\n#Input: \"geek\"\n#Output: \"eek\"\n\n\n#Solution:We can take the given string as a list and sort it using the sort() function of list and then join the list to return the string.\n\n\ndef sort_String(str):\n    return \"\".join(sorted(str))\n\n\n#Input: \"geeksforgeeks\"\n#Output: \"eegsforgeik\"\n#Input: \"hello\"\n#Output: \"ehllo\"\n#Input: \"geek\"\n#Output: \"eek\" ",
        "generated_testcode": "assert sort_String(str) == \"hello\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n#Example usage:\ntest_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint(check_tuples(test_tuple, 5)) # True\ntest_tuple2 = (1, 2, 3, 4, 5)\nprint(check_tuples(test_tuple2, 5)) # False\ntest_tuple3 = (1, 2, 3, 4)\nprint(check_tuples(test_tuple3, 5)) # False\ntest_tuple4 = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(check_tuples(test_tuple4, 5)) # True\ntest_tuple5 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(check_tuples(test_tuple5, 5)) # False\ntest_tuple6 = (1, 2, 3)\nprint(check_tuples(test_tuple6, 3)) # True\n\n\n#Other possible solution:\ndef check_tuples(test_tuple, K):\n    return len(test_tuple) == K\n\n\n#Example usage:\ntest_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint",
        "generated_testcode": "assert check_tuples((), 0) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r\"a.*b\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"abc\")) # True\nprint(text_match(\"axyzb\")) # True\nprint(text_match(\"abcd\")) # True\nprint(text_match(\"xabcd\")) # False\nprint(text_match(\"ab\")) # True\nprint(text_match(\"ba\")) # False",
        "generated_testcode": "assert text_match(text='ab') == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a==0 : \n        if b==0 and c==0 : \n            return \"No solution\"\n        elif b==0 : \n            return \"Infinite solutions\"\n        elif c==0 : \n            return \"Infinite solutions\"\n        else : \n            return \"No solution\"\n    else : \n        if (b**2) - (4*a*c)>=0 : \n            return 2\n        else : \n            return 0\n\n# Testing the function with example inputs\nprint(Check_Solution(2,3,1)) #2\nprint(Check_Solution(1,3,4)) #0\nprint(Check_Solution(1,0,0)) #Infinite solutions\nprint(Check_Solution(1,1,0)) #No solution\nprint(Check_Solution(1,-3,4)) #0\nprint(Check_Solution(-1,3,4)) #2\n",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == 2\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    \n    return even_sum, odd_sum\n    \n# Test the function with given list\nlist1 = [2, 5, 6, 8, 4, 10, 3, 12, 7, 9]\neven_sum, odd_sum = sum_even_odd(list1)\nprint(\"The sum of even numbers is:\", even_sum)\nprint(\"The sum of odd numbers is:\", odd_sum)\n\n# Output: The sum of even numbers is: 20\n#        The sum of odd numbers is: 20\n\n\n# Test the function with another list\nlist2 = [3, 4, 6, 2, 8, 11, 10, 5, 7]\neven_sum, odd_sum = sum_even_odd(list2)\nprint(\"The sum of even numbers is:\", even_sum)\nprint(\"The sum of odd numbers is:\", odd_sum)\n\n# Output: The sum of even numbers is: 10\n#        The sum of odd numbers is: 23\n\n# Test the function with another list\nlist",
        "generated_testcode": "assert sum_even_odd(list(range(1, 10)) == 25 # 1 + 3 + 5 + 7 + 9\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*(b+h)\n\n#Test the function\nprint(parallelogram_perimeter(10, 10)) # Output: 30\nprint(parallelogram_perimeter(5, 6)) # Output: 21\nprint(parallelogram_perimeter(2.5, 3.5)) # Output: 12.0\n\n\n# Write a function to calculate area of a parallelogram\ndef parallelogram_area(b, h):\n    return b*h\n\n# Test the function\nprint(parallelogram_area(10, 10)) # Output: 100\nprint(parallelogram_area(5, 6)) # Output: 30\nprint(parallelogram_area(2.5, 3.5)) # Output: 6.75\n\n# Write a function to calculate the diagonal of a parallelogram\ndef parallelogram_diagonal(b, h):\n    return (b**2 + h**2)**0.5\n\n# Test the function\nprint(parallelogram_diagonal(10, 10)) # Output: 14.142135603103822619\nprint(parallelogram_diagonal(5, 6)) # Output: 8.60232526704262251\nprint(parallelogram_diagonal",
        "generated_testcode": "assert parallelogram_perimeter(4, 6) == 16\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x:x%m==0 and x%n==0,nums))\n\n#Example:\nnums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\nm = 5\nn = 10\nprint(div_of_nums(nums,m,n))\n\n#Output: [50]\n\n#Explanation:\n#Only 50 is divisible by both 5 and 10. \n\n#We first filter the numbers in the list using lambda function which checks if the remainder when divided by m and n is 0. Then we return the list of numbers that satisfy the condition. ",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 5, 6, 9, 10, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # l and r are the given range (left and right)\n    # n is the integer to be checked\n    # return True if all the bits are within the given range, else return False\n    # 1. Convert the integer to binary string\n    binary_str = bin(n)\n    # 2. Check if all the bits are within the given range\n    for bit in binary_str[2:]:\n        if bit != '0':\n            if bit not in str(bin(l)[2:] or bit not in str(bin(r)[2:]):\n                return False\n    return True\n\n# Test cases\nprint(all_Bits_Set_In_The_Given_Range(12, 4, 7)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(10, 2, 8)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(23, 5, 14)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(25, 10, 20)) # Output: False\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 1, 3) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    else:\n        mapping = {}\n        for i in range(len(str1)):\n            if str1[i] not in mapping:\n                mapping[str1[i]] = str2[i]\n            elif mapping[str1[i]] != str2[i]:\n                return False\n            else:\n                pass\n        return True\n\n# Test cases\nprint(is_Isomorphic(\"ab\", \"ba\"))  # True\nprint(is_Isomorphic(\"ab\", \"aa\")) # False\nprint(is_Isomorphic(\"foo\", \"bar\")) # False\nprint(is_Isomorphic(\"bar\", \"foo\")) # False\nprint(is_Isomorphic(\"paper\", \"title\")) # True\nprint(is_Isomorphic(\"title\", \"paper\")) # True\nprint(is_Isomorphic(\"apple\", \"banana\")) # False\nprint(is_Isomorphic(\"apple\", \"banna\")) # True\nprint(is_Isomorphic(\"abc\", \"def\")) # False\nprint(is_Isomorphic(\"abcd\", \"defg\")) # False\nprint(is_Isomorphic(\"abcd\", \"dbfe\")) # False\nprint(is_Isomorphic(\"abc\", \"bad\")) # False\nprint(is_Isomorphic(\"add\", \"bad\")) # False\nprint(is_Isomorphic(\"add\", \"bad\")) # False\nprint(is_Isomorphic(\"add\", \"dbf\")) # False\nprint(is_Isomorphic(\"add\", \"dbf\")) #",
        "generated_testcode": "assert is_Isomorphic(str1=\"abba\",str2=\"abcd\") == False\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    length = len(numbers)\n    for i in range(0, length):\n        sum += numbers[i]\n    return sum / length\n\n#Test the function with the given list\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_num(num_list)) # Output: 5.0\n\n\n# Test the function with a list of negative numbers\nnum_list = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nprint(sum_num(num_list)) # Output: -5.0\n\n# Test the function with an empty list\nnum_list = []\nprint(sum_num(num_list)) # Output: 0.0\n\n# Test the function with a list with only one element\nnum_list = [1]\nprint(sum_num(num_list)) # Output: 1.0\n\n# Test the function with a list with strings\nnum_list = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nprint(sum_num(num_list)) # Output: \"Can't add a string to an integer\"\n#Output: TypeError: unsupported operand type(s) for +=: 'int' and 'str'\n",
        "generated_testcode": "assert sum_num([]), 0\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1\n\n# Test the function\nprint(is_odd(7))  # Output: True\nprint(is_odd(8))  # Output: False ",
        "generated_testcode": "assert is_odd(7) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty tuple to store the result\n    result = ()\n    # Loop through each element in the first tuple\n    for i in test_tup1:\n        # Check if the element is a tuple\n        if type(i) == tuple:\n            # If it is, recursively call the function to substract the elements of the inner tuple\n            result += (substract_elements(i, test_tup2),)\n        else:\n            # If it is not, substract the corresponding element from the second tuple\n            result += (i - test_tup2[test_tup1.index(i)],)\n    # Return the result\n    return result\n\n# Test the function with some sample inputs\nprint(substract_elements(((1, (2, (3, 4, (5, 6)), 7), 8), (0, (1, (2, 3, 4), 5))) == (1, (-1, (-1, (-3, 2), 3), 3))\nprint(substract_elements(((1, (2, (3, 4, (5, 6)), 7), 8), (0, (1, (2, 3, 4))) == (1, (-1, (-1, (-3, 2), 3))\nprint(substract_elements((1, (2, (3, 4, (5, 6)), 7), 8), (0, (1, (2, 3)) == (1, (-1",
        "generated_testcode": "assert substract_elements(((1, (2, 3, 4), (5, 6, 7), (8, 9, 10)), (1, (2, 3, 4)) ) == (-1, (-3, -3, -3, -3)\n\n# Test case 2\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for inner_list in lists:\n        result.append(inner_list[::-1])\n    return result\n\n# Test the function with a sample input\nprint(reverse_list_lists([[1,2,3,4], [5,6,7], [8,9,10]])) # Output: [[4,3,2,1], [7,6,5], [10,9,8]]\nprint(reverse_list_lists([[1,2,3], [4,5,6,7], [8,9]])) # Output: [[3,2,1], [6,5,4], [9,8]]\nprint(reverse_list_lists([[]])) # Output: [[]]",
        "generated_testcode": "assert reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while i < n and j < n :\n        if arr1[i] == arr2[j] :\n            i += 1\n            j += 1\n        else :\n            return i\n    return i\n\n#Example\narr1 = [1,2,3,4,5,6,7,8]\narr2 = [1,2,4,5,6,7,8,9]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n)) # Output: 4\n\narr1 = [1,2,3,4,5,6,7,8,9]\narr2 = [1,2,3,4,5,6,7,8]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n)) # Output: 9\n",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], 5) == 8\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str(A) == len(str(B)):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(same_Length(123, 456)) # Output: True\nprint(same_Length(1234, 56)) # Output: False\nprint(same_Length(1234, 5678)) # Output: False\nprint(same_Length(12345, 6789)) # Output: False\nprint(same_Length(123456, 7890)) # Output: True\nprint(same_Length(123, 456789)) # Output: False\nprint(same_Length(123456789, 123456)) # Output: True\n",
        "generated_testcode": "assert same_Length(123, 456) == False\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return ' '.join(text.split())\n\n#Test the function\ntext = \"This is a sample   string with     many   spaces\"\nprint(remove_spaces(text))\n# Output: This is a sample string with many spaces\n\n\n# Another test case\ntext = \"   Hello    world   how are   you   doing    today?   \"\nprint(remove_spaces(text))\n# Output: Hello world how are you doing today? ",
        "generated_testcode": "assert remove_spaces(\"hello  world\" ) == \"hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [sub[-1] for sub in lst]\n\n\n#Example usage:\nlst = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nprint(Extract(lst)) #[3, 7, 10]\n\n\nlst = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nprint(Extract(lst)) #[3, 5, 9]\n\nlst = [[1], [2, 3, 4, 5], [6], [7, 8, 9]]\nprint(Extract(lst)) #[3, 5, 9]",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]] ) == [3,9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if '.' in test_str:\n        decimal_index = test_str.index('.')\n        integer_part = int(test_str[:decimal_index])\n        decimal_part = test_str[decimal_index+1:]\n        return (integer_part, len(decimal_part))\n    else:\n        return (int(test_str), 0)\n\n\n# Test the function\nprint(float_to_tuple('3.14'))\nprint(float_to_tuple('123'))\nprint(float_to_tuple('-2.5'))",
        "generated_testcode": "assert float_to_tuple(1.23) == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0]\n    if n == 2:\n        return max(A[0], A[1])\n    A = sorted(A)\n    dp = [0] * n\n    dp[0] = A[0]\n    dp[1] = max(A[0], A[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + A[i])\n    max_sum = dp[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n\nA = [3, -2, 5, -1, 7, 8, -3, 4]\nprint(max_sum_subseq(A)) # Output: 15\n\n\nA = [1, 2, 3, -4, 5, -2, 6, 7, -8, 8]\nprint(max_sum_subseq(A)) # Output: 15\n\n\nA = [1, -1, -2, -3, -4]\nprint(max_sum_subseq(A)) # Output: 0\n\n\nA = [1, -1, 2, 3, 4, -5, -2",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 3, 4, 2, 6, 7, 8, 9] ) == 31\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(n, key=lambda x: x[-1])\n\n\n#Example usage:\ntuples = [(1, 2, 3), (4, 5, 6), (7, 8, 1), (9, 2, 4), (3, 4, 7), (5, 6, 1)]\nsorted_tuples = last(tuples)\nprint(sorted_tuples)\n# Output: [(1, 2, 3), (7, 8, 1), (5, 6, 1), (3, 4, 7), (1, 2, 4), (4, 5, 6)]\n\n#Explanation:\n# The tuples are sorted by the last element in the tuple, which is 3, 1, 7, 4, 2, and 6 in this case. ",
        "generated_testcode": "assert last([(1,2,3), (4,5,6), (7,8,9), (10,11,12)] == [(10,11,12), (1,2,3), (4,5,6), (7,8,9)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sentence = sentence.lower() \n    word = word.lower() \n    words = sentence.split(\" \") \n    if word in words: \n        return True \n    else: \n        return False ",
        "generated_testcode": "assert is_Word_Present(sentence=\"The quick brown fox jumps over the lazy dog\", word=\"fox\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(numbers), n):\n        result.append(numbers[i:i+n])\n    return result\n\n\n# Test the function with the given example\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nn = 4\nprint(extract_elements(numbers, n))  # Output: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\n# Test the function with another example\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nn = 3\nprint(extract_elements(numbers, n))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                return False\n    return True\n\n# Test the function \narr = [2, 4, 1, 3, 5, 6, 7] \nn = len(arr) \nif check(arr,n): \n    print(\"Array can be sorted\") \nelse: \n    print(\"Array cannot be sorted\") ",
        "generated_testcode": "assert check([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num = 5\n    if string.startswith(str(num):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(match_num(\"5Apple\")) # True\nprint(match_num(\"12345orange\")) # True\nprint(match_num(\"Banana\")) # False\nprint(match_num(\"123orange\")) # False\nprint(match_num(\"54321\")) # False\n\n\n# Explanation:\n# The function takes in a string as input and checks if it starts with the number 5. If it does, it returns True, otherwise, it returns False.\n# In the first test case, the string \"5Apple\" starts with 5, so it returns True. In the second test case, \"54321\" doesn't start with 5, so it returns False. In the third test case, \"12345orange\" starts with the number 1, not 5, so it returns False. In the fourth test case, \"Banana\" does not start with 5, so it returns False. ",
        "generated_testcode": "assert match_num(12345) == \"12345\"\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    result = 1\n    for i in range(2, n + 1):\n        result = lcm(result, i)\n    return result\n\n\n# Test the function\nprint(smallest_multiple(10))  # Output: 2520\nprint(smallest_multiple(20))  # Output: 232792560\n",
        "generated_testcode": "assert smallest_multiple(5) == 60\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key, value in d1.items():\n        result[key] = value\n    for key, value in d2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result\n\n# Test the function with the sample input\nd1 = {'a': 3, 'b': 5, 'c': 7, 'd': 9}\nd2 = {'b': 2, 'c': 3, 'e': 5}\nprint(add_dict(d1,d2))\n\n# Output: {'a': 3, 'b': 7, 'c': 10, 'd': 9, 'e': 5} ",
        "generated_testcode": "assert add_dict({'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 4}) == {'a': 3, 'b': 5, 'c': 3, 'd': 4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        binary_i = bin(i)\n        count += binary_i.count('1')\n    return count\n\n# Test the function\nn = 10\nprint(count_Unset_Bits(n)) # Output: 2\nn = 15\nprint(count_Unset_Bits(n)) # Output: 5\nn = 20\nprint(count_Unset_Bits(n)) # Output: 6\nn = 29\nprint(count_Unset_Bits(n)) # Output: 7\n\n\n# Explanation:\n# In the above code, we iterate through the numbers from 1 to n and convert each number to its binary representation using the `bin()` function. \n# We count the number of 1's in each binary representation and add it to the count. Finally, we return the count as the output. ",
        "generated_testcode": "assert count_Unset_Bits(10) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(even_num(4) # Should return True\nprint(even_num(7) # Should return False\nprint(even_num(20) # Should return True\nprint(even_num(1000) # Should return True\nprint(even_num(3245) # Should return False\nprint(even_num(89) # Should return False ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    factorials = [1] * (end+1) \n    for i in range(2, end+1): \n        factorials[i] = factorials[i-1] * i \n    return factorials \n\ndef binomial_coefficient(n, k): \n    if k > n: \n        return 0\n    return factorial(n, k) // (factorial(k, k) * factorial(n-k, n-k)) \n\ndef sum_of_squares(n): \n    result = 0\n    for i in range(n+1): \n        result += binomial_coefficient(n, i)**2\n    return result\n\n# Test the function \nprint(sum_of_squares(5)) # Output: 55\nprint(sum_of_squares(10)) # Output: 385\nprint(sum_of_squares(20)) # Output: 55245",
        "generated_testcode": "assert factorial(0,5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    regex = r'(\\d{4})/(\\d{2})/(\\d{2})'\n    result = re.search(regex, url)\n    if result:\n        return result.group(1), result.group(2), result.group(3)\n    else:\n        return None, None, None\n\n# Test the function\nurl = 'https://www.example.com/blog/2019/04/21/hello-world'\nyear, month, date = extract_date(url)\nprint(year)  # output: 2019\nprint(month)  # output: 04\nprint(date)   # output: 21\n\nurl = 'https://www.example.com/blog/2020/10/30/welcome'\nyear, month, date = extract_date(url)\nprint(year)  # output: 2020\nprint(month)  # output: 10\nprint(date)   # output: 30\n\nurl = 'https://www.example.com/blog/2020/12/31/christmas'\nyear, month, date = extract_date(url)\nprint(year)  # output: 2020\nprint(month)  # output: 12\nprint(date)   # output: 31\n\nurl = 'https://www.example.com/blog/2021/01/01/new-year'",
        "generated_testcode": "assert extract_date(\n    \"https://www.example.com/blog/2021/05/15/my-blog-post-title\") == (\"2021\", \"05\", \"15\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def is_lucky(num):\n        count = 0\n        while num > 0:\n            count += num % 10\n            num //= 10\n        return count\n\n    i = 1\n    while n > 0:\n        if is_lucky(i) == 7:\n            print(i, end=\" \")\n            n -= 1\n        i += 1\n\nlucky_num(10)\n\n# Output: 7 17 47 77 107 707 1007 1107 1207 1307 1607 2307 2607 3707 4007 ",
        "generated_testcode": "assert lucky_num(5) == [1, 2, 3, 5, 7, 13, 23]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # loop through the array\n    for i in range(n): \n        # if the current element is equal to its index, return it\n        if arr[i] == i: \n            return i \n    # if no fixed point is found, return -1\n    return -1\n\n\n# test the function\narr = [10, 5, 20, 1, 0, 5, 10]\nn = len(arr)\nprint(find_fixed_point(arr, n))\n",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 5, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 13) == 12\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num = str(num)\n    if len(num) % 2 == 0:\n        mid = len(num) // 2\n    else:\n        mid = len(num) // 2\n\n    if num[:mid] == num[mid:]:\n        return int(num[:mid]) - 1\n    else:\n        return int(num[:mid])\n\n\n# Test cases\nprint(previous_palindrome(12321)) # should return 121\nprint(previous_palindrome(12345)) # should return 1234\nprint(previous_palindrome(121)) # should return 11\nprint(previous_palindrome(122)) # should return 21\nprint(previous_palindrome(13331)) # should return 131\nprint(previous_palindrome(12345654321)) # should return 1234564321\nprint(previous_palindrome(1234567)) # should return 123455\nprint(previous_palindrome(12345678)) # should return 123455",
        "generated_testcode": "assert previous_palindrome(12321) == 1231\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 1000 != 0 or y % 4000 == 0):\n            if d > 29:\n                return False\n        elif d > 28:\n            return False\n    elif m in [4, 6, 9, 11]:\n        if d > 30:\n            return False\n    return True\n\n\ndef main():\n    m = int(input(\"Enter month: \"))\n    d = int(input(\"Enter day: \"))\n    y = int(input(\"Enter year: \"))\n    if check_date(m, d, y):\n        print(\"Valid date.\")\n    else:\n        print(\"Invalid date.\")\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) < 3:\n        return None\n\n    min_heap = []\n    max_heap = []\n\n    for num in nums:\n        if not min_heap or num > -num:\n            heapq.heappush(min_heap, -num)\n        else:\n            heapq.heappush(max_heap, num)\n\n        if len(min_heap) > 2 and len(max_heap) > 2:\n            heapq.heappop(min_heap)\n            heapq.heappop(max_heap)\n\n\n    return max(nums[-1] * nums[-2] * nums[-3], heapq.heappop(min_heap) * heapq.heappop(min_heap) * heapq.heappop(max_heap), heapq.heappop(max_heap) * heapq.heappop(min_heap) * heapq.heappop(max_heap))\n\n\n# Test the function with a list of integers\nnums = [1, 10, -10, 3, -5, 7, -2, 8, 11, -3]\nprint(maximum_product(nums))  # Output: 520",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 398\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return comb(n, k)\n\ndef comb(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \n\ndef factorial(n): \n    if n == 1 or n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums = '0123456789'\n    if string[-1] in nums:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(end_num(\"apple123\")) # True\nprint(end_num(\"banana\")) # False\nprint(end_num(\"car\")) # False\nprint(end_num(\"dog5\")) # True\nprint(end_num(\"elephant0\")) # True\nprint(end_num(\"zebra42\")) # True\nprint(end_num(\"water\")) # False\nprint(end_num(\"\")) # False\nprint(end_num(\" \")) # False\nprint(end_num(\"apple\")) # False\nprint(end_num(\"one234five\")) # True\n\n\n# Explanation:\n# We start by defining a string of numbers 0 to 9 as nums. \n# Then we check if the last character of the string is in the string of numbers using if string[-1] in nums. \n# If it is, we return True, indicating that there is a number at the end of the string. If not, we return False.\n# We also handle the case where the string is empty or contains only whitespace with an else statement. ",
        "generated_testcode": "assert end_num(123abc) == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) <= 1:\n        return True\n    i = 1\n    while i < len(s):\n        if s[i] == s[i-1]:\n            return False\n        i += 1\n    return True\n\n# Test the function\nprint(is_Two_Alter(\"abbbbccddddeee\")) # False\nprint(is_Two_Alter(\"abccdeffg\")) # False\nprint(is_Two_Alter(\"abcdedfgh\")) # True\nprint(is_Two_Alter(\"aaaabbc\")) # False\nprint(is_Two_Alter(\"abbcde\")) # False\nprint(is_Two_Alter(\"abcde\")) # True\nprint(is_Two_Alter(\"abcdeedf\")) # True\nprint(is_Two_Alter(\"\")) # True\nprint(is_Two_Alter(\"a\")) # True\nprint(is_Two_Alter(\"aa\")) # False\nprint(is_Two_Alter(\"ab\")) # True\nprint(is_Two_Alter(\"abb\")) # True\nprint(is_Two_Alter(\"abba\")) # False",
        "generated_testcode": "assert is_Two_Alter(s=\"ABABBBA\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pos_nums = list(filter(lambda x: x >= 0, array_nums))\n    neg_nums = list(filter(lambda x: x < 0, array_nums))\n    return pos_nums + neg_nums\n\n# Test the function\narray_nums = [-1, 2, -3, 0, 4, 5, -6, 7, 8, -9, 10]\nprint(rearrange_numbs(array_nums))\n# Output: [2, 4, 5, 8, 10, -1, -3, -6, -9]\n\narray_nums = [1, -2, -3, 4, 5, -6, 7, 8, -9, -10]\nprint(rearrange_nums(array_nums))\n# Output: [1, 4, 5, 8, -2, -3, -6, 7, -9, -10]\n\narray_nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]\nprint(rearrange_nums(array_nums))\n# Output: [1, 3, 5, -1, -3, 2, -2, -4, -5]\n\narray_nums = [-1, -2, 3, -4, 5, 6, -7",
        "generated_testcode": "assert rearrange_numbs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [9, 1, 7, 3, 5, -8, 2, -6]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    A.sort() \n    for i in range(0, arr_size-2): \n        # Fix the first element of the triplet \n        if i > 0 and A[i] == A[i-1]: \n            continue\n        l = i + 1\n        r = arr_size - 1\n        while l < r: \n            current_sum = A[i] + A[l] + A[r] \n            if current_sum == sum: \n                return True\n            elif current_sum < sum: \n                l += 1\n            else: \n                r -= 1\n    return False\n\n# Driver code \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] \nn = len(A) \nsum_val = 30\nprint(find_triplet_array(A, n, sum_val)) \n\n# Output: True\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] \nn = len(A) \nsum_val = 20\nprint",
        "generated_testcode": "assert find_triplet_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 15) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            result.append(text[i:i+2])\n    return result\n\n# Test cases\nprint(text_uppercase_lowercase(\"Hello World\")) # ['Ho', 'Wo']\nprint(text_uppercase_lowercase(\"HELLO WORLD\")) # ['HE', 'OR']\nprint(text_uppercase_lowercase(\"HeLLo WORld\")) # ['He', 'OR']\nprint(text_uppercase_lowercase(\"HeLLo WoRld\")) # ['He', 'Wo', 'Rl']\nprint(text_uppercase_lowercase(\"HeLLo wORld\")) # []\nprint(text_uppercase_lowercase(\"HeLLo worLD\")) # []\nprint(text_uppercase_lowercase(\"HeLLo\")) # []\n\n\n# Solution:\ndef text_uppercase_lowercase(text):\n    result = []\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            result.append(text[i]+text[i+1])\n    return result\n\n# Test cases\nprint(text_uppercase_lowercase(\"Hello World\")) # ['Ho', 'Wo']\nprint(text_uppercase_lowercase(\"HELLO WORLD\")) # ['HE', 'OR']\nprint",
        "generated_testcode": "assert text_uppercase_lowercase([\"A\", \"b\", \"c\", \"d\", \"E\", \"f\", \"g\", \"H\", \"i\", \"j\", \"K\", \"l\"] == [\"A\", \"bcd\", \"E\", \"f\", \"H\", \"ij\", \"K\"])\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 0: \n        return 0\n    if n == 0: \n        return 1\n    if m < 0 or n < 0: \n        return 0\n    if m == n: \n        return 1\n    if m < S[n]: \n        return coin_change(S, m, n-1) \n    return coin_change(S, m, n-1) + coin_change(S, m-S[n], n) ",
        "generated_testcode": "assert coin_change(5, 3, [1, 2, 5]) == 2\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Test the function with a list of numbers\nprint(multiply_list([1, 2, 3, 4, 5])) # Output: 120\n\n# Test the function with a list of strings\nprint(multiply_list(['2', '3', '4', '6'])) # Output: 96",
        "generated_testcode": "assert multiply_list([2, 3, 4, 5] ) == 60\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for tup in test_list:\n        if all(val is not None for val in tup):\n            new_list.append(tup)\n    return new_list\n\n# Test cases\nprint(remove_tuple([(1,2,3), (None, None, None), (4,5,6), (7,8,9), (10, None)])) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(remove_tuple([(1, None, 3), (None, 5, None), (7,8,9), (10, None)] )# Output: [(1, 3), (7, 8, 9)]\nprint(remove_tuple([(None, None, None])) # Output: []\nprint(remove_tuple([(None, 1, 2, None, 3, 4, None, 5, 6, None])) # Output: [(1, 2, 3, 4, 5, 6)]\nprint(remove_tuple([(1, 2, 3, None, 4, 5, None, 6, 7, None, None, None, None, None, 8, 9, 10])) # Output: [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    res = []\n    for i in range(0, len(test_tup), N):\n        res.append(test_tup[i:i+N])\n    return res\n\n# Example usage:\ntest_tup = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\nprint(chunk_tuples(test_tup, 3)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n",
        "generated_testcode": "assert chunk_tuples((), 2) == []\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_pair = (arr[0], arr[1])\n    max_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        if arr[i] > max_pair[0]:\n            max_pair = (max_pair[1], arr[i])\n        elif arr[i] > max_pair[1]:\n            max_pair = (max_pair[0], arr[i])\n            \n        if arr[i] * max_pair[0] > max_product:\n            max_product = arr[i] * max_pair[0]\n        elif arr[i] * max_pair[1] > max_product:\n            max_product = arr[i] * max_pair[1]\n            \n    return max_product\n\n\n# Test cases\nprint(max_product([1, 2, 3, 4, 5])) # Output: 20\nprint(max_product([-10, 2, 3, 5])) # Output: 30\nprint(max_product([-10, -20, -5, -1, -3])) # Output: 50\nprint(max_product([-10, -20, -5, 1, -3])) # Output: -30\nprint(max_product([-1, 1, -2, 2])) # Output: 2\nprint(max_product([1, 2, -2, -1])) #",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 72 # (9, 8) or (7, 9)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\ndef shortest_super_sequence(X, Y):\n    m, n = len(X), len(Y)\n    len_super_seq = super_seq(X, Y, m, n)\n    X_dp = [0] * (n + 1)\n    Y_dp = [0] * (m + 1)\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                X_dp[j] = X_dp[j - 1] + 1\n                Y_dp[j] = Y_dp[j - 1] + 1\n            else:\n                X_dp[j] = max(X_dp[j], Y_dp[j - 1] + 1)\n                Y_",
        "generated_testcode": "assert super_seq(X=\"abc\", Y=\"def\", m=3, n=3) == 3\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with sample inputs\nprint(max_of_two(5, 10))  # Output: 10\nprint(max_of_two(15, 20)) # Output: 20\nprint(max_of_two(30, 15)) # Output: 30\nprint(max_of_two(10, 10)) # Output: 10\n\n\n# Write a function to find minimum of three numbers\ndef min_of_three( x, y, z ):\n    if x < y and x < z:\n        return x\n    elif y < z:\n        return y\n    else:\n        return z\n\n# Test the function with sample inputs\nprint(min_of_three(5, 10, 15)) # Output: 5\nprint(min_of_three(15, 20, 30)) # Output: 15\nprint(min_of_three(30, 15, 20)) # Output: 15\nprint(min_of_three(10, 10, 20)) # Output: 10\n\n\n# Write a function to find the average of three numbers\ndef average_of_three( x, y, z ):\n    return (x + y + z) / 3\n# Test the function with sample inputs\nprint(average_of_three(5,",
        "generated_testcode": "assert max_of_two(10, 20) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n#Example\nprint(mutiple_tuple((2,4,6,8,10)) # Output: 0\n#Explanation: The product of 2, 4, 6, and 8 is 384 and the product of 8 and 10 is 80, so the final result is 240.\n#Therefore, the output should be 240. ",
        "generated_testcode": "assert mutiple_tuple(()) == 1\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(1, k+1):\n        res = res * (n-i+1) // i\n    return res \n\ndef nth_rencontres(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return binomial_coeffi(2*n, n) - binomial_coeffi(n, n+1)\n\n# We can also use the formula nCr = n! / (k!(n-k)!), where n! = n * (n-1) * ... * 1\n# def nth_rencontres(n):\n#     return factorial(2*n) // (factorial(n) * factorial(n+1))\n# from math import factorial\n\nn = 1\nwhile nth_rencontres(n) <= 1000000000:\n    n += 1\nprint(n-1)\n",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n\ndef find_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = find_height(root.left)\n        right_height = find_height(root.right)\n        return max(left_height, right_height) + 1\n\n\n\n# Test the function with the following binary tree\n#     1\n#    /   \\\n#   2    3\n#  / \\\n# 4   5\n# \n# Output should be 3\n\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nprint(find_height(root))  # Output: 3\n\n\n# Test the function with the following binary tree\n#       1\n#      / \\\n#     2   3\n#    / \\\n#   4   5\n#  / \\\n# 6   7\n# \n# Output should be 3\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.left = Node(6)\nroot.right.right = Node(7)\nprint(find_height(root))  # Output: 3",
        "generated_testcode": "assert __init__(1) == None\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    year = dt[:4]\n    month = dt[5:7]\n    day = dt[8:]\n    return day + '-' + month + '-' + year\n\n# Test the function\nprint(change_date_format('2021-09-12')) # Expected output: 12-09-2021\nprint(change_date_format('2021-11-05')) # Expected output: 05-11-2021\nprint(change_date_format('20000-01-01')) # Expected output: 01-01-20000\n\n\n# write a function to convert a date of yyyy-mm-dd format to dd/mm/yyyy format\ndef change_date_format_slash(dt):\n    year = dt[:4]\n    month = dt[5:7]\n    day = dt[8:]\n    return day + '/' + month + '/' + year\n\n# Test the function\nprint(change_date_format_slash('2021-09-12')) # Expected output: 12/09/2021\nprint(change_date_format_slash('2021-11-05')) # Expected output: 05/11/2021\nprint(change_date_format_slash('20000-01-01')) # Expected output: 01/01",
        "generated_testcode": "assert change_date_format(2021-12-31) == 31-12-2021\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0  \n    for i in tuplex:  \n        if i == value:  \n            count += 1  \n    return count  \n  \n#test the function  \ntup = (1,2,3,4,5,6,7,8,2,3,4,5,6,7,8,9,2,3,4)  \nprint(count_tuplex(tup,4)) #output: 3  ",
        "generated_testcode": "assert count_tuplex((\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"c\", \"e\", \"a\") == 2)\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r'a(.*b)*'\n    regex = re.compile(pattern)\n    match = regex.match(text)\n    return bool(match)\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abbbbb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"aac\")) # False\nprint(text_match(\"abbbbbbcc\")) # False\nprint(text_match(\"abb\")) # False\nprint(text_match(\"aaaaaaaabbb\")) # True\nprint(text_match(\"a\")) # True\n",
        "generated_testcode": "assert text_match(r\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1, number+1):\n        total += i**3\n    return total\n\n# Test the function with an example\nprint(sum_series(5))  # Output: 2255 ",
        "generated_testcode": "assert sum_series(5) == 225\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Step 1: Create an empty set\n    set_of_words = set()\n    # Step 2: Iterate over each word in the list of strings\n    for word in l:\n        # Step 3: Add each word to the set\n        set_of_words.add(word)\n    # Step 4: Convert the set back to a list and return it\n    return list(set_of_words)\n\n\n# Test the function\nl = ['apple', 'banana', 'orange', 'banana', 'grape', 'apple', 'apple', 'orange', 'grape']\nprint(remove_duplic_list(l)) # Output: ['orange', 'banana', 'grape', 'apple']\n\nl = ['hello', 'world', 'python', 'python', 'code', 'python', 'code', 'python', 'python']\nprint(remove_duplic_list(l)) # Output: ['hello', 'world', 'code', 'python']\n\nl = ['a', 'b', 'c', 'd', 'c', 'd', 'd', 'e', 'f', 'e']\nprint(remove_duplic_list(l)) # Output: ['a', 'b', 'c', 'd', 'e', 'f']",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"grape\", \"apple\"] == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # define regex pattern to match uppercase letters\n    pattern = re.compile(r'([A-Z])')\n    # replace uppercase letters with underscore and lowercase letter\n    return pattern.sub(lambda x: '_' + x.group(1).lower(), text)\n\n# test the function with sample input\ntext = \"camelCaseString\"\nprint(camel_to_snake(text)) # output: \"camel_case_string\"\n\ntext = \"SomeCamelCaseString\"\nprint(camel_to_snake(text)) # output: \"some_camel_case_string\"\n\ntext = \"camelCaseStringWithNumbers123\"\nprint(camel_to_snake(text)) # output: \"camel_case_string_with_numbers_123\"\n\ntext = \"HTMLParser\"\nprint(camel_to_snake(text)) # output: \"html_parser\"\n\ntext = \"HTTPRequest\"\nprint(camel_to_snake(text)) # output: \"http_request\"\n\ntext = \"HTMLResponseParser\"\nprint(camel_to_snake(text)) # output: \"html_response_parser\"\n\ntext = \"HTTPResponse\"\nprint(camel_to_snake(text)) # output: \"http_response\"\n\ntext = \"HTTPResponseCode\"\nprint(camel_to_snake(text)) # output: \"http_response_code\"\n\ntext = \"HTMLResponseCodeParser\"",
        "generated_testcode": "assert camel_to_snake(None) == \"\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0 or m == 0: \n        return 0\n    if n == 1 or m == 1: \n        return 1\n    dp = [0] * (m + 1) \n    dp[1] = 1\n    for i in range(2, n + 1): \n        for j in range(1, m + 1): \n            if j <= i: \n                dp[j] = dp[j - 1] + dp[i - j] \n    return dp[m] ",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i**2\n    return sum\n\n# Test the function with an example\nprint(series_sum(5)) # Output: 55 (1^2+2^2+3^2+4^2+5^2 = 1+4+9+16 = 30, 30+0 = 30) ",
        "generated_testcode": "assert series_sum(5) == 55\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    temp = []\n    for i in ord_list:\n        for j in test_list:\n            if j[0] == i:\n                temp.append(j)\n    return temp\n\n# Test Cases\nprint(re_arrange_tuples([(1, \"a\", \"apple\"), (2, \"b\", \"ball\"), (3, \"c\", \"cat\"), (4, \"d\", \"dog\"), (5, \"e\", \"elephant\")], [\"e\", \"c\", \"d\", \"a\", \"b\"]))\nprint(re_arrange_tuples([(1, \"a\", \"apple\"), (2, \"b\", \"ball\"), (3, \"c\", \"cat\"), (4, \"d\", \"dog\"), (5, \"e\", \"elephant\")], [\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(re_arrange_tuples([(1, \"a\", \"apple\"), (2, \"b\", \"ball\"), (3, \"c\", \"cat\"), (4, \"d\", \"dog\"), (5, \"e\", \"elephant\")], [\"b\", \"a\", \"c\", \"d\", \"e\"]))\nprint(re_arrange_tuples([(1, \"a\", \"apple\"), (2, \"b\", \"ball\"), (3, \"c\", \"cat\"), (4, \"d\", \"dog\"), (5, \"e\", \"elephant\")], [\"a\", \"b\", \"c\", \"d\", \"e\", \"",
        "generated_testcode": "assert re_arrange_tuples([(1,2,3), (4,5,6), (7,8,9)], [2, 0, 1]) == [(4,5,6), (1,2,3), (7,8,9)]\n",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_char = ''\n    max_count = 0\n    for char in char_dict:\n        if char_dict[char] > max_count:\n            max_char = char\n            max_count = char_dict[char]\n    return max_char\n\n\n\n# Test the function with a sample string\nprint(max_char('hello world')) # Output: 'l'\nprint(max_char('mississippi')) # Output: 'i'\nprint(max_char('apple')) # Output: 'a'\nprint(max_char('banana')) # Output: 'a'\nprint(max_char('abccccba')) # Output: 'c'\n\n\n# Function to count the most common character in a given string using a dictionary\ndef count_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_dict:\n        if char_dict[char] > max_count:\n            max_count = char_dict[char]\n            max_char = char\n    return max_char\n\n\n#",
        "generated_testcode": "assert max_char(input(\"Enter a string: \")) == 'e' # Example input: \"hello world\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create three pointers\n    i, j, k = 0, 0, 0\n    # initialize a variable to store the minimum difference\n    min_diff = float('inf')\n    # initialize a variable to store the three closest elements\n    result = [None, None, None]\n    # initialize variables to store the minimum difference\n    min_diff_i, min_diff_j, min_diff_k = float('inf'), float('inf'), float('inf')\n    # while all pointers are within their array's bounds\n    while i < len(A) and j < len(B) and k < len(C):\n        # calculate the difference between the current elements\n        diff_i = A[i] - B[j]\n        diff_j = B[j] - C[k]\n        diff_k = A[i] - C[k]\n        # check if the current difference is less than the minimum difference\n        if diff_i < min_diff_i:\n            min_diff_i = diff_i\n            min_diff = diff_i\n            result[0] = A[i]\n        if diff_j < min_diff_j:\n            min_diff_j = diff_j\n            min_diff = diff_j\n            result[1] = B[j]\n        if diff_k < min_diff_k:\n            min_diff_k = diff_k\n            min_diff = diff_k\n            result[2] = C[k]\n        # update pointers\n",
        "generated_testcode": "assert find_closet(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 5, 7, 9, 10, 12, 13, 15], 2, 3) == (5, 7, 9)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Sorting the dictionary using lambda function\n    sorted_models = sorted(models, key=lambda x: x['name'])\n    return sorted_models\n\n# Input List of dictionaries\nmodels = [\n    {'name': 'iPhone X', 'price': 9999, 'ram': 6, 'storage': 64},\n    {'name': 'Samsung S10', 'price': 849, 'ram': 6, 'storage': 128},\n    {'name': 'Google Pixel 3', 'price': 749, 'ram': 4, 'storage': 64},\n    {'name': 'iPhone 8', 'price': 7999, 'ram': 3, 'storage': 64},\n    {'name': 'Samsung S9', 'price': 749, 'ram': 4, 'storage': 128},\n    {'name': 'Google Pixel 2', 'price': 649, 'ram': 4, 'storage': 32},\n    {'name': 'iPhone 7', 'price': 6999, 'ram': 3, 'storage': 128},\n]\n\n# Calling the function\nsorted_models = sorted_models(models)\nprint(sorted_models)\n\n# Output: [{'name': 'Google Pixel 2', 'price': 649, 'ram': 4, 'storage': 32}, {'name': 'Google Pixel ",
        "generated_testcode": "assert sorted_models",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(arr)\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    # Find largest among root, left child and right child\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    # Swap root with largest among root, left and right child\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        # Recursively heapify the affected sub-tree\n        heapify(arr, n, largest)\n\n# Test the function\narr = [4, 10, 3, 5, 1, 2, 6, 8, 9, 7]\nheap_sort(arr)\nprint(\"Sorted array is\", arr)\n",
        "generated_testcode": "assert heap_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if type(i) == int:\n            count += 1\n        else:\n            return count\n    return count\n\n\n# Test the function\nprint(count_elim([1, 2, 3, 'hello', 'world', 4, 5, (6, 7), 8]))\n# Output: 4\nprint(count_elim([1, 2, 3, 4, 5, 'hello', 6, 'world', 7, 8]))\n# Output: 6\nprint(count_elim([1, 'hello', 'world', 2, 3, 4, 5, 'goodbye', 'world', 6, '!']))\n# Output: 0\nprint(count_elim([1, 2, 3, 4, 5, 6, 7, 8]))\n# Output: 6\n\n\n# Alternative solution using a loop with a break statement\ndef count_elim(num):\n    count = 0\n    for i in num:\n        if type(i) != tuple:\n            count += 1\n        else:\n            break\n    return count\n\n# Test the function\nprint(count_elim([1, 2, 3, 'hello', 'world', 4, 5, (6, 7), 8]))\n# Output: 4\nprint(count_elim([1, 2, 3, 4, 5",
        "generated_testcode": "assert count_elim([\"a\", \"b\", \"c\", \"d\", \"e\", (\"f\", \"g\"), \"h\", \"i\", \"j\", \"k\"]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n\n# Test the function\ntest_tup = (1,2,3,4)\ncheck_list = [1,2,3,4,5,6,7,8,9]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (10,20,30)\nprint(check_element(test_tup, check_list)) # Output: False\n\n\ntest_tup = \"abc\", \"def\", \"ghi\"\ncheck_list = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = \"pqr\", \"stu\", \"vwx\"\nprint(check_element(test_tup, check_list)) # Output: False\n",
        "generated_testcode": "assert check_element(('a', ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #heapq module to sort the list in ascending order\n    heap1 = [num1.pop(0) for _ in range(len(num1)) if num1]\n    heap2 = [num2.pop(0) for _ in range(len(num2) if num2]\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    \n    result = []\n    while heap1 and heap2:\n        if heap1[0] < heap2[0]:\n            result.append(heap1[0])\n            heap1.pop(0)\n        else:\n            result.append(heap2[0])\n            heap2.pop(0)\n    result += heap1 + heap2\n    return result\n    \n\n#test cases\nprint(combine_lists([1,2,3,4,5],[2,3,4,5,6])) #[1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\nprint(combine_lists([1,2,3,4,5],[5,6,7,8,9])) #[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(combine_lists([1,2,3],[4,5,6])) #[1, 2, 3, 4, 5, 6]\nprint(combine_",
        "generated_testcode": "assert combine_lists(sorted([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    numbers = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            numbers.append(text[i])\n            positions.append(i)\n    print(\"Numbers:\", numbers)\n    print(\"Positions:\", positions)\n\n# Example usage:\nnum_position(\"The numbers are 23, 56, and 87\") # Output: Numbers: ['2', '3', '5', '6', '8', '7']\n                                       #          Positions: [10, 11, 12, 14, 16]\nnum_position(\"There are no numbers in this string\") # Output: Numbers: []\n                                         #          Positions: []\n\nnum_position(\"The numbers are 100 and 45\") # Output: Numbers: ['0', '4', '5']\n                                 #          Positions: [14, 15, 16]\nnum_position(\"The number is 1234\") # Output: Numbers: ['1', '2', '3', '4']\n                         #          Positions: [13, 14, 15]\nnum_position(\"No numbers here!\") # Output: Numbers: []\n                        #          Positions: []\n",
        "generated_testcode": "assert num_position(123abc456) == {'1': [0], '3': [2], '4': [3], '5': [4], '6': [5]}\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a tuple as input and returns a set\n    \"\"\"\n    return set(t)\n\n\n#Test the function with an example tuple\nmy_tuple = (1, 2, 3, 4, 5, 5, 4, 3, 2, 1)\nprint(tuple_to_set(my_tuple)) # Output: {1, 2, 3, 4, 5}\n\n#Test the function with an empty tuple\nmy_tuple = ()\nprint(tuple_to_set(my_tuple)) # Output: set()\n\n#Test the function with a tuple with only one element\nmy_tuple = (1,)\nprint(tuple_to_set(my_tuple)) # Output: {1}\n\n#Test the function with a tuple with duplicate elements\nmy_tuple = (1, 2, 2, 3, 4, 4, 5, 5)\nprint(tuple_to_set(my_tuple)) # Output: {1, 2, 3, 4, 5} ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store the count of each character in the string\n    d = {}\n    # loop through the string and count the frequency of each character\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    # sort the dictionary by value in descending order\n    sorted_d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary to store the most common elements and their counts\n    common_dict = {}\n    # loop through the sorted dictionary and add the most common elements to the new dictionary\n    for i in range(a):\n        common_dict[sorted_d[i][0]] = sorted_d[i][1]\n    # return the new dictionary\n    return common_dict\n\n# test the function\ns = \"hello, world! hello, world!\"\na = 2\nprint(most_common_elem(s, a)) # output: {'l': 3, 'o': 3, 'h': 2, 'e': 1, ' ': 2, 'w': 2, 'r': 2, 'd': 2, 'o,': 1, '!': 1}\ns = \"aaaabbbbccc\"\na = 2\nprint(most_common_elem(s, a)) # output: {'a': 3, 'b': 3, 'c': 2}\ns = \"aabbb",
        "generated_testcode": "assert most_common_elem(s=\"hello world world world hello world\", a=2) == {'world': 2, 'hello': 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return min(len_list)\n\n#Test the function\nlist1 = ['apple', 'banana', 'cherry', 'orange', 'grape', 'kiwi', 'pear']\nprint(len_log(list1)) ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\"]), 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if index < len(tup1):\n        return tup1[index]\n    else:\n        return None\n\n#Test the function\nmy_tuple = (1,2,3,4,5,6,7,8,9)\nprint(get_item(my_tuple,4)) #Output: 5\nprint(get_item(my_tuple,10)) #Output: None\n",
        "generated_testcode": "assert get_item((\"apple\", \"banana\", \"cherry\", \"orange\"), 1) == \"banana\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    count = [len(str(x)) for x in tup]\n    return sorted(tup, key=lambda x: count[tup.index(x)] if count.count(count[tup.index(x)]) == 1 else -1)\n\n\n#Example:\ntup = (123, 45, 789, 56, 12, 125, 4567, 34, 8765, 2345, 1234)\nprint(count_digs(tup))\n#Output: (45, 789, 8765, 123, 34, 2345, 125, 12, 56, 1234)",
        "generated_testcode": "assert count_digs(()) == []\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Return the chinese zodiac sign for the given year.\n    \"\"\"\n    if year % 4 == 0:\n        return \"Dragon\"\n    elif year % 8 == 0:\n        return \"Monkey\"\n    elif year % 12 == 0:\n        return \"Dog\"\n    elif year % 12 == 1:\n        return \"Rat\"\n    elif year % 12 == 2:\n        return \"Ox\"\n    elif year % 12 == 3:\n        return \"Tiger\"\n    elif year % 12 == 4:\n        return \"Rabbit\"\n    elif year % 12 == 5:\n        return \"Dragon\"\n    elif year % 12 == 6:\n        return \"Snake\"\n    elif year % 12 == 7:\n        return \"Horse\"\n    elif year % 12 == 8:\n        return \"Goat\"\n    elif year % 12 == 9:\n        return \"Monkey\"\n    elif year % 12 == 10:\n        return \"Rooster\"\n    elif year % 12 == 11:\n        return \"Dog\"\n    else:\n        return \"Pig\"\n\n\n# Test the function\nprint(chinese_zodiac(20000))  # Should print \"Dragon\"\nprint(chinese_zodiac(20012))  # Should print \"",
        "generated_testcode": "assert chinese_zodiac(20000) == \"Dragon\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_index = 0\n    max_count = 0\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                count = 0\n                for k in range(len(test_list1)):\n                    if test_list1[i] == test_list1[k]:\n                        count += 1\n                if count > max_count:\n                    max_count = count\n                    max_index = i\n    return max_index\n\n\n# Example usage:\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(max_similar_indices(test_list1, test_list2)) # Output: 2\n\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12",
        "generated_testcode": "assert max_similar_indices([(1,2), (3,4), (5,6), (7,8)], [(1,2), (3,4), (5,6), (9,10)]) == (0, 2)\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Helper function to compute ncr % p \n    def ncr_mod_p_helper(n, r, p, memo): \n        # If result is already computed \n        if r == 0: \n            return 1\n        if r == 1: \n            return n % p \n        # If value is already computed \n        if r in memo: \n            return memo[r] \n        # Store the value of nCr % p in memo \n        memo[r] = (n * ncr_mod_p_helper(n - 1, r - 1, memo)) % p * ncr_mod_p_helper(n - 1, r, memo) % p\n        return memo[r] \n    # Create a memo dictionary \n    memo = {} \n    return ncr_mod_p_helper(n, r, memo) ",
        "generated_testcode": "assert nCr_mod_p(10, 5, 100000000000007) == 26280\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    ar.sort() \n    count = 0\n    i = 0\n    j = 1\n    res = 1\n    while j < n: \n        if ar[j] != ar[i]: \n            res += 1\n            i += 1\n            j += 1\n        else: \n            j += 1\n    return res \n\n#Example:\nar = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7]\nn = len(ar)\nprint(subset(ar, n)) # Output: 4\n\nar = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7]\nn = len(ar)\nprint(subset(ar, n)) # Output: 2\nar = [1, 1, 2, 3, 4, 4, 5, 6, 7]\nn = len(ar)\nprint(subset(ar, n)) # Output: 3\n",
        "generated_testcode": "assert subset(ar = [1, 2, 3, 4, 4, 4, 5, 6, 7], n = 5) == 2\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if sale_amount>actual_cost: \n        profit = sale_amount - actual_cost \n        return profit \n    else: \n        return None\n\n# Test the function \nprint(profit_amount(100, 20)) # should return 10 ",
        "generated_testcode": "assert profit_amount(1000,120) == 20\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function returns True if the given number is abundant, else False\n    :param n: an integer\n    :return: a boolean value\n    \"\"\"\n    sum_of_divisors = sum(i for i in range(1, n) if n % i == 0)\n    if sum_of_divisors > n:\n        return True\n    else:\n        return False\n\n\n\n# Test the function\nprint(is_abundant(12))  # True\nprint(is_abundant(24))  # False\nprint(is_abundant(23))  # True\nprint(is_abundant(18))  # True\n",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = re.findall('[A-Z][a-z]+', text)\n    return words\n\n# Test the function with an example string\nstring = \"ThisIsAnExampleString\"\nprint(split_list(string)) # Output: ['This', 'Is', 'Example', 'String']\n\n# Test the function with another example string\nstring = \"ThisIsAnotherExample\"\nprint(split_list(string)) # Output: ['This', 'Is', 'Another', 'Example']\n\n# Test the function with an empty string\nstring = \"\"\nprint(split_list(string)) # Output: []\n\n# Test the function with a single word string\nstring = \"Example\"\nprint(split_list(string)) # Output: ['Example']\n\n# Test the function with a string that has no uppercase letters\nstring = \"thisistheexample\"\nprint(split_list(string)) # Output: []\n\n# Test the function with a string that has all uppercase letters\nstring = \"EXAMPLESTRING\"\nprint(split_list(string)) # Output: ['EXAMPLE', 'STRING']\n",
        "generated_testcode": "assert split_list(\"HelloWorld\" ) == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return None\n    i = 0\n    while ((n & 1) != 1):\n        n = n >> 1\n        i += 1\n    return i\n\nn = 10\nprint(get_First_Set_Bit_Pos(n)) # Output: 1",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0b10101010101010) == 1\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    roman_numerals = {\n        10000: 'M',\n        900: 'CM',\n        500: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while num >= value:\n            result += numeral\n            num -= value\n    return result\n\n\n# Test cases\nprint(int_to_roman(999)) # Should print 'XCIX'\nprint(int_to_roman(754)) # Should print 'DLIV'\nprint(int_to_roman(39999)) # Should print 'MMMCMXCIX'\nprint(int_to_roman(1987)) # Should print 'MCMLXXXVII'\n",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0: \n        return 0 \n    else: \n        return sum(lst) / len(lst) ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        if i%2 == 0:\n            dp[i] = dp[i//2] * 2 + dp[(i//2) - 1]\n        else:\n            dp[i] = dp[(i//2) - 1]\n            if i%3 == 0:\n                dp[i] = (dp[i//3] * 2 + dp[(i//3 - 1]) * 2)\n            if i%4 == 0:\n                dp[i] = (dp[i//4] * 3 + dp[(i//4 - 1) * 2)\n                \n    return dp[n]\n\n\n#test cases\nprint(get_noOfways(1)) #1\nprint(get_noOfways(2)) #2\nprint(get_noOfways(3)) #3\nprint(get_noOfways(4)) #4\nprint(get_noOfways(5)) #5\nprint(get_noOfways(6)) #6\nprint(get_noOfways(7)) #7\nprint(get_noOfways(8)) #9\nprint(get_noOfways(9)) #12\nprint(get_noOfways(10)) #16\nprint(get",
        "generated_testcode": "assert get_noOfways(1) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    roman_to_int_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 1000, 'D': 5000, 'M': 10000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}\n    total = 0\n    i = 0\n    while i < len(s):\n        if i+1 < len(s) and s[i:i+2] in roman_to_int_map:\n            total += roman_to_int_map[s[i:i+2]]\n            i += 2\n        else:\n            total += roman_to_int_map[s[i]]\n            i += 1\n    return total\n\n\n# Test cases\nprint(roman_to_int('IV')) # should return 4\nprint(roman_to_int('XL')) # should return 40\nprint(roman_to_int('MCMXCIV')) # should return 1994\nprint(roman_to_int('MMMCMXCIX')) # should return 39999\n",
        "generated_testcode": "assert roman_to_int(None) == 0\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize sum to 0 \n    sum = 0\n\n    # Iterate over the range from l to r and add each even number to the sum \n    for i in range(n[0], n[1]+1):\n        if i % 2 == 0:\n            sum += i\n\n    return sum \n\n# Test the function with an example\nprint(sum_Natural([1, 10]) # Output: 30 (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 30)\nprint(sum_Natural([2, 8]) # Output: 20 (2 + 4 + 6 + 8 = 20)\nprint(sum_Natural([0, 9]) # Output: 25 (0 + 2 + 4 + 6 + 8 = 20)\nprint(sum_Natural([10, 20]) # Output: 50 (10 + 12 + 14 + 16 + 18 = 50)\n\n\n# Test the function with an empty range\nprint(sum_Natural([10, 10]) # Output: 0 ",
        "generated_testcode": "assert sum_Natural(1, 10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    a = 3\n    b = -2\n    c = 1\n    return (x**2) * (y**2) + (y**2) * (z**2) - (x**2) * (z**2) + (y**2) + (z**2) - 2*x*y*z - 4*x*y - 6*x + 10\n\n\ndef main():\n    x = float(input(\"Enter the value of x: \"))\n    y = float(input(\"Enter the value of y: \"))\n    z = float(input(\"Enter the value of z: \"))\n    \n    print(\"The discriminant value is:\", discriminant_value(x,y,z))\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert discriminant_value(1,2,3) == 10\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n\n# Test the function\nprint(word_len(\"hello\")) # Output: Odd\nprint(word_len(\"python\")) # Output: Even\nprint(word_len(\"programming\")) # Output: Even\n\n\n# We can also use the ternary operator in the function to make it shorter\ndef word_len(s): \n    return \"Even\" if len(s) % 2 == 0 else \"Odd\"\n\n\n# Test the function\nprint(word_len(\"hello\")) # Output: Odd\nprint(word_len(\"python\")) # Output: Even\nprint(word_len(\"programming\")) # Output: Even ",
        "generated_testcode": "assert word_len(123) == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if not text:\n        return \"\"\n    result = text[0].lower()\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result += \"_\" + text[i].lower()\n        else:\n            result += text[i]\n    return result\n\n\n# Test cases\nprint(camel_to_snake(\"CamelCase\"))  # Output: \"camel_case\"\nprint(camel_to_snake(\"camelCase\"))  # Output: \"camel_case\"\nprint(camel_to_snake(\"camelCaSe\"))  # Output: \"camel_case\"\nprint(camel_to_snake(\"camelCaseString\"))  # Output: \"camel_case_string\"\nprint(camel_to_snake(\"CamelCaseString\"))  # Output: \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseStringWithLeadingCapital\"))  # Output: \"camel_case_string_with_leading_capital\"\nprint(camel_to_snake(\"AaBbCc\"))  # Output: \"a_b_c\"\nprint(camel_to_snake(\"\"))  # Output: \"\"\nprint(camel_to_snake(\"a\"))  # Output: \"a\"\nprint(camel_to_snake(\"A\"))  # Output: \"a\"\n",
        "generated_testcode": "assert camel_to_snake(None) == \"\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in tuple1:\n        if tup:\n            result.append(tup)\n    return result\n\n\n#Test the function with the given list of tuples\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n#Expected Output: [('a', 'b'), ('a', 'b', 'c'), ('d')]\n\n#Explanation:\n#The function loops through the list of tuples and checks if each tuple is empty using the conditional statement if tup. If the tuple is not empty, it is appended to the result list.\n#Finally, the result list is returned as the output. ",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')] ) == [('a', 'b', 'c'), ('d')]\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\n# Test the function\nprint(check(\"Hello World\"))\nprint(check(\"Python\"))\nprint(check(\"Python Programming\"))\nprint(check(\"Python is awesome\"))\nprint(check(\"Java is cool\"))\nprint(check(\"Java is awesome\"))\nprint(check(\"Python is awesome language\"))\n\n\n# Write a python program to count the number of uppercase and lowercase letters in a string\ndef count_upper_lower(string):\n    upper_count = 0\n    lower_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n    return upper_count, lower_count\n\n# Test the function\nstring = \"Python is awesome\"\nprint(count_upper_lower(string))\n\n# Write a python program to count the number of even and odd numbers in a list\ndef count_even_odd(numbers):\n    even_count = 0\n    odd_count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n\n# Test the function\nnumbers = [2, 4, 6, 8, 1, 3, 5, ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #function to find maximum possible value for given periodic function\n    def periodic_max(A,B,N):\n        if A==0:\n            return B-1\n        elif B==0:\n            return A-1\n        else:\n            max_value=min(A,B)\n            for i in range(1,N):\n                if A*i<=B:\n                    if A*i%B==0:\n                        max_value=A*(i+1)\n                else:\n                    max_value=A*i\n            return max_value\n    return periodic_max(A,B,N)\n\n#Example:\n#Input: A=5, B=10, N=3\n#Output: 14\n#Explanation: The maximum possible value for the given function is 5*3=15. \n# 5 is the maximum possible value that can be achieved when the function repeats every 3 units. ",
        "generated_testcode": "assert floor_Max(1,2,3) == 2\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                result.append(test_list[i] + test_list[j])\n    return result\n\n#Example usage:\ntest_list = [(1, 2, 3, 4), (1, 5, 6), (2, 7, 8), (3, 9, 10), (2, 4, 5)]\nprint(join_tuples(test_list))  # [(1, 2, 3, 4, 5, 6), (2, 7, 8), (2, 4, 5)]\ntest_list = [(1, 2, 3), (1, 4, 5), (1, 6, 7), (2, 3, 8)]\nprint(join_tuples(test_list))  # [(1, 2, 3, 4, 5, 6), (2, 3, 8)]\n\n\n# Solution:\n\ndef join_tuples(lst):\n    result = []\n    seen = set()\n    for tup in lst:\n        if tup[0] in seen:\n            continue\n        seen.add(tup[0])\n        for tup2 in lst:\n            if tup[0] == tup2",
        "generated_testcode": "assert join_tuples([(1,2,3),(1,4,5),(1,6,7),(2,3,4),(2,5,6)] ) == [(1, [2, 4, 5], (1, 6, 7), (2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x > y:\n        return y\n    else:\n        return x\n\n# Test cases\nprint(min_of_two(5, 10)) # Output: 5\nprint(min_of_two(30, 15)) # Output: 15\nprint(min_of_two(12, 20)) # Output: 12\nprint(min_of_two(-5, -10)) # Output: -10\nprint(min_of_two(0, 0) # Output: 0\n\n\n# Using lambda function\nprint(min(5, 10)) # Output: 5\nprint(min(30, 15)) # Output: 15\nprint(min(12, 20) # Output: 12\nprint(min(-5, -10) # Output: -10\nprint(min(0, 0) # Output: 0",
        "generated_testcode": "assert min_of_two(5, 10) == 5\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(n, a, b, c, index, segments, max_segments):\n        if index == 0:\n            return max_segments\n        elif n < 0:\n            return max_segments\n        else:\n            if n >= a:\n                max_segments[index][0] = max(max_segments[index][0], helper(n - a, a, b, index - 1, segments, max_segments))\n            if n >= b:\n                max_segments[index][1] = max(max_segments[index][1], helper(n - b, a, c, index - 1, segments, max_segments))\n            if n >= c:\n                max_segments[index][2] = max(max_segments[index][2], helper(n - c, a, c, index - 1, segments, max_segments))\n            return max_segments[index][0] + max_segments[index][1] + max_segments[index][2]\n    max_segments = [[0, 0, 0] for _ in range(n + 1)]\n    return helper(n, a, b, c, 2, max_segments)\n\n\n# Test cases\nprint(maximum_segments(10, 2, 3))  # Output: 3 (10 = 2 + 2 + 6)\nprint(maximum_segments(20, 3, 4",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i]):\n            result_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    return tuple(result_tup)\n\n\n#test case\ntup1 = ((1,2,3), (4,5,6), (7,8,9))\ntup2 = (10, 11, 12)\n\nprint(concatenate_nested(tup1, tup2)) # Output: (11, 13, 15, 12)",
        "generated_testcode": "assert concatenate_nested((), (1, 2, 3) + (4, 5, 6) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if d == 0:\n        return s\n    else:\n        return s[d:] + s[:d]\n\n# Test the function\ns = \"hello world\"\nd = 2\nprint(left_rotate(s, d)) # Output: lo worldhe\ns = \"abcdefg\"\nd = 3\nprint(left_rotate(s, d)) # Output: defgab\ns = \"abc\"\nd = 4\nprint(left_rotate(s, d)) # Output: abc\ns = \"12345\"\nd = 2\nprint(left_rotate(s, d)) # Output: 34512\ns = \"python\"\nd = 4\nprint(left_rotate(s, d)) # Output: nohtyp\n\n\n# time complexity: O(n)\n# space complexity: O(n)\n\n# where n is the length of the string\n# we need to create a new string and concatenate the rotated substring with the original substring\n# so the space complexity is O(n)\n\n# worst case time complexity is O(n) when the rotation distance is the length of the string\n# best case time complexity is O(1) when the rotation distance is 0",
        "generated_testcode": "assert left_rotate(s=\"hello\", d=2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    # create a matrix to store the path sum\n    DP = [[0 for i in range(n)] for j in range(n)]\n    # initialize the first row and column\n    DP[0][0] = A[0][0]\n    for i in range(1, n):\n        DP[0][i] = DP[0][i-1] + A[0][i]\n        DP[i][0] = DP[i-1][0] + A[i][0]\n    # fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            DP[i][j] = min(DP[i-1][j], DP[i][j-1]) + A[i][j]\n    # initialize the minimum path sum\n    min_path_sum = DP[n-1][n-1]\n    # iterate through the matrix to find the minimum path sum\n    for i in range(1, n):\n        for j in range(1, n):\n            min_path_sum = min(min_path_sum, DP[i][j])\n    return min_path_sum\n\n\n# test the function\nA = [[3, 4, 8, 10],\n     [2, 5, 1, 6],\n     [1, 4, 3, 7]]\nprint(min_sum_path(A)) #",
        "generated_testcode": "assert min_sum_path(\n    [[1],\n     [2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == 11\n\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]